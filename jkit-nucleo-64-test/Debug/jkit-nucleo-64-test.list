
jkit-nucleo-64-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000068d0  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005dc  080069e0  080069e0  000169e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fbc  08006fbc  000200a8  2**0
                  CONTENTS
  4 .ARM          00000000  08006fbc  08006fbc  000200a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006fbc  08006fbc  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fbc  08006fbc  00016fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fc0  08006fc0  00016fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08006fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004490  200000a8  0800706c  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004538  0800706c  00024538  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002807f  00000000  00000000  000200d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006370  00000000  00000000  00048151  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00017d68  00000000  00000000  0004e4c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001610  00000000  00000000  00066230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001e48  00000000  00000000  00067840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cc37  00000000  00000000  00069688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002945d  00000000  00000000  000862bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a631  00000000  00000000  000af71c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00149d4d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e3c  00000000  00000000  00149da0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a8 	.word	0x200000a8
 800012c:	00000000 	.word	0x00000000
 8000130:	080069c8 	.word	0x080069c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000ac 	.word	0x200000ac
 800014c:	080069c8 	.word	0x080069c8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr
	...

08000170 <memchr>:
 8000170:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000174:	2a10      	cmp	r2, #16
 8000176:	db2b      	blt.n	80001d0 <memchr+0x60>
 8000178:	f010 0f07 	tst.w	r0, #7
 800017c:	d008      	beq.n	8000190 <memchr+0x20>
 800017e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000182:	3a01      	subs	r2, #1
 8000184:	428b      	cmp	r3, r1
 8000186:	d02d      	beq.n	80001e4 <memchr+0x74>
 8000188:	f010 0f07 	tst.w	r0, #7
 800018c:	b342      	cbz	r2, 80001e0 <memchr+0x70>
 800018e:	d1f6      	bne.n	800017e <memchr+0xe>
 8000190:	b4f0      	push	{r4, r5, r6, r7}
 8000192:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000196:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800019a:	f022 0407 	bic.w	r4, r2, #7
 800019e:	f07f 0700 	mvns.w	r7, #0
 80001a2:	2300      	movs	r3, #0
 80001a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001a8:	3c08      	subs	r4, #8
 80001aa:	ea85 0501 	eor.w	r5, r5, r1
 80001ae:	ea86 0601 	eor.w	r6, r6, r1
 80001b2:	fa85 f547 	uadd8	r5, r5, r7
 80001b6:	faa3 f587 	sel	r5, r3, r7
 80001ba:	fa86 f647 	uadd8	r6, r6, r7
 80001be:	faa5 f687 	sel	r6, r5, r7
 80001c2:	b98e      	cbnz	r6, 80001e8 <memchr+0x78>
 80001c4:	d1ee      	bne.n	80001a4 <memchr+0x34>
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
 80001c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001cc:	f002 0207 	and.w	r2, r2, #7
 80001d0:	b132      	cbz	r2, 80001e0 <memchr+0x70>
 80001d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001d6:	3a01      	subs	r2, #1
 80001d8:	ea83 0301 	eor.w	r3, r3, r1
 80001dc:	b113      	cbz	r3, 80001e4 <memchr+0x74>
 80001de:	d1f8      	bne.n	80001d2 <memchr+0x62>
 80001e0:	2000      	movs	r0, #0
 80001e2:	4770      	bx	lr
 80001e4:	3801      	subs	r0, #1
 80001e6:	4770      	bx	lr
 80001e8:	2d00      	cmp	r5, #0
 80001ea:	bf06      	itte	eq
 80001ec:	4635      	moveq	r5, r6
 80001ee:	3803      	subeq	r0, #3
 80001f0:	3807      	subne	r0, #7
 80001f2:	f015 0f01 	tst.w	r5, #1
 80001f6:	d107      	bne.n	8000208 <memchr+0x98>
 80001f8:	3001      	adds	r0, #1
 80001fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80001fe:	bf02      	ittt	eq
 8000200:	3001      	addeq	r0, #1
 8000202:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000206:	3001      	addeq	r0, #1
 8000208:	bcf0      	pop	{r4, r5, r6, r7}
 800020a:	3801      	subs	r0, #1
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop

08000210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000210:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000212:	4a0e      	ldr	r2, [pc, #56]	; (800024c <HAL_InitTick+0x3c>)
 8000214:	4b0e      	ldr	r3, [pc, #56]	; (8000250 <HAL_InitTick+0x40>)
{
 8000216:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000218:	7818      	ldrb	r0, [r3, #0]
 800021a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800021e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000222:	6810      	ldr	r0, [r2, #0]
 8000224:	fbb0 f0f3 	udiv	r0, r0, r3
 8000228:	f000 fb0e 	bl	8000848 <HAL_SYSTICK_Config>
 800022c:	4604      	mov	r4, r0
 800022e:	b958      	cbnz	r0, 8000248 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000230:	2d0f      	cmp	r5, #15
 8000232:	d809      	bhi.n	8000248 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000234:	4602      	mov	r2, r0
 8000236:	4629      	mov	r1, r5
 8000238:	f04f 30ff 	mov.w	r0, #4294967295
 800023c:	f000 fac4 	bl	80007c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <HAL_InitTick+0x44>)
 8000242:	4620      	mov	r0, r4
 8000244:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000246:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000248:	2001      	movs	r0, #1
 800024a:	e7fc      	b.n	8000246 <HAL_InitTick+0x36>
 800024c:	2000002c 	.word	0x2000002c
 8000250:	20000000 	.word	0x20000000
 8000254:	20000004 	.word	0x20000004

08000258 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000258:	4a07      	ldr	r2, [pc, #28]	; (8000278 <HAL_Init+0x20>)
{
 800025a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800025c:	6813      	ldr	r3, [r2, #0]
 800025e:	f043 0310 	orr.w	r3, r3, #16
 8000262:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000264:	2003      	movs	r0, #3
 8000266:	f000 fa9d 	bl	80007a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800026a:	2000      	movs	r0, #0
 800026c:	f7ff ffd0 	bl	8000210 <HAL_InitTick>
  HAL_MspInit();
 8000270:	f004 ff26 	bl	80050c0 <HAL_MspInit>
}
 8000274:	2000      	movs	r0, #0
 8000276:	bd08      	pop	{r3, pc}
 8000278:	40022000 	.word	0x40022000

0800027c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800027c:	4a03      	ldr	r2, [pc, #12]	; (800028c <HAL_IncTick+0x10>)
 800027e:	4b04      	ldr	r3, [pc, #16]	; (8000290 <HAL_IncTick+0x14>)
 8000280:	6811      	ldr	r1, [r2, #0]
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	440b      	add	r3, r1
 8000286:	6013      	str	r3, [r2, #0]
}
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	2000018c 	.word	0x2000018c
 8000290:	20000000 	.word	0x20000000

08000294 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000294:	4b01      	ldr	r3, [pc, #4]	; (800029c <HAL_GetTick+0x8>)
 8000296:	6818      	ldr	r0, [r3, #0]
}
 8000298:	4770      	bx	lr
 800029a:	bf00      	nop
 800029c:	2000018c 	.word	0x2000018c

080002a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002a0:	b538      	push	{r3, r4, r5, lr}
 80002a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80002a4:	f7ff fff6 	bl	8000294 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002a8:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80002aa:	bf1c      	itt	ne
 80002ac:	4b05      	ldrne	r3, [pc, #20]	; (80002c4 <HAL_Delay+0x24>)
 80002ae:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80002b0:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 80002b2:	bf18      	it	ne
 80002b4:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80002b6:	f7ff ffed 	bl	8000294 <HAL_GetTick>
 80002ba:	1b43      	subs	r3, r0, r5
 80002bc:	42a3      	cmp	r3, r4
 80002be:	d3fa      	bcc.n	80002b6 <HAL_Delay+0x16>
  {
  }
}
 80002c0:	bd38      	pop	{r3, r4, r5, pc}
 80002c2:	bf00      	nop
 80002c4:	20000000 	.word	0x20000000

080002c8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80002c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80002ca:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80002cc:	2500      	movs	r5, #0
{
 80002ce:	460e      	mov	r6, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80002d0:	9501      	str	r5, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80002d2:	f7ff ffdf 	bl	8000294 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80002d6:	6823      	ldr	r3, [r4, #0]
 80002d8:	689a      	ldr	r2, [r3, #8]
 80002da:	05d2      	lsls	r2, r2, #23
  tickstart = HAL_GetTick();
 80002dc:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80002de:	d508      	bpl.n	80002f2 <HAL_ADC_PollForConversion+0x2a>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80002e2:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80002e6:	f043 0320 	orr.w	r3, r3, #32
 80002ea:	62a3      	str	r3, [r4, #40]	; 0x28
    
    return HAL_ERROR;
 80002ec:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80002ee:	b003      	add	sp, #12
 80002f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80002f2:	685a      	ldr	r2, [r3, #4]
 80002f4:	05d5      	lsls	r5, r2, #23
 80002f6:	d403      	bmi.n	8000300 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80002f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80002fa:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 80002fe:	d040      	beq.n	8000382 <HAL_ADC_PollForConversion+0xba>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000300:	4b41      	ldr	r3, [pc, #260]	; (8000408 <HAL_ADC_PollForConversion+0x140>)
 8000302:	2002      	movs	r0, #2
 8000304:	681d      	ldr	r5, [r3, #0]
 8000306:	f001 f9ef 	bl	80016e8 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800030a:	6822      	ldr	r2, [r4, #0]
 800030c:	4b3f      	ldr	r3, [pc, #252]	; (800040c <HAL_ADC_PollForConversion+0x144>)
 800030e:	6911      	ldr	r1, [r2, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000310:	fbb5 f5f0 	udiv	r5, r5, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000314:	4219      	tst	r1, r3
 8000316:	4b3e      	ldr	r3, [pc, #248]	; (8000410 <HAL_ADC_PollForConversion+0x148>)
 8000318:	d154      	bne.n	80003c4 <HAL_ADC_PollForConversion+0xfc>
 800031a:	68d0      	ldr	r0, [r2, #12]
 800031c:	493d      	ldr	r1, [pc, #244]	; (8000414 <HAL_ADC_PollForConversion+0x14c>)
 800031e:	4208      	tst	r0, r1
 8000320:	d150      	bne.n	80003c4 <HAL_ADC_PollForConversion+0xfc>
 8000322:	6911      	ldr	r1, [r2, #16]
 8000324:	4219      	tst	r1, r3
 8000326:	d15e      	bne.n	80003e6 <HAL_ADC_PollForConversion+0x11e>
 8000328:	68d2      	ldr	r2, [r2, #12]
 800032a:	f103 436e 	add.w	r3, r3, #3992977408	; 0xee000000
 800032e:	421a      	tst	r2, r3
 8000330:	bf14      	ite	ne
 8000332:	2329      	movne	r3, #41	; 0x29
 8000334:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000336:	435d      	muls	r5, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000338:	9b01      	ldr	r3, [sp, #4]
 800033a:	42ab      	cmp	r3, r5
 800033c:	d225      	bcs.n	800038a <HAL_ADC_PollForConversion+0xc2>
      if(Timeout != HAL_MAX_DELAY)
 800033e:	1c72      	adds	r2, r6, #1
 8000340:	d05c      	beq.n	80003fc <HAL_ADC_PollForConversion+0x134>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000342:	2e00      	cmp	r6, #0
 8000344:	d155      	bne.n	80003f2 <HAL_ADC_PollForConversion+0x12a>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8000346:	9b01      	ldr	r3, [sp, #4]
 8000348:	42ab      	cmp	r3, r5
 800034a:	d257      	bcs.n	80003fc <HAL_ADC_PollForConversion+0x134>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800034c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	62a3      	str	r3, [r4, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8000354:	2300      	movs	r3, #0
 8000356:	e00b      	b.n	8000370 <HAL_ADC_PollForConversion+0xa8>
      if(Timeout != HAL_MAX_DELAY)
 8000358:	1c70      	adds	r0, r6, #1
 800035a:	d013      	beq.n	8000384 <HAL_ADC_PollForConversion+0xbc>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800035c:	b966      	cbnz	r6, 8000378 <HAL_ADC_PollForConversion+0xb0>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800035e:	6823      	ldr	r3, [r4, #0]
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	f013 0302 	ands.w	r3, r3, #2
 8000366:	d10c      	bne.n	8000382 <HAL_ADC_PollForConversion+0xba>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000368:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800036a:	f042 0204 	orr.w	r2, r2, #4
 800036e:	62a2      	str	r2, [r4, #40]	; 0x28
            __HAL_UNLOCK(hadc);
 8000370:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
            return HAL_TIMEOUT;
 8000374:	2003      	movs	r0, #3
 8000376:	e7ba      	b.n	80002ee <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000378:	f7ff ff8c 	bl	8000294 <HAL_GetTick>
 800037c:	1bc0      	subs	r0, r0, r7
 800037e:	42b0      	cmp	r0, r6
 8000380:	d8ed      	bhi.n	800035e <HAL_ADC_PollForConversion+0x96>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8000382:	6822      	ldr	r2, [r4, #0]
 8000384:	6813      	ldr	r3, [r2, #0]
 8000386:	0799      	lsls	r1, r3, #30
 8000388:	d5e6      	bpl.n	8000358 <HAL_ADC_PollForConversion+0x90>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800038a:	6822      	ldr	r2, [r4, #0]
 800038c:	f06f 0312 	mvn.w	r3, #18
 8000390:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000392:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000394:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000398:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800039a:	6893      	ldr	r3, [r2, #8]
 800039c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80003a0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80003a4:	d12e      	bne.n	8000404 <HAL_ADC_PollForConversion+0x13c>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80003a6:	7b20      	ldrb	r0, [r4, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80003a8:	2800      	cmp	r0, #0
 80003aa:	d12b      	bne.n	8000404 <HAL_ADC_PollForConversion+0x13c>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80003ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80003b2:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80003b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003b6:	04db      	lsls	r3, r3, #19
 80003b8:	d424      	bmi.n	8000404 <HAL_ADC_PollForConversion+0x13c>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80003ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80003bc:	f043 0301 	orr.w	r3, r3, #1
 80003c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80003c2:	e794      	b.n	80002ee <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80003c4:	6911      	ldr	r1, [r2, #16]
 80003c6:	4219      	tst	r1, r3
 80003c8:	d103      	bne.n	80003d2 <HAL_ADC_PollForConversion+0x10a>
 80003ca:	68d1      	ldr	r1, [r2, #12]
 80003cc:	4b12      	ldr	r3, [pc, #72]	; (8000418 <HAL_ADC_PollForConversion+0x150>)
 80003ce:	4219      	tst	r1, r3
 80003d0:	d00b      	beq.n	80003ea <HAL_ADC_PollForConversion+0x122>
 80003d2:	6911      	ldr	r1, [r2, #16]
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <HAL_ADC_PollForConversion+0x154>)
 80003d6:	4219      	tst	r1, r3
 80003d8:	d109      	bne.n	80003ee <HAL_ADC_PollForConversion+0x126>
 80003da:	68d2      	ldr	r2, [r2, #12]
 80003dc:	421a      	tst	r2, r3
 80003de:	bf14      	ite	ne
 80003e0:	23fc      	movne	r3, #252	; 0xfc
 80003e2:	2354      	moveq	r3, #84	; 0x54
 80003e4:	e7a7      	b.n	8000336 <HAL_ADC_PollForConversion+0x6e>
 80003e6:	2329      	movs	r3, #41	; 0x29
 80003e8:	e7a5      	b.n	8000336 <HAL_ADC_PollForConversion+0x6e>
 80003ea:	2354      	movs	r3, #84	; 0x54
 80003ec:	e7a3      	b.n	8000336 <HAL_ADC_PollForConversion+0x6e>
 80003ee:	23fc      	movs	r3, #252	; 0xfc
 80003f0:	e7a1      	b.n	8000336 <HAL_ADC_PollForConversion+0x6e>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80003f2:	f7ff ff4f 	bl	8000294 <HAL_GetTick>
 80003f6:	1bc0      	subs	r0, r0, r7
 80003f8:	42b0      	cmp	r0, r6
 80003fa:	d8a4      	bhi.n	8000346 <HAL_ADC_PollForConversion+0x7e>
      Conversion_Timeout_CPU_cycles ++;
 80003fc:	9b01      	ldr	r3, [sp, #4]
 80003fe:	3301      	adds	r3, #1
 8000400:	9301      	str	r3, [sp, #4]
 8000402:	e799      	b.n	8000338 <HAL_ADC_PollForConversion+0x70>
  return HAL_OK;
 8000404:	2000      	movs	r0, #0
 8000406:	e772      	b.n	80002ee <HAL_ADC_PollForConversion+0x26>
 8000408:	2000002c 	.word	0x2000002c
 800040c:	24924924 	.word	0x24924924
 8000410:	12492492 	.word	0x12492492
 8000414:	00924924 	.word	0x00924924
 8000418:	00492492 	.word	0x00492492
 800041c:	00249249 	.word	0x00249249

08000420 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000420:	6803      	ldr	r3, [r0, #0]
 8000422:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 8000424:	4770      	bx	lr
	...

08000428 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000428:	b573      	push	{r0, r1, r4, r5, r6, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800042a:	2300      	movs	r3, #0
 800042c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800042e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000432:	2b01      	cmp	r3, #1
{ 
 8000434:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000436:	d06c      	beq.n	8000512 <HAL_ADC_ConfigChannel+0xea>
 8000438:	2301      	movs	r3, #1
 800043a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800043e:	684d      	ldr	r5, [r1, #4]
 8000440:	6802      	ldr	r2, [r0, #0]
 8000442:	6808      	ldr	r0, [r1, #0]
 8000444:	2d06      	cmp	r5, #6
 8000446:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800044a:	d822      	bhi.n	8000492 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800044c:	6b55      	ldr	r5, [r2, #52]	; 0x34
 800044e:	3b05      	subs	r3, #5
 8000450:	261f      	movs	r6, #31
 8000452:	409e      	lsls	r6, r3
 8000454:	ea25 0506 	bic.w	r5, r5, r6
 8000458:	fa00 f303 	lsl.w	r3, r0, r3
 800045c:	432b      	orrs	r3, r5
 800045e:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000460:	2809      	cmp	r0, #9
 8000462:	688b      	ldr	r3, [r1, #8]
 8000464:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8000468:	f04f 0107 	mov.w	r1, #7
 800046c:	d929      	bls.n	80004c2 <HAL_ADC_ConfigChannel+0x9a>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800046e:	68d6      	ldr	r6, [r2, #12]
 8000470:	3d1e      	subs	r5, #30
 8000472:	40a9      	lsls	r1, r5
 8000474:	ea26 0101 	bic.w	r1, r6, r1
 8000478:	40ab      	lsls	r3, r5
 800047a:	430b      	orrs	r3, r1
 800047c:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800047e:	f1a0 0310 	sub.w	r3, r0, #16
 8000482:	2b01      	cmp	r3, #1
 8000484:	d925      	bls.n	80004d2 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000486:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000488:	2300      	movs	r3, #0
 800048a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800048e:	b002      	add	sp, #8
 8000490:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 8000492:	2d0c      	cmp	r5, #12
 8000494:	f04f 051f 	mov.w	r5, #31
 8000498:	d809      	bhi.n	80004ae <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800049a:	6b16      	ldr	r6, [r2, #48]	; 0x30
 800049c:	3b23      	subs	r3, #35	; 0x23
 800049e:	409d      	lsls	r5, r3
 80004a0:	ea26 0505 	bic.w	r5, r6, r5
 80004a4:	fa00 f303 	lsl.w	r3, r0, r3
 80004a8:	432b      	orrs	r3, r5
 80004aa:	6313      	str	r3, [r2, #48]	; 0x30
 80004ac:	e7d8      	b.n	8000460 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80004ae:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80004b0:	3b41      	subs	r3, #65	; 0x41
 80004b2:	409d      	lsls	r5, r3
 80004b4:	ea26 0505 	bic.w	r5, r6, r5
 80004b8:	fa00 f303 	lsl.w	r3, r0, r3
 80004bc:	432b      	orrs	r3, r5
 80004be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80004c0:	e7ce      	b.n	8000460 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80004c2:	6910      	ldr	r0, [r2, #16]
 80004c4:	40a9      	lsls	r1, r5
 80004c6:	ea20 0101 	bic.w	r1, r0, r1
 80004ca:	40ab      	lsls	r3, r5
 80004cc:	430b      	orrs	r3, r1
 80004ce:	6113      	str	r3, [r2, #16]
 80004d0:	e7d9      	b.n	8000486 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80004d2:	4b11      	ldr	r3, [pc, #68]	; (8000518 <HAL_ADC_ConfigChannel+0xf0>)
 80004d4:	429a      	cmp	r2, r3
 80004d6:	d116      	bne.n	8000506 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80004d8:	6893      	ldr	r3, [r2, #8]
 80004da:	021b      	lsls	r3, r3, #8
 80004dc:	d4d3      	bmi.n	8000486 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80004de:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80004e0:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80004e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80004e6:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80004e8:	d1cd      	bne.n	8000486 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80004ea:	4b0c      	ldr	r3, [pc, #48]	; (800051c <HAL_ADC_ConfigChannel+0xf4>)
 80004ec:	4a0c      	ldr	r2, [pc, #48]	; (8000520 <HAL_ADC_ConfigChannel+0xf8>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	fbb3 f2f2 	udiv	r2, r3, r2
 80004f4:	230a      	movs	r3, #10
 80004f6:	4353      	muls	r3, r2
            wait_loop_index--;
 80004f8:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80004fa:	9b01      	ldr	r3, [sp, #4]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d0c2      	beq.n	8000486 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8000500:	9b01      	ldr	r3, [sp, #4]
 8000502:	3b01      	subs	r3, #1
 8000504:	e7f8      	b.n	80004f8 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000506:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000508:	f043 0320 	orr.w	r3, r3, #32
 800050c:	62a3      	str	r3, [r4, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800050e:	2001      	movs	r0, #1
 8000510:	e7ba      	b.n	8000488 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8000512:	2002      	movs	r0, #2
 8000514:	e7bb      	b.n	800048e <HAL_ADC_ConfigChannel+0x66>
 8000516:	bf00      	nop
 8000518:	40012400 	.word	0x40012400
 800051c:	2000002c 	.word	0x2000002c
 8000520:	000f4240 	.word	0x000f4240

08000524 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000524:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000526:	2300      	movs	r3, #0
 8000528:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800052a:	6803      	ldr	r3, [r0, #0]
 800052c:	689a      	ldr	r2, [r3, #8]
 800052e:	07d2      	lsls	r2, r2, #31
{
 8000530:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000532:	d502      	bpl.n	800053a <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000534:	2000      	movs	r0, #0
}
 8000536:	b003      	add	sp, #12
 8000538:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 800053a:	689a      	ldr	r2, [r3, #8]
 800053c:	f042 0201 	orr.w	r2, r2, #1
 8000540:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000542:	4b14      	ldr	r3, [pc, #80]	; (8000594 <ADC_Enable+0x70>)
 8000544:	4a14      	ldr	r2, [pc, #80]	; (8000598 <ADC_Enable+0x74>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 800054c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800054e:	9b01      	ldr	r3, [sp, #4]
 8000550:	b9e3      	cbnz	r3, 800058c <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8000552:	f7ff fe9f 	bl	8000294 <HAL_GetTick>
 8000556:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000558:	6823      	ldr	r3, [r4, #0]
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	07db      	lsls	r3, r3, #31
 800055e:	d4e9      	bmi.n	8000534 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000560:	f7ff fe98 	bl	8000294 <HAL_GetTick>
 8000564:	1b40      	subs	r0, r0, r5
 8000566:	2802      	cmp	r0, #2
 8000568:	d9f6      	bls.n	8000558 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800056a:	6823      	ldr	r3, [r4, #0]
 800056c:	689b      	ldr	r3, [r3, #8]
 800056e:	f013 0301 	ands.w	r3, r3, #1
 8000572:	d1f1      	bne.n	8000558 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000574:	6aa2      	ldr	r2, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 8000576:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800057a:	f042 0210 	orr.w	r2, r2, #16
 800057e:	62a2      	str	r2, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000580:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000582:	f042 0201 	orr.w	r2, r2, #1
 8000586:	62e2      	str	r2, [r4, #44]	; 0x2c
          __HAL_UNLOCK(hadc);
 8000588:	2001      	movs	r0, #1
 800058a:	e7d4      	b.n	8000536 <ADC_Enable+0x12>
      wait_loop_index--;
 800058c:	9b01      	ldr	r3, [sp, #4]
 800058e:	3b01      	subs	r3, #1
 8000590:	e7dc      	b.n	800054c <ADC_Enable+0x28>
 8000592:	bf00      	nop
 8000594:	2000002c 	.word	0x2000002c
 8000598:	000f4240 	.word	0x000f4240

0800059c <HAL_ADC_Start>:
{
 800059c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800059e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80005a2:	2b01      	cmp	r3, #1
{
 80005a4:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80005a6:	d054      	beq.n	8000652 <HAL_ADC_Start+0xb6>
 80005a8:	2301      	movs	r3, #1
 80005aa:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80005ae:	f7ff ffb9 	bl	8000524 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80005b2:	2800      	cmp	r0, #0
 80005b4:	d149      	bne.n	800064a <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 80005b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005b8:	4a27      	ldr	r2, [pc, #156]	; (8000658 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 80005ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80005be:	f023 0301 	bic.w	r3, r3, #1
 80005c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005c6:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80005c8:	6823      	ldr	r3, [r4, #0]
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d104      	bne.n	80005d8 <HAL_ADC_Start+0x3c>
 80005ce:	4923      	ldr	r1, [pc, #140]	; (800065c <HAL_ADC_Start+0xc0>)
 80005d0:	684a      	ldr	r2, [r1, #4]
 80005d2:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80005d6:	d12e      	bne.n	8000636 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80005d8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005da:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80005de:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80005e0:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80005e2:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80005e4:	bf41      	itttt	mi
 80005e6:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80005e8:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80005ec:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80005f0:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80005f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80005f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80005f8:	bf1c      	itt	ne
 80005fa:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80005fc:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8000600:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8000602:	2200      	movs	r2, #0
 8000604:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000608:	f06f 0202 	mvn.w	r2, #2
 800060c:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800060e:	689a      	ldr	r2, [r3, #8]
 8000610:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000614:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000618:	d113      	bne.n	8000642 <HAL_ADC_Start+0xa6>
 800061a:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <HAL_ADC_Start+0xbc>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d105      	bne.n	800062c <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000620:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000624:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000626:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800062a:	d10a      	bne.n	8000642 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800062c:	689a      	ldr	r2, [r3, #8]
 800062e:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000632:	609a      	str	r2, [r3, #8]
}
 8000634:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000636:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000638:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800063c:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800063e:	684a      	ldr	r2, [r1, #4]
 8000640:	e7cf      	b.n	80005e2 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000642:	689a      	ldr	r2, [r3, #8]
 8000644:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000648:	e7f3      	b.n	8000632 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 800064a:	2300      	movs	r3, #0
 800064c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8000650:	e7f0      	b.n	8000634 <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 8000652:	2002      	movs	r0, #2
 8000654:	e7ee      	b.n	8000634 <HAL_ADC_Start+0x98>
 8000656:	bf00      	nop
 8000658:	40012800 	.word	0x40012800
 800065c:	40012400 	.word	0x40012400

08000660 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000660:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000662:	6803      	ldr	r3, [r0, #0]
 8000664:	689a      	ldr	r2, [r3, #8]
 8000666:	07d1      	lsls	r1, r2, #31
{
 8000668:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 800066a:	d401      	bmi.n	8000670 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800066c:	2000      	movs	r0, #0
}
 800066e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8000670:	689a      	ldr	r2, [r3, #8]
 8000672:	f022 0201 	bic.w	r2, r2, #1
 8000676:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000678:	f7ff fe0c 	bl	8000294 <HAL_GetTick>
 800067c:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800067e:	6823      	ldr	r3, [r4, #0]
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	07db      	lsls	r3, r3, #31
 8000684:	d5f2      	bpl.n	800066c <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000686:	f7ff fe05 	bl	8000294 <HAL_GetTick>
 800068a:	1b40      	subs	r0, r0, r5
 800068c:	2802      	cmp	r0, #2
 800068e:	d9f6      	bls.n	800067e <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8000690:	6823      	ldr	r3, [r4, #0]
 8000692:	689b      	ldr	r3, [r3, #8]
 8000694:	07da      	lsls	r2, r3, #31
 8000696:	d5f2      	bpl.n	800067e <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000698:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	62a3      	str	r3, [r4, #40]	; 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80006a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80006a2:	f043 0301 	orr.w	r3, r3, #1
 80006a6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80006a8:	2001      	movs	r0, #1
 80006aa:	e7e0      	b.n	800066e <ADC_ConversionStop_Disable+0xe>

080006ac <HAL_ADC_Init>:
{
 80006ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 80006ae:	4604      	mov	r4, r0
 80006b0:	2800      	cmp	r0, #0
 80006b2:	d06b      	beq.n	800078c <HAL_ADC_Init+0xe0>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80006b4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80006b6:	b923      	cbnz	r3, 80006c2 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80006b8:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80006ba:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80006be:	f004 fd21 	bl	8005104 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80006c2:	4620      	mov	r0, r4
 80006c4:	f7ff ffcc 	bl	8000660 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80006c8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006ca:	f013 0310 	ands.w	r3, r3, #16
 80006ce:	d15f      	bne.n	8000790 <HAL_ADC_Init+0xe4>
 80006d0:	2800      	cmp	r0, #0
 80006d2:	d15d      	bne.n	8000790 <HAL_ADC_Init+0xe4>
    ADC_STATE_CLR_SET(hadc->State,
 80006d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80006d6:	69e5      	ldr	r5, [r4, #28]
 80006d8:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80006da:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80006de:	f022 0202 	bic.w	r2, r2, #2
 80006e2:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80006e6:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006e8:	68a5      	ldr	r5, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80006ea:	62a2      	str	r2, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80006ec:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006ee:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80006f2:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80006f6:	d034      	beq.n	8000762 <HAL_ADC_Init+0xb6>
 80006f8:	2d01      	cmp	r5, #1
 80006fa:	bf14      	ite	ne
 80006fc:	2700      	movne	r7, #0
 80006fe:	f44f 7780 	moveq.w	r7, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000702:	7d26      	ldrb	r6, [r4, #20]
 8000704:	2e01      	cmp	r6, #1
 8000706:	d106      	bne.n	8000716 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000708:	bb6a      	cbnz	r2, 8000766 <HAL_ADC_Init+0xba>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800070a:	69a2      	ldr	r2, [r4, #24]
 800070c:	3a01      	subs	r2, #1
 800070e:	ea47 3642 	orr.w	r6, r7, r2, lsl #13
 8000712:	f446 6700 	orr.w	r7, r6, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8000716:	6822      	ldr	r2, [r4, #0]
 8000718:	6856      	ldr	r6, [r2, #4]
 800071a:	f426 4669 	bic.w	r6, r6, #59648	; 0xe900
 800071e:	433e      	orrs	r6, r7
 8000720:	6056      	str	r6, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8000722:	6897      	ldr	r7, [r2, #8]
 8000724:	4e1d      	ldr	r6, [pc, #116]	; (800079c <HAL_ADC_Init+0xf0>)
 8000726:	403e      	ands	r6, r7
 8000728:	430e      	orrs	r6, r1
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800072a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR2,
 800072e:	6096      	str	r6, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000730:	d001      	beq.n	8000736 <HAL_ADC_Init+0x8a>
 8000732:	2d01      	cmp	r5, #1
 8000734:	d102      	bne.n	800073c <HAL_ADC_Init+0x90>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000736:	6923      	ldr	r3, [r4, #16]
 8000738:	3b01      	subs	r3, #1
 800073a:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800073c:	6ad5      	ldr	r5, [r2, #44]	; 0x2c
 800073e:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 8000742:	432b      	orrs	r3, r5
 8000744:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000746:	6892      	ldr	r2, [r2, #8]
 8000748:	4b15      	ldr	r3, [pc, #84]	; (80007a0 <HAL_ADC_Init+0xf4>)
 800074a:	4013      	ands	r3, r2
 800074c:	4299      	cmp	r1, r3
 800074e:	d113      	bne.n	8000778 <HAL_ADC_Init+0xcc>
      ADC_CLEAR_ERRORCODE(hadc);
 8000750:	2300      	movs	r3, #0
 8000752:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000754:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000756:	f023 0303 	bic.w	r3, r3, #3
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	62a3      	str	r3, [r4, #40]	; 0x28
}
 8000760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000762:	462f      	mov	r7, r5
 8000764:	e7cd      	b.n	8000702 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000766:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000768:	f042 0220 	orr.w	r2, r2, #32
 800076c:	62a2      	str	r2, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800076e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8000770:	f042 0201 	orr.w	r2, r2, #1
 8000774:	62e2      	str	r2, [r4, #44]	; 0x2c
 8000776:	e7ce      	b.n	8000716 <HAL_ADC_Init+0x6a>
      ADC_STATE_CLR_SET(hadc->State,
 8000778:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800077a:	f023 0312 	bic.w	r3, r3, #18
 800077e:	f043 0310 	orr.w	r3, r3, #16
 8000782:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000784:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000786:	f043 0301 	orr.w	r3, r3, #1
 800078a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800078c:	2001      	movs	r0, #1
 800078e:	e7e7      	b.n	8000760 <HAL_ADC_Init+0xb4>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000790:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000792:	f043 0310 	orr.w	r3, r3, #16
 8000796:	62a3      	str	r3, [r4, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 8000798:	e7f8      	b.n	800078c <HAL_ADC_Init+0xe0>
 800079a:	bf00      	nop
 800079c:	ffe1f7fd 	.word	0xffe1f7fd
 80007a0:	ff1f0efe 	.word	0xff1f0efe

080007a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007a4:	4907      	ldr	r1, [pc, #28]	; (80007c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80007a6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007ac:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007ae:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007b4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80007c0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80007c2:	4770      	bx	lr
 80007c4:	e000ed00 	.word	0xe000ed00

080007c8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007ca:	b530      	push	{r4, r5, lr}
 80007cc:	68dc      	ldr	r4, [r3, #12]
 80007ce:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007d6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007d8:	2b04      	cmp	r3, #4
 80007da:	bf28      	it	cs
 80007dc:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007de:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 35ff 	mov.w	r5, #4294967295
 80007e4:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007e8:	bf8c      	ite	hi
 80007ea:	3c03      	subhi	r4, #3
 80007ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007ee:	ea21 0303 	bic.w	r3, r1, r3
 80007f2:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	fa05 f404 	lsl.w	r4, r5, r4
 80007f8:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80007fc:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007fe:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000802:	bfac      	ite	ge
 8000804:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000808:	4a07      	ldrlt	r2, [pc, #28]	; (8000828 <HAL_NVIC_SetPriority+0x60>)
 800080a:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800080e:	bfb8      	it	lt
 8000810:	f000 000f 	andlt.w	r0, r0, #15
 8000814:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000816:	bfaa      	itet	ge
 8000818:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081c:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000822:	bd30      	pop	{r4, r5, pc}
 8000824:	e000ed00 	.word	0xe000ed00
 8000828:	e000ed14 	.word	0xe000ed14

0800082c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800082c:	2800      	cmp	r0, #0
 800082e:	db08      	blt.n	8000842 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000830:	0942      	lsrs	r2, r0, #5
 8000832:	2301      	movs	r3, #1
 8000834:	f000 001f 	and.w	r0, r0, #31
 8000838:	fa03 f000 	lsl.w	r0, r3, r0
 800083c:	4b01      	ldr	r3, [pc, #4]	; (8000844 <HAL_NVIC_EnableIRQ+0x18>)
 800083e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000842:	4770      	bx	lr
 8000844:	e000e100 	.word	0xe000e100

08000848 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000848:	3801      	subs	r0, #1
 800084a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800084e:	d20a      	bcs.n	8000866 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000852:	4a07      	ldr	r2, [pc, #28]	; (8000870 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000854:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000856:	21f0      	movs	r1, #240	; 0xf0
 8000858:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800085c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800085e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000860:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000862:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000864:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000866:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	e000e010 	.word	0xe000e010
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <HAL_DMA_Abort>:
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000874:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8000878:	2b02      	cmp	r3, #2
 800087a:	d006      	beq.n	800088a <HAL_DMA_Abort+0x16>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800087c:	2304      	movs	r3, #4
 800087e:	6383      	str	r3, [r0, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000880:	2300      	movs	r3, #0
 8000882:	f880 3020 	strb.w	r3, [r0, #32]
    
    return HAL_ERROR;
 8000886:	2001      	movs	r0, #1
 8000888:	4770      	bx	lr
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800088a:	6803      	ldr	r3, [r0, #0]
 800088c:	681a      	ldr	r2, [r3, #0]
 800088e:	f022 020e 	bic.w	r2, r2, #14
 8000892:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	f022 0201 	bic.w	r2, r2, #1
 800089a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800089c:	e9d0 210f 	ldrd	r2, r1, [r0, #60]	; 0x3c
 80008a0:	2301      	movs	r3, #1
 80008a2:	408b      	lsls	r3, r1
 80008a4:	6053      	str	r3, [r2, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80008a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80008aa:	8403      	strh	r3, [r0, #32]
  
  return status; 
 80008ac:	2000      	movs	r0, #0
}
 80008ae:	4770      	bx	lr

080008b0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80008b0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80008b2:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 80008b6:	2b02      	cmp	r3, #2
 80008b8:	d003      	beq.n	80008c2 <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80008ba:	2304      	movs	r3, #4
 80008bc:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80008be:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80008c0:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80008c2:	6803      	ldr	r3, [r0, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	f022 020e 	bic.w	r2, r2, #14
 80008ca:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 80008cc:	681a      	ldr	r2, [r3, #0]
 80008ce:	f022 0201 	bic.w	r2, r2, #1
 80008d2:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80008d4:	4a17      	ldr	r2, [pc, #92]	; (8000934 <HAL_DMA_Abort_IT+0x84>)
 80008d6:	4293      	cmp	r3, r2
 80008d8:	d01c      	beq.n	8000914 <HAL_DMA_Abort_IT+0x64>
 80008da:	3214      	adds	r2, #20
 80008dc:	4293      	cmp	r3, r2
 80008de:	d01b      	beq.n	8000918 <HAL_DMA_Abort_IT+0x68>
 80008e0:	3214      	adds	r2, #20
 80008e2:	4293      	cmp	r3, r2
 80008e4:	d01a      	beq.n	800091c <HAL_DMA_Abort_IT+0x6c>
 80008e6:	3214      	adds	r2, #20
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d01a      	beq.n	8000922 <HAL_DMA_Abort_IT+0x72>
 80008ec:	3214      	adds	r2, #20
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d01a      	beq.n	8000928 <HAL_DMA_Abort_IT+0x78>
 80008f2:	3214      	adds	r2, #20
 80008f4:	4293      	cmp	r3, r2
 80008f6:	bf0c      	ite	eq
 80008f8:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 80008fc:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8000900:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <HAL_DMA_Abort_IT+0x88>)
 8000902:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8000904:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000908:	8403      	strh	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800090a:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800090c:	b17b      	cbz	r3, 800092e <HAL_DMA_Abort_IT+0x7e>
      hdma->XferAbortCallback(hdma);
 800090e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000910:	2000      	movs	r0, #0
 8000912:	e7d5      	b.n	80008c0 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000914:	2301      	movs	r3, #1
 8000916:	e7f3      	b.n	8000900 <HAL_DMA_Abort_IT+0x50>
 8000918:	2310      	movs	r3, #16
 800091a:	e7f1      	b.n	8000900 <HAL_DMA_Abort_IT+0x50>
 800091c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000920:	e7ee      	b.n	8000900 <HAL_DMA_Abort_IT+0x50>
 8000922:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000926:	e7eb      	b.n	8000900 <HAL_DMA_Abort_IT+0x50>
 8000928:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800092c:	e7e8      	b.n	8000900 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800092e:	4618      	mov	r0, r3
 8000930:	e7c6      	b.n	80008c0 <HAL_DMA_Abort_IT+0x10>
 8000932:	bf00      	nop
 8000934:	40020008 	.word	0x40020008
 8000938:	40020000 	.word	0x40020000

0800093c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800093c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000940:	4b63      	ldr	r3, [pc, #396]	; (8000ad0 <HAL_GPIO_Init+0x194>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000942:	f8df c19c 	ldr.w	ip, [pc, #412]	; 8000ae0 <HAL_GPIO_Init+0x1a4>
 8000946:	f8df e19c 	ldr.w	lr, [pc, #412]	; 8000ae4 <HAL_GPIO_Init+0x1a8>
  uint32_t config = 0x00u;
 800094a:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800094c:	4616      	mov	r6, r2
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800094e:	680d      	ldr	r5, [r1, #0]
 8000950:	fa35 f406 	lsrs.w	r4, r5, r6
 8000954:	d102      	bne.n	800095c <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8000956:	b003      	add	sp, #12
 8000958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800095c:	f04f 0801 	mov.w	r8, #1
 8000960:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000964:	ea05 0408 	and.w	r4, r5, r8
    if (iocurrent == ioposition)
 8000968:	ea38 0505 	bics.w	r5, r8, r5
 800096c:	d17b      	bne.n	8000a66 <HAL_GPIO_Init+0x12a>
      switch (GPIO_Init->Mode)
 800096e:	684d      	ldr	r5, [r1, #4]
 8000970:	2d03      	cmp	r5, #3
 8000972:	d807      	bhi.n	8000984 <HAL_GPIO_Init+0x48>
 8000974:	3d01      	subs	r5, #1
 8000976:	2d02      	cmp	r5, #2
 8000978:	f200 8087 	bhi.w	8000a8a <HAL_GPIO_Init+0x14e>
 800097c:	e8df f005 	tbb	[pc, r5]
 8000980:	9893      	.short	0x9893
 8000982:	9e          	.byte	0x9e
 8000983:	00          	.byte	0x00
 8000984:	2d12      	cmp	r5, #18
 8000986:	f000 8096 	beq.w	8000ab6 <HAL_GPIO_Init+0x17a>
 800098a:	d86e      	bhi.n	8000a6a <HAL_GPIO_Init+0x12e>
 800098c:	2d11      	cmp	r5, #17
 800098e:	f000 808c 	beq.w	8000aaa <HAL_GPIO_Init+0x16e>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000992:	2cff      	cmp	r4, #255	; 0xff
 8000994:	bf94      	ite	ls
 8000996:	4682      	movls	sl, r0
 8000998:	f100 0a04 	addhi.w	sl, r0, #4
 800099c:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009a0:	f8da 8000 	ldr.w	r8, [sl]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009a4:	bf88      	it	hi
 80009a6:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009a8:	f04f 090f 	mov.w	r9, #15
 80009ac:	fa09 fb05 	lsl.w	fp, r9, r5
 80009b0:	ea28 080b 	bic.w	r8, r8, fp
 80009b4:	fa02 f505 	lsl.w	r5, r2, r5
 80009b8:	ea48 0505 	orr.w	r5, r8, r5
 80009bc:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009c0:	f8d1 a004 	ldr.w	sl, [r1, #4]
 80009c4:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 80009c8:	d04d      	beq.n	8000a66 <HAL_GPIO_Init+0x12a>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009ca:	4f42      	ldr	r7, [pc, #264]	; (8000ad4 <HAL_GPIO_Init+0x198>)
 80009cc:	69bd      	ldr	r5, [r7, #24]
 80009ce:	f045 0501 	orr.w	r5, r5, #1
 80009d2:	61bd      	str	r5, [r7, #24]
 80009d4:	69bd      	ldr	r5, [r7, #24]
 80009d6:	f026 0803 	bic.w	r8, r6, #3
 80009da:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 80009de:	f005 0501 	and.w	r5, r5, #1
 80009e2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 80009e6:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009e8:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009ec:	9d01      	ldr	r5, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80009ee:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009f2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80009f6:	fa09 f90b 	lsl.w	r9, r9, fp
 80009fa:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80009fe:	4d36      	ldr	r5, [pc, #216]	; (8000ad8 <HAL_GPIO_Init+0x19c>)
 8000a00:	42a8      	cmp	r0, r5
 8000a02:	d05f      	beq.n	8000ac4 <HAL_GPIO_Init+0x188>
 8000a04:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a08:	42a8      	cmp	r0, r5
 8000a0a:	d05d      	beq.n	8000ac8 <HAL_GPIO_Init+0x18c>
 8000a0c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a10:	42a8      	cmp	r0, r5
 8000a12:	d05b      	beq.n	8000acc <HAL_GPIO_Init+0x190>
 8000a14:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000a18:	42a8      	cmp	r0, r5
 8000a1a:	bf0c      	ite	eq
 8000a1c:	2503      	moveq	r5, #3
 8000a1e:	2504      	movne	r5, #4
 8000a20:	fa05 f50b 	lsl.w	r5, r5, fp
 8000a24:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8000a28:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8000a2c:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a2e:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000a32:	bf14      	ite	ne
 8000a34:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a36:	43a5      	biceq	r5, r4
 8000a38:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8000a3a:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a3c:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8000a40:	bf14      	ite	ne
 8000a42:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000a44:	43a5      	biceq	r5, r4
 8000a46:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a48:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a4a:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8000a4e:	bf14      	ite	ne
 8000a50:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000a52:	43a5      	biceq	r5, r4
 8000a54:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a56:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a58:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8000a5c:	bf14      	ite	ne
 8000a5e:	432c      	orrne	r4, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000a60:	ea25 0404 	biceq.w	r4, r5, r4
 8000a64:	60dc      	str	r4, [r3, #12]
	position++;
 8000a66:	3601      	adds	r6, #1
 8000a68:	e771      	b.n	800094e <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8000a6a:	4f1c      	ldr	r7, [pc, #112]	; (8000adc <HAL_GPIO_Init+0x1a0>)
 8000a6c:	42bd      	cmp	r5, r7
 8000a6e:	d00c      	beq.n	8000a8a <HAL_GPIO_Init+0x14e>
 8000a70:	d815      	bhi.n	8000a9e <HAL_GPIO_Init+0x162>
 8000a72:	f8df 9074 	ldr.w	r9, [pc, #116]	; 8000ae8 <HAL_GPIO_Init+0x1ac>
 8000a76:	454d      	cmp	r5, r9
 8000a78:	d007      	beq.n	8000a8a <HAL_GPIO_Init+0x14e>
 8000a7a:	f509 2970 	add.w	r9, r9, #983040	; 0xf0000
 8000a7e:	454d      	cmp	r5, r9
 8000a80:	d003      	beq.n	8000a8a <HAL_GPIO_Init+0x14e>
 8000a82:	f5a9 1980 	sub.w	r9, r9, #1048576	; 0x100000
 8000a86:	454d      	cmp	r5, r9
 8000a88:	d183      	bne.n	8000992 <HAL_GPIO_Init+0x56>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a8a:	688a      	ldr	r2, [r1, #8]
 8000a8c:	b1c2      	cbz	r2, 8000ac0 <HAL_GPIO_Init+0x184>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a8e:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000a90:	bf0c      	ite	eq
 8000a92:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000a96:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a9a:	2208      	movs	r2, #8
 8000a9c:	e779      	b.n	8000992 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8000a9e:	4565      	cmp	r5, ip
 8000aa0:	d0f3      	beq.n	8000a8a <HAL_GPIO_Init+0x14e>
 8000aa2:	4575      	cmp	r5, lr
 8000aa4:	e7f0      	b.n	8000a88 <HAL_GPIO_Init+0x14c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000aa6:	68ca      	ldr	r2, [r1, #12]
          break;
 8000aa8:	e773      	b.n	8000992 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000aaa:	68ca      	ldr	r2, [r1, #12]
 8000aac:	3204      	adds	r2, #4
          break;
 8000aae:	e770      	b.n	8000992 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000ab0:	68ca      	ldr	r2, [r1, #12]
 8000ab2:	3208      	adds	r2, #8
          break;
 8000ab4:	e76d      	b.n	8000992 <HAL_GPIO_Init+0x56>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000ab6:	68ca      	ldr	r2, [r1, #12]
 8000ab8:	320c      	adds	r2, #12
          break;
 8000aba:	e76a      	b.n	8000992 <HAL_GPIO_Init+0x56>
      switch (GPIO_Init->Mode)
 8000abc:	2200      	movs	r2, #0
 8000abe:	e768      	b.n	8000992 <HAL_GPIO_Init+0x56>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ac0:	2204      	movs	r2, #4
 8000ac2:	e766      	b.n	8000992 <HAL_GPIO_Init+0x56>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ac4:	2500      	movs	r5, #0
 8000ac6:	e7ab      	b.n	8000a20 <HAL_GPIO_Init+0xe4>
 8000ac8:	2501      	movs	r5, #1
 8000aca:	e7a9      	b.n	8000a20 <HAL_GPIO_Init+0xe4>
 8000acc:	2502      	movs	r5, #2
 8000ace:	e7a7      	b.n	8000a20 <HAL_GPIO_Init+0xe4>
 8000ad0:	40010400 	.word	0x40010400
 8000ad4:	40021000 	.word	0x40021000
 8000ad8:	40010800 	.word	0x40010800
 8000adc:	10220000 	.word	0x10220000
 8000ae0:	10310000 	.word	0x10310000
 8000ae4:	10320000 	.word	0x10320000
 8000ae8:	10120000 	.word	0x10120000

08000aec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000aec:	b10a      	cbz	r2, 8000af2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000aee:	6101      	str	r1, [r0, #16]
  }
}
 8000af0:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000af2:	0409      	lsls	r1, r1, #16
 8000af4:	e7fb      	b.n	8000aee <HAL_GPIO_WritePin+0x2>

08000af6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8000af6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000afa:	4604      	mov	r4, r0
 8000afc:	460f      	mov	r7, r1
 8000afe:	4616      	mov	r6, r2
 8000b00:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8000b02:	6825      	ldr	r5, [r4, #0]
 8000b04:	6968      	ldr	r0, [r5, #20]
 8000b06:	ea27 0000 	bic.w	r0, r7, r0
 8000b0a:	b280      	uxth	r0, r0
 8000b0c:	b1b8      	cbz	r0, 8000b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000b0e:	696b      	ldr	r3, [r5, #20]
 8000b10:	055a      	lsls	r2, r3, #21
 8000b12:	d516      	bpl.n	8000b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000b14:	682b      	ldr	r3, [r5, #0]
 8000b16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b1a:	602b      	str	r3, [r5, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000b1c:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8000b20:	616b      	str	r3, [r5, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
      hi2c->State               = HAL_I2C_STATE_READY;
 8000b22:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000b24:	2300      	movs	r3, #0
 8000b26:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000b28:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b2c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8000b30:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000b32:	f042 0204 	orr.w	r2, r2, #4
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
        hi2c->State               = HAL_I2C_STATE_READY;
        hi2c->Mode                = HAL_I2C_MODE_NONE;
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b36:	6422      	str	r2, [r4, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000b38:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c

        return HAL_ERROR;
 8000b3c:	2001      	movs	r0, #1
      }
    }
  }
  return HAL_OK;
}
 8000b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8000b42:	1c73      	adds	r3, r6, #1
 8000b44:	d0de      	beq.n	8000b04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000b46:	f7ff fba5 	bl	8000294 <HAL_GetTick>
 8000b4a:	eba0 0008 	sub.w	r0, r0, r8
 8000b4e:	42b0      	cmp	r0, r6
 8000b50:	d801      	bhi.n	8000b56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8000b52:	2e00      	cmp	r6, #0
 8000b54:	d1d5      	bne.n	8000b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000b56:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8000b58:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8000b5a:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8000b5c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b60:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8000b64:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000b66:	f042 0220 	orr.w	r2, r2, #32
 8000b6a:	e7e4      	b.n	8000b36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08000b6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000b6c:	b570      	push	{r4, r5, r6, lr}
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	4616      	mov	r6, r2

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8000b74:	6821      	ldr	r1, [r4, #0]
 8000b76:	694b      	ldr	r3, [r1, #20]
 8000b78:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8000b7c:	d001      	beq.n	8000b82 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }
  }
  return HAL_OK;
 8000b7e:	2000      	movs	r0, #0
 8000b80:	e010      	b.n	8000ba4 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8000b82:	694a      	ldr	r2, [r1, #20]
 8000b84:	06d2      	lsls	r2, r2, #27
 8000b86:	d50e      	bpl.n	8000ba6 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000b88:	f06f 0210 	mvn.w	r2, #16
 8000b8c:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8000b8e:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8000b90:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8000b92:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8000b96:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8000b9a:	6c22      	ldr	r2, [r4, #64]	; 0x40
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000b9c:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000b9e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8000ba2:	2001      	movs	r0, #1
}
 8000ba4:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000ba6:	f7ff fb75 	bl	8000294 <HAL_GetTick>
 8000baa:	1b80      	subs	r0, r0, r6
 8000bac:	42a8      	cmp	r0, r5
 8000bae:	d801      	bhi.n	8000bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d1df      	bne.n	8000b74 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000bb4:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8000bb6:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000bb8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000bba:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000bbe:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000bc2:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000bc4:	f042 0220 	orr.w	r2, r2, #32
 8000bc8:	e7e8      	b.n	8000b9c <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08000bca <I2C_WaitOnFlagUntilTimeout>:
{
 8000bca:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8000bce:	4606      	mov	r6, r0
 8000bd0:	460f      	mov	r7, r1
 8000bd2:	4691      	mov	r9, r2
 8000bd4:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000bd6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8000bda:	6833      	ldr	r3, [r6, #0]
 8000bdc:	f1ba 0f01 	cmp.w	sl, #1
 8000be0:	bf0c      	ite	eq
 8000be2:	695c      	ldreq	r4, [r3, #20]
 8000be4:	699c      	ldrne	r4, [r3, #24]
 8000be6:	ea27 0404 	bic.w	r4, r7, r4
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fab4 f484 	clz	r4, r4
 8000bf0:	0964      	lsrs	r4, r4, #5
 8000bf2:	45a1      	cmp	r9, r4
 8000bf4:	d001      	beq.n	8000bfa <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	e017      	b.n	8000c2a <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8000bfa:	1c6a      	adds	r2, r5, #1
 8000bfc:	d0ee      	beq.n	8000bdc <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8000bfe:	f7ff fb49 	bl	8000294 <HAL_GetTick>
 8000c02:	9b08      	ldr	r3, [sp, #32]
 8000c04:	1ac0      	subs	r0, r0, r3
 8000c06:	42a8      	cmp	r0, r5
 8000c08:	d801      	bhi.n	8000c0e <I2C_WaitOnFlagUntilTimeout+0x44>
 8000c0a:	2d00      	cmp	r5, #0
 8000c0c:	d1e5      	bne.n	8000bda <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000c0e:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8000c10:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8000c12:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8000c14:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8000c18:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000c1c:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000c1e:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8000c22:	f042 0220 	orr.w	r2, r2, #32
 8000c26:	6432      	str	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8000c28:	2001      	movs	r0, #1
}
 8000c2a:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}
	...

08000c30 <HAL_I2C_Init>:
{
 8000c30:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8000c32:	4604      	mov	r4, r0
 8000c34:	b908      	cbnz	r0, 8000c3a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8000c36:	2001      	movs	r0, #1
}
 8000c38:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000c3a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000c3e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c42:	b91b      	cbnz	r3, 8000c4c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8000c44:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8000c48:	f004 fa8a 	bl	8005160 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000c4c:	2324      	movs	r3, #36	; 0x24
 8000c4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8000c52:	6823      	ldr	r3, [r4, #0]
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	f022 0201 	bic.w	r2, r2, #1
 8000c5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8000c5c:	681a      	ldr	r2, [r3, #0]
 8000c5e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000c62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c6a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8000c6c:	f000 fca4 	bl	80015b8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8000c70:	4a3f      	ldr	r2, [pc, #252]	; (8000d70 <HAL_I2C_Init+0x140>)
 8000c72:	6863      	ldr	r3, [r4, #4]
 8000c74:	4293      	cmp	r3, r2
 8000c76:	bf94      	ite	ls
 8000c78:	4a3e      	ldrls	r2, [pc, #248]	; (8000d74 <HAL_I2C_Init+0x144>)
 8000c7a:	4a3f      	ldrhi	r2, [pc, #252]	; (8000d78 <HAL_I2C_Init+0x148>)
 8000c7c:	4290      	cmp	r0, r2
 8000c7e:	bf8c      	ite	hi
 8000c80:	2200      	movhi	r2, #0
 8000c82:	2201      	movls	r2, #1
 8000c84:	2a00      	cmp	r2, #0
 8000c86:	d1d6      	bne.n	8000c36 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c88:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8000c8a:	4e3c      	ldr	r6, [pc, #240]	; (8000d7c <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c8c:	6851      	ldr	r1, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8000c8e:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8000c92:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8000c96:	4331      	orrs	r1, r6
 8000c98:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8000c9a:	4935      	ldr	r1, [pc, #212]	; (8000d70 <HAL_I2C_Init+0x140>)
 8000c9c:	6a15      	ldr	r5, [r2, #32]
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	bf84      	itt	hi
 8000ca2:	f44f 7196 	movhi.w	r1, #300	; 0x12c
 8000ca6:	4371      	mulhi	r1, r6
 8000ca8:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8000cac:	bf91      	iteee	ls
 8000cae:	1c71      	addls	r1, r6, #1
 8000cb0:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8000cb4:	fbb1 f1f6 	udivhi	r1, r1, r6
 8000cb8:	3101      	addhi	r1, #1
 8000cba:	4329      	orrs	r1, r5
 8000cbc:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000cbe:	69d1      	ldr	r1, [r2, #28]
 8000cc0:	4d2b      	ldr	r5, [pc, #172]	; (8000d70 <HAL_I2C_Init+0x140>)
 8000cc2:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 8000cc6:	42ab      	cmp	r3, r5
 8000cc8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000ccc:	f100 30ff 	add.w	r0, r0, #4294967295
 8000cd0:	d832      	bhi.n	8000d38 <HAL_I2C_Init+0x108>
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000cd8:	1c43      	adds	r3, r0, #1
 8000cda:	f640 70fc 	movw	r0, #4092	; 0xffc
 8000cde:	4203      	tst	r3, r0
 8000ce0:	d042      	beq.n	8000d68 <HAL_I2C_Init+0x138>
 8000ce2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ce6:	430b      	orrs	r3, r1
 8000ce8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8000cea:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8000cee:	6811      	ldr	r1, [r2, #0]
 8000cf0:	4303      	orrs	r3, r0
 8000cf2:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8000cf6:	430b      	orrs	r3, r1
 8000cf8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8000cfa:	6891      	ldr	r1, [r2, #8]
 8000cfc:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8000d00:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8000d04:	4303      	orrs	r3, r0
 8000d06:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000d0a:	430b      	orrs	r3, r1
 8000d0c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8000d0e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8000d12:	68d1      	ldr	r1, [r2, #12]
 8000d14:	4303      	orrs	r3, r0
 8000d16:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8000d1a:	430b      	orrs	r3, r1
 8000d1c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8000d1e:	6813      	ldr	r3, [r2, #0]
 8000d20:	f043 0301 	orr.w	r3, r3, #1
 8000d24:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d26:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000d28:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d2a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8000d2c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8000d30:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d32:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8000d36:	e77f      	b.n	8000c38 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8000d38:	68a5      	ldr	r5, [r4, #8]
 8000d3a:	b955      	cbnz	r5, 8000d52 <HAL_I2C_Init+0x122>
 8000d3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8000d40:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d44:	3301      	adds	r3, #1
 8000d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d4a:	b17b      	cbz	r3, 8000d6c <HAL_I2C_Init+0x13c>
 8000d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d50:	e7c9      	b.n	8000ce6 <HAL_I2C_Init+0xb6>
 8000d52:	2519      	movs	r5, #25
 8000d54:	436b      	muls	r3, r5
 8000d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d60:	b123      	cbz	r3, 8000d6c <HAL_I2C_Init+0x13c>
 8000d62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d66:	e7be      	b.n	8000ce6 <HAL_I2C_Init+0xb6>
 8000d68:	2304      	movs	r3, #4
 8000d6a:	e7bc      	b.n	8000ce6 <HAL_I2C_Init+0xb6>
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	e7ba      	b.n	8000ce6 <HAL_I2C_Init+0xb6>
 8000d70:	000186a0 	.word	0x000186a0
 8000d74:	001e847f 	.word	0x001e847f
 8000d78:	003d08ff 	.word	0x003d08ff
 8000d7c:	000f4240 	.word	0x000f4240

08000d80 <HAL_I2C_Master_Receive>:
{
 8000d80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000d84:	4604      	mov	r4, r0
 8000d86:	b089      	sub	sp, #36	; 0x24
 8000d88:	4698      	mov	r8, r3
  __IO uint32_t count = 0U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	9302      	str	r3, [sp, #8]
{
 8000d8e:	9f10      	ldr	r7, [sp, #64]	; 0x40
 8000d90:	460d      	mov	r5, r1
 8000d92:	4691      	mov	r9, r2
  uint32_t tickstart = HAL_GetTick();
 8000d94:	f7ff fa7e 	bl	8000294 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d98:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8000d9c:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8000d9e:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000da0:	d004      	beq.n	8000dac <HAL_I2C_Master_Receive+0x2c>
    return HAL_BUSY;
 8000da2:	2502      	movs	r5, #2
}
 8000da4:	4628      	mov	r0, r5
 8000da6:	b009      	add	sp, #36	; 0x24
 8000da8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8000dac:	9000      	str	r0, [sp, #0]
 8000dae:	4991      	ldr	r1, [pc, #580]	; (8000ff4 <HAL_I2C_Master_Receive+0x274>)
 8000db0:	2319      	movs	r3, #25
 8000db2:	2201      	movs	r2, #1
 8000db4:	4620      	mov	r0, r4
 8000db6:	f7ff ff08 	bl	8000bca <I2C_WaitOnFlagUntilTimeout>
 8000dba:	2800      	cmp	r0, #0
 8000dbc:	d1f1      	bne.n	8000da2 <HAL_I2C_Master_Receive+0x22>
    __HAL_LOCK(hi2c);
 8000dbe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d0ed      	beq.n	8000da2 <HAL_I2C_Master_Receive+0x22>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000dc6:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8000dc8:	2301      	movs	r3, #1
 8000dca:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8000dce:	680b      	ldr	r3, [r1, #0]
 8000dd0:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8000dd2:	bf5e      	ittt	pl
 8000dd4:	680b      	ldrpl	r3, [r1, #0]
 8000dd6:	f043 0301 	orrpl.w	r3, r3, #1
 8000dda:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000ddc:	680b      	ldr	r3, [r1, #0]
 8000dde:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000de2:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8000de4:	2322      	movs	r3, #34	; 0x22
 8000de6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8000dea:	2310      	movs	r3, #16
 8000dec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8000df0:	2300      	movs	r3, #0
 8000df2:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8000df4:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8000df8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000dfa:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8000dfc:	4b7e      	ldr	r3, [pc, #504]	; (8000ff8 <HAL_I2C_Master_Receive+0x278>)
 8000dfe:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8000e00:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000e02:	680a      	ldr	r2, [r1, #0]
    hi2c->pBuffPtr    = pData;
 8000e04:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000e08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000e0c:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000e0e:	600a      	str	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8000e10:	d004      	beq.n	8000e1c <HAL_I2C_Master_Receive+0x9c>
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d002      	beq.n	8000e1c <HAL_I2C_Master_Receive+0x9c>
 8000e16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000e1a:	d104      	bne.n	8000e26 <HAL_I2C_Master_Receive+0xa6>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000e1c:	680b      	ldr	r3, [r1, #0]
 8000e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e22:	600b      	str	r3, [r1, #0]
 8000e24:	e002      	b.n	8000e2c <HAL_I2C_Master_Receive+0xac>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8000e26:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000e28:	2b11      	cmp	r3, #17
 8000e2a:	d0f7      	beq.n	8000e1c <HAL_I2C_Master_Receive+0x9c>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	9600      	str	r6, [sp, #0]
 8000e30:	2200      	movs	r2, #0
 8000e32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000e36:	4620      	mov	r0, r4
 8000e38:	f7ff fec7 	bl	8000bca <I2C_WaitOnFlagUntilTimeout>
 8000e3c:	6823      	ldr	r3, [r4, #0]
 8000e3e:	b138      	cbz	r0, 8000e50 <HAL_I2C_Master_Receive+0xd0>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000e40:	681b      	ldr	r3, [r3, #0]
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000e42:	05dd      	lsls	r5, r3, #23
 8000e44:	d502      	bpl.n	8000e4c <HAL_I2C_Master_Receive+0xcc>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8000e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4a:	6423      	str	r3, [r4, #64]	; 0x40
              return HAL_ERROR;
 8000e4c:	2501      	movs	r5, #1
 8000e4e:	e7a9      	b.n	8000da4 <HAL_I2C_Master_Receive+0x24>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000e50:	6922      	ldr	r2, [r4, #16]
 8000e52:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8000e56:	d129      	bne.n	8000eac <HAL_I2C_Master_Receive+0x12c>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8000e58:	f045 0501 	orr.w	r5, r5, #1
 8000e5c:	b2ed      	uxtb	r5, r5
 8000e5e:	611d      	str	r5, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000e60:	4966      	ldr	r1, [pc, #408]	; (8000ffc <HAL_I2C_Master_Receive+0x27c>)
 8000e62:	4633      	mov	r3, r6
 8000e64:	463a      	mov	r2, r7
 8000e66:	4620      	mov	r0, r4
 8000e68:	f7ff fe45 	bl	8000af6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000e6c:	4605      	mov	r5, r0
 8000e6e:	2800      	cmp	r0, #0
 8000e70:	d1ec      	bne.n	8000e4c <HAL_I2C_Master_Receive+0xcc>
    if (hi2c->XferSize == 0U)
 8000e72:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8000e74:	6823      	ldr	r3, [r4, #0]
 8000e76:	2a00      	cmp	r2, #0
 8000e78:	d14d      	bne.n	8000f16 <HAL_I2C_Master_Receive+0x196>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000e7a:	9003      	str	r0, [sp, #12]
 8000e7c:	695a      	ldr	r2, [r3, #20]
 8000e7e:	9203      	str	r2, [sp, #12]
 8000e80:	699a      	ldr	r2, [r3, #24]
 8000e82:	9203      	str	r2, [sp, #12]
 8000e84:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e8c:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000e8e:	f8df 8174 	ldr.w	r8, [pc, #372]	; 8001004 <HAL_I2C_Master_Receive+0x284>
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8000e92:	f8df 9174 	ldr.w	r9, [pc, #372]	; 8001008 <HAL_I2C_Master_Receive+0x288>
    while (hi2c->XferSize > 0U)
 8000e96:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d16c      	bne.n	8000f76 <HAL_I2C_Master_Receive+0x1f6>
    hi2c->State = HAL_I2C_STATE_READY;
 8000e9c:	2220      	movs	r2, #32
 8000e9e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8000ea2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000ea6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8000eaa:	e77b      	b.n	8000da4 <HAL_I2C_Master_Receive+0x24>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8000eac:	ea4f 18e5 	mov.w	r8, r5, asr #7
 8000eb0:	f008 0806 	and.w	r8, r8, #6
 8000eb4:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8000eb8:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8000eba:	4951      	ldr	r1, [pc, #324]	; (8001000 <HAL_I2C_Master_Receive+0x280>)
 8000ebc:	4633      	mov	r3, r6
 8000ebe:	463a      	mov	r2, r7
 8000ec0:	4620      	mov	r0, r4
 8000ec2:	f7ff fe18 	bl	8000af6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000ec6:	2800      	cmp	r0, #0
 8000ec8:	d1c0      	bne.n	8000e4c <HAL_I2C_Master_Receive+0xcc>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000eca:	6823      	ldr	r3, [r4, #0]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000ecc:	494b      	ldr	r1, [pc, #300]	; (8000ffc <HAL_I2C_Master_Receive+0x27c>)
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8000ece:	b2ed      	uxtb	r5, r5
 8000ed0:	611d      	str	r5, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8000ed2:	463a      	mov	r2, r7
 8000ed4:	4633      	mov	r3, r6
 8000ed6:	4620      	mov	r0, r4
 8000ed8:	f7ff fe0d 	bl	8000af6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8000edc:	4602      	mov	r2, r0
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	d1b4      	bne.n	8000e4c <HAL_I2C_Master_Receive+0xcc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000ee2:	6823      	ldr	r3, [r4, #0]
 8000ee4:	9007      	str	r0, [sp, #28]
 8000ee6:	6959      	ldr	r1, [r3, #20]
 8000ee8:	9107      	str	r1, [sp, #28]
 8000eea:	6999      	ldr	r1, [r3, #24]
 8000eec:	9107      	str	r1, [sp, #28]
 8000eee:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8000ef0:	6819      	ldr	r1, [r3, #0]
 8000ef2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8000ef6:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8000ef8:	4620      	mov	r0, r4
 8000efa:	9600      	str	r6, [sp, #0]
 8000efc:	463b      	mov	r3, r7
 8000efe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8000f02:	f7ff fe62 	bl	8000bca <I2C_WaitOnFlagUntilTimeout>
 8000f06:	6822      	ldr	r2, [r4, #0]
 8000f08:	b108      	cbz	r0, 8000f0e <HAL_I2C_Master_Receive+0x18e>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8000f0a:	6813      	ldr	r3, [r2, #0]
 8000f0c:	e799      	b.n	8000e42 <HAL_I2C_Master_Receive+0xc2>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8000f0e:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 8000f12:	6113      	str	r3, [r2, #16]
 8000f14:	e7a4      	b.n	8000e60 <HAL_I2C_Master_Receive+0xe0>
    else if (hi2c->XferSize == 1U)
 8000f16:	2a01      	cmp	r2, #1
 8000f18:	d111      	bne.n	8000f3e <HAL_I2C_Master_Receive+0x1be>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f1a:	681a      	ldr	r2, [r3, #0]
 8000f1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f20:	601a      	str	r2, [r3, #0]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f22:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f24:	6823      	ldr	r3, [r4, #0]
 8000f26:	9004      	str	r0, [sp, #16]
 8000f28:	695a      	ldr	r2, [r3, #20]
 8000f2a:	9204      	str	r2, [sp, #16]
 8000f2c:	699a      	ldr	r2, [r3, #24]
 8000f2e:	9204      	str	r2, [sp, #16]
 8000f30:	9a04      	ldr	r2, [sp, #16]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f38:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000f3a:	b662      	cpsie	i
}
 8000f3c:	e7a7      	b.n	8000e8e <HAL_I2C_Master_Receive+0x10e>
    else if (hi2c->XferSize == 2U)
 8000f3e:	2a02      	cmp	r2, #2
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f40:	681a      	ldr	r2, [r3, #0]
    else if (hi2c->XferSize == 2U)
 8000f42:	d10e      	bne.n	8000f62 <HAL_I2C_Master_Receive+0x1e2>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8000f44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f48:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4a:	b672      	cpsid	i
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f4c:	6823      	ldr	r3, [r4, #0]
 8000f4e:	9005      	str	r0, [sp, #20]
 8000f50:	695a      	ldr	r2, [r3, #20]
 8000f52:	9205      	str	r2, [sp, #20]
 8000f54:	699a      	ldr	r2, [r3, #24]
 8000f56:	9205      	str	r2, [sp, #20]
 8000f58:	9a05      	ldr	r2, [sp, #20]
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f5a:	681a      	ldr	r2, [r3, #0]
 8000f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000f60:	e7ea      	b.n	8000f38 <HAL_I2C_Master_Receive+0x1b8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8000f62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000f66:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8000f68:	9006      	str	r0, [sp, #24]
 8000f6a:	695a      	ldr	r2, [r3, #20]
 8000f6c:	9206      	str	r2, [sp, #24]
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	9306      	str	r3, [sp, #24]
 8000f72:	9b06      	ldr	r3, [sp, #24]
 8000f74:	e78b      	b.n	8000e8e <HAL_I2C_Master_Receive+0x10e>
      if (hi2c->XferSize <= 3U)
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	f200 8088 	bhi.w	800108c <HAL_I2C_Master_Receive+0x30c>
        if (hi2c->XferSize == 1U)
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d116      	bne.n	8000fae <HAL_I2C_Master_Receive+0x22e>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f80:	4632      	mov	r2, r6
 8000f82:	4639      	mov	r1, r7
 8000f84:	4620      	mov	r0, r4
 8000f86:	f7ff fdf1 	bl	8000b6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8000f8a:	2800      	cmp	r0, #0
 8000f8c:	f47f af5e 	bne.w	8000e4c <HAL_I2C_Master_Receive+0xcc>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000f90:	6823      	ldr	r3, [r4, #0]
 8000f92:	691a      	ldr	r2, [r3, #16]
 8000f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f96:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8000f98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8000f9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000fa0:	3b01      	subs	r3, #1
 8000fa2:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000fa4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000fac:	e773      	b.n	8000e96 <HAL_I2C_Master_Receive+0x116>
        else if (hi2c->XferSize == 2U)
 8000fae:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000fb0:	9600      	str	r6, [sp, #0]
 8000fb2:	463b      	mov	r3, r7
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	4641      	mov	r1, r8
 8000fba:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8000fbc:	d126      	bne.n	800100c <HAL_I2C_Master_Receive+0x28c>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8000fbe:	f7ff fe04 	bl	8000bca <I2C_WaitOnFlagUntilTimeout>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	f47f af42 	bne.w	8000e4c <HAL_I2C_Master_Receive+0xcc>
 8000fc8:	b672      	cpsid	i
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8000fca:	6823      	ldr	r3, [r4, #0]
 8000fcc:	681a      	ldr	r2, [r3, #0]
 8000fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000fd2:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8000fd4:	691a      	ldr	r2, [r3, #16]
 8000fd6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fd8:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8000fda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000fdc:	3301      	adds	r3, #1
 8000fde:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8000fe0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8000fe6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8000fe8:	3b01      	subs	r3, #1
 8000fea:	b29b      	uxth	r3, r3
 8000fec:	8563      	strh	r3, [r4, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8000fee:	b662      	cpsie	i
 8000ff0:	e7ce      	b.n	8000f90 <HAL_I2C_Master_Receive+0x210>
 8000ff2:	bf00      	nop
 8000ff4:	00100002 	.word	0x00100002
 8000ff8:	ffff0000 	.word	0xffff0000
 8000ffc:	00010002 	.word	0x00010002
 8001000:	00010008 	.word	0x00010008
 8001004:	00010004 	.word	0x00010004
 8001008:	2000002c 	.word	0x2000002c
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800100c:	f7ff fddd 	bl	8000bca <I2C_WaitOnFlagUntilTimeout>
 8001010:	2800      	cmp	r0, #0
 8001012:	f47f af1b 	bne.w	8000e4c <HAL_I2C_Master_Receive+0xcc>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001016:	6822      	ldr	r2, [r4, #0]
 8001018:	6813      	ldr	r3, [r2, #0]
 800101a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800101e:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001022:	6823      	ldr	r3, [r4, #0]
 8001024:	691a      	ldr	r2, [r3, #16]
 8001026:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001028:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800102a:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800102c:	1c4b      	adds	r3, r1, #1
 800102e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8001030:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001032:	3b01      	subs	r3, #1
 8001034:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8001036:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001038:	3b01      	subs	r3, #1
 800103a:	b29b      	uxth	r3, r3
 800103c:	8563      	strh	r3, [r4, #42]	; 0x2a
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800103e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001042:	f8d9 3000 	ldr.w	r3, [r9]
 8001046:	fbb3 f2f2 	udiv	r2, r3, r2
 800104a:	2323      	movs	r3, #35	; 0x23
 800104c:	4353      	muls	r3, r2
 800104e:	9302      	str	r3, [sp, #8]
            count--;
 8001050:	9b02      	ldr	r3, [sp, #8]
 8001052:	3b01      	subs	r3, #1
 8001054:	9302      	str	r3, [sp, #8]
            if (count == 0U)
 8001056:	9b02      	ldr	r3, [sp, #8]
 8001058:	b96b      	cbnz	r3, 8001076 <HAL_I2C_Master_Receive+0x2f6>
              hi2c->State               = HAL_I2C_STATE_READY;
 800105a:	2220      	movs	r2, #32
              hi2c->PreviousState       = I2C_STATE_NONE;
 800105c:	6323      	str	r3, [r4, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800105e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001062:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001066:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001068:	f042 0220 	orr.w	r2, r2, #32
 800106c:	6422      	str	r2, [r4, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800106e:	b662      	cpsie	i
              __HAL_UNLOCK(hi2c);
 8001070:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8001074:	e6ea      	b.n	8000e4c <HAL_I2C_Master_Receive+0xcc>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8001076:	6823      	ldr	r3, [r4, #0]
 8001078:	695a      	ldr	r2, [r3, #20]
 800107a:	0750      	lsls	r0, r2, #29
 800107c:	d5e8      	bpl.n	8001050 <HAL_I2C_Master_Receive+0x2d0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800107e:	681a      	ldr	r2, [r3, #0]
 8001080:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001084:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	704b      	strb	r3, [r1, #1]
 800108a:	e7a6      	b.n	8000fda <HAL_I2C_Master_Receive+0x25a>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800108c:	4632      	mov	r2, r6
 800108e:	4639      	mov	r1, r7
 8001090:	4620      	mov	r0, r4
 8001092:	f7ff fd6b 	bl	8000b6c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001096:	2800      	cmp	r0, #0
 8001098:	f47f aed8 	bne.w	8000e4c <HAL_I2C_Master_Receive+0xcc>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	691a      	ldr	r2, [r3, #16]
 80010a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010a2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80010a4:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80010a6:	1c53      	adds	r3, r2, #1
 80010a8:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80010aa:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80010ac:	3b01      	subs	r3, #1
 80010ae:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80010b0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80010b2:	3b01      	subs	r3, #1
 80010b4:	b29b      	uxth	r3, r3
 80010b6:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80010b8:	6823      	ldr	r3, [r4, #0]
 80010ba:	6959      	ldr	r1, [r3, #20]
 80010bc:	0749      	lsls	r1, r1, #29
 80010be:	f57f aeea 	bpl.w	8000e96 <HAL_I2C_Master_Receive+0x116>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	7053      	strb	r3, [r2, #1]
 80010c6:	e767      	b.n	8000f98 <HAL_I2C_Master_Receive+0x218>

080010c8 <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80010c8:	4b01      	ldr	r3, [pc, #4]	; (80010d0 <HAL_PWR_EnableBkUpAccess+0x8>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	601a      	str	r2, [r3, #0]
}
 80010ce:	4770      	bx	lr
 80010d0:	420e0020 	.word	0x420e0020

080010d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010d8:	4605      	mov	r5, r0
 80010da:	b338      	cbz	r0, 800112c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010dc:	6803      	ldr	r3, [r0, #0]
 80010de:	07db      	lsls	r3, r3, #31
 80010e0:	d410      	bmi.n	8001104 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010e2:	682b      	ldr	r3, [r5, #0]
 80010e4:	079f      	lsls	r7, r3, #30
 80010e6:	d45e      	bmi.n	80011a6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010e8:	682b      	ldr	r3, [r5, #0]
 80010ea:	0719      	lsls	r1, r3, #28
 80010ec:	f100 8095 	bmi.w	800121a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	075a      	lsls	r2, r3, #29
 80010f4:	f100 80bf 	bmi.w	8001276 <HAL_RCC_OscConfig+0x1a2>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010f8:	69e8      	ldr	r0, [r5, #28]
 80010fa:	2800      	cmp	r0, #0
 80010fc:	f040 812c 	bne.w	8001358 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001100:	2000      	movs	r0, #0
 8001102:	e029      	b.n	8001158 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001104:	4c8f      	ldr	r4, [pc, #572]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 8001106:	6863      	ldr	r3, [r4, #4]
 8001108:	f003 030c 	and.w	r3, r3, #12
 800110c:	2b04      	cmp	r3, #4
 800110e:	d007      	beq.n	8001120 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001110:	6863      	ldr	r3, [r4, #4]
 8001112:	f003 030c 	and.w	r3, r3, #12
 8001116:	2b08      	cmp	r3, #8
 8001118:	d10a      	bne.n	8001130 <HAL_RCC_OscConfig+0x5c>
 800111a:	6863      	ldr	r3, [r4, #4]
 800111c:	03de      	lsls	r6, r3, #15
 800111e:	d507      	bpl.n	8001130 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	6823      	ldr	r3, [r4, #0]
 8001122:	039c      	lsls	r4, r3, #14
 8001124:	d5dd      	bpl.n	80010e2 <HAL_RCC_OscConfig+0xe>
 8001126:	686b      	ldr	r3, [r5, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d1da      	bne.n	80010e2 <HAL_RCC_OscConfig+0xe>
          return HAL_ERROR;
 800112c:	2001      	movs	r0, #1
 800112e:	e013      	b.n	8001158 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001130:	686b      	ldr	r3, [r5, #4]
 8001132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001136:	d112      	bne.n	800115e <HAL_RCC_OscConfig+0x8a>
 8001138:	6823      	ldr	r3, [r4, #0]
 800113a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800113e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001140:	f7ff f8a8 	bl	8000294 <HAL_GetTick>
 8001144:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001146:	6823      	ldr	r3, [r4, #0]
 8001148:	0398      	lsls	r0, r3, #14
 800114a:	d4ca      	bmi.n	80010e2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800114c:	f7ff f8a2 	bl	8000294 <HAL_GetTick>
 8001150:	1b80      	subs	r0, r0, r6
 8001152:	2864      	cmp	r0, #100	; 0x64
 8001154:	d9f7      	bls.n	8001146 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001156:	2003      	movs	r0, #3
}
 8001158:	b002      	add	sp, #8
 800115a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800115e:	b99b      	cbnz	r3, 8001188 <HAL_RCC_OscConfig+0xb4>
 8001160:	6823      	ldr	r3, [r4, #0]
 8001162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001166:	6023      	str	r3, [r4, #0]
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001170:	f7ff f890 	bl	8000294 <HAL_GetTick>
 8001174:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001176:	6823      	ldr	r3, [r4, #0]
 8001178:	0399      	lsls	r1, r3, #14
 800117a:	d5b2      	bpl.n	80010e2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800117c:	f7ff f88a 	bl	8000294 <HAL_GetTick>
 8001180:	1b80      	subs	r0, r0, r6
 8001182:	2864      	cmp	r0, #100	; 0x64
 8001184:	d9f7      	bls.n	8001176 <HAL_RCC_OscConfig+0xa2>
 8001186:	e7e6      	b.n	8001156 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001188:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800118c:	6823      	ldr	r3, [r4, #0]
 800118e:	d103      	bne.n	8001198 <HAL_RCC_OscConfig+0xc4>
 8001190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001194:	6023      	str	r3, [r4, #0]
 8001196:	e7cf      	b.n	8001138 <HAL_RCC_OscConfig+0x64>
 8001198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800119c:	6023      	str	r3, [r4, #0]
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011a4:	e7cb      	b.n	800113e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011a6:	4c67      	ldr	r4, [pc, #412]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 80011a8:	6863      	ldr	r3, [r4, #4]
 80011aa:	f013 0f0c 	tst.w	r3, #12
 80011ae:	d007      	beq.n	80011c0 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011b0:	6863      	ldr	r3, [r4, #4]
 80011b2:	f003 030c 	and.w	r3, r3, #12
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d110      	bne.n	80011dc <HAL_RCC_OscConfig+0x108>
 80011ba:	6863      	ldr	r3, [r4, #4]
 80011bc:	03da      	lsls	r2, r3, #15
 80011be:	d40d      	bmi.n	80011dc <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c0:	6823      	ldr	r3, [r4, #0]
 80011c2:	079b      	lsls	r3, r3, #30
 80011c4:	d502      	bpl.n	80011cc <HAL_RCC_OscConfig+0xf8>
 80011c6:	692b      	ldr	r3, [r5, #16]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d1af      	bne.n	800112c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	696a      	ldr	r2, [r5, #20]
 80011d0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80011d4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80011d8:	6023      	str	r3, [r4, #0]
 80011da:	e785      	b.n	80010e8 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011dc:	692a      	ldr	r2, [r5, #16]
 80011de:	4b5a      	ldr	r3, [pc, #360]	; (8001348 <HAL_RCC_OscConfig+0x274>)
 80011e0:	b16a      	cbz	r2, 80011fe <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80011e6:	f7ff f855 	bl	8000294 <HAL_GetTick>
 80011ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	6823      	ldr	r3, [r4, #0]
 80011ee:	079f      	lsls	r7, r3, #30
 80011f0:	d4ec      	bmi.n	80011cc <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011f2:	f7ff f84f 	bl	8000294 <HAL_GetTick>
 80011f6:	1b80      	subs	r0, r0, r6
 80011f8:	2802      	cmp	r0, #2
 80011fa:	d9f7      	bls.n	80011ec <HAL_RCC_OscConfig+0x118>
 80011fc:	e7ab      	b.n	8001156 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80011fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001200:	f7ff f848 	bl	8000294 <HAL_GetTick>
 8001204:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	0798      	lsls	r0, r3, #30
 800120a:	f57f af6d 	bpl.w	80010e8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800120e:	f7ff f841 	bl	8000294 <HAL_GetTick>
 8001212:	1b80      	subs	r0, r0, r6
 8001214:	2802      	cmp	r0, #2
 8001216:	d9f6      	bls.n	8001206 <HAL_RCC_OscConfig+0x132>
 8001218:	e79d      	b.n	8001156 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800121a:	69aa      	ldr	r2, [r5, #24]
 800121c:	4e49      	ldr	r6, [pc, #292]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 800121e:	4b4b      	ldr	r3, [pc, #300]	; (800134c <HAL_RCC_OscConfig+0x278>)
 8001220:	b1da      	cbz	r2, 800125a <HAL_RCC_OscConfig+0x186>
      __HAL_RCC_LSI_ENABLE();
 8001222:	2201      	movs	r2, #1
 8001224:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001226:	f7ff f835 	bl	8000294 <HAL_GetTick>
 800122a:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800122e:	079b      	lsls	r3, r3, #30
 8001230:	d50d      	bpl.n	800124e <HAL_RCC_OscConfig+0x17a>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001232:	4b47      	ldr	r3, [pc, #284]	; (8001350 <HAL_RCC_OscConfig+0x27c>)
 8001234:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	fbb3 f3f2 	udiv	r3, r3, r2
 800123e:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001240:	bf00      	nop
  }
  while (Delay --);
 8001242:	9b01      	ldr	r3, [sp, #4]
 8001244:	1e5a      	subs	r2, r3, #1
 8001246:	9201      	str	r2, [sp, #4]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d1f9      	bne.n	8001240 <HAL_RCC_OscConfig+0x16c>
 800124c:	e750      	b.n	80010f0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800124e:	f7ff f821 	bl	8000294 <HAL_GetTick>
 8001252:	1b00      	subs	r0, r0, r4
 8001254:	2802      	cmp	r0, #2
 8001256:	d9e9      	bls.n	800122c <HAL_RCC_OscConfig+0x158>
 8001258:	e77d      	b.n	8001156 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800125a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800125c:	f7ff f81a 	bl	8000294 <HAL_GetTick>
 8001260:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001262:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8001264:	079f      	lsls	r7, r3, #30
 8001266:	f57f af43 	bpl.w	80010f0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800126a:	f7ff f813 	bl	8000294 <HAL_GetTick>
 800126e:	1b00      	subs	r0, r0, r4
 8001270:	2802      	cmp	r0, #2
 8001272:	d9f6      	bls.n	8001262 <HAL_RCC_OscConfig+0x18e>
 8001274:	e76f      	b.n	8001156 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001276:	4c33      	ldr	r4, [pc, #204]	; (8001344 <HAL_RCC_OscConfig+0x270>)
 8001278:	69e3      	ldr	r3, [r4, #28]
 800127a:	00d8      	lsls	r0, r3, #3
 800127c:	d424      	bmi.n	80012c8 <HAL_RCC_OscConfig+0x1f4>
      __HAL_RCC_PWR_CLK_ENABLE();
 800127e:	69e3      	ldr	r3, [r4, #28]
 8001280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001284:	61e3      	str	r3, [r4, #28]
 8001286:	69e3      	ldr	r3, [r4, #28]
 8001288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 8001290:	2701      	movs	r7, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001292:	4e30      	ldr	r6, [pc, #192]	; (8001354 <HAL_RCC_OscConfig+0x280>)
 8001294:	6833      	ldr	r3, [r6, #0]
 8001296:	05d9      	lsls	r1, r3, #23
 8001298:	d518      	bpl.n	80012cc <HAL_RCC_OscConfig+0x1f8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800129a:	68eb      	ldr	r3, [r5, #12]
 800129c:	2b01      	cmp	r3, #1
 800129e:	d126      	bne.n	80012ee <HAL_RCC_OscConfig+0x21a>
 80012a0:	6a23      	ldr	r3, [r4, #32]
 80012a2:	f043 0301 	orr.w	r3, r3, #1
 80012a6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80012a8:	f7fe fff4 	bl	8000294 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ac:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80012b0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012b2:	6a23      	ldr	r3, [r4, #32]
 80012b4:	079b      	lsls	r3, r3, #30
 80012b6:	d53f      	bpl.n	8001338 <HAL_RCC_OscConfig+0x264>
    if (pwrclkchanged == SET)
 80012b8:	2f00      	cmp	r7, #0
 80012ba:	f43f af1d 	beq.w	80010f8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80012be:	69e3      	ldr	r3, [r4, #28]
 80012c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012c4:	61e3      	str	r3, [r4, #28]
 80012c6:	e717      	b.n	80010f8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80012c8:	2700      	movs	r7, #0
 80012ca:	e7e2      	b.n	8001292 <HAL_RCC_OscConfig+0x1be>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012cc:	6833      	ldr	r3, [r6, #0]
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80012d4:	f7fe ffde 	bl	8000294 <HAL_GetTick>
 80012d8:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012da:	6833      	ldr	r3, [r6, #0]
 80012dc:	05da      	lsls	r2, r3, #23
 80012de:	d4dc      	bmi.n	800129a <HAL_RCC_OscConfig+0x1c6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012e0:	f7fe ffd8 	bl	8000294 <HAL_GetTick>
 80012e4:	eba0 0008 	sub.w	r0, r0, r8
 80012e8:	2864      	cmp	r0, #100	; 0x64
 80012ea:	d9f6      	bls.n	80012da <HAL_RCC_OscConfig+0x206>
 80012ec:	e733      	b.n	8001156 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012ee:	b9ab      	cbnz	r3, 800131c <HAL_RCC_OscConfig+0x248>
 80012f0:	6a23      	ldr	r3, [r4, #32]
 80012f2:	f023 0301 	bic.w	r3, r3, #1
 80012f6:	6223      	str	r3, [r4, #32]
 80012f8:	6a23      	ldr	r3, [r4, #32]
 80012fa:	f023 0304 	bic.w	r3, r3, #4
 80012fe:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001300:	f7fe ffc8 	bl	8000294 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001304:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001308:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130a:	6a23      	ldr	r3, [r4, #32]
 800130c:	0798      	lsls	r0, r3, #30
 800130e:	d5d3      	bpl.n	80012b8 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001310:	f7fe ffc0 	bl	8000294 <HAL_GetTick>
 8001314:	1b80      	subs	r0, r0, r6
 8001316:	4540      	cmp	r0, r8
 8001318:	d9f7      	bls.n	800130a <HAL_RCC_OscConfig+0x236>
 800131a:	e71c      	b.n	8001156 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800131c:	2b05      	cmp	r3, #5
 800131e:	6a23      	ldr	r3, [r4, #32]
 8001320:	d103      	bne.n	800132a <HAL_RCC_OscConfig+0x256>
 8001322:	f043 0304 	orr.w	r3, r3, #4
 8001326:	6223      	str	r3, [r4, #32]
 8001328:	e7ba      	b.n	80012a0 <HAL_RCC_OscConfig+0x1cc>
 800132a:	f023 0301 	bic.w	r3, r3, #1
 800132e:	6223      	str	r3, [r4, #32]
 8001330:	6a23      	ldr	r3, [r4, #32]
 8001332:	f023 0304 	bic.w	r3, r3, #4
 8001336:	e7b6      	b.n	80012a6 <HAL_RCC_OscConfig+0x1d2>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001338:	f7fe ffac 	bl	8000294 <HAL_GetTick>
 800133c:	1b80      	subs	r0, r0, r6
 800133e:	4540      	cmp	r0, r8
 8001340:	d9b7      	bls.n	80012b2 <HAL_RCC_OscConfig+0x1de>
 8001342:	e708      	b.n	8001156 <HAL_RCC_OscConfig+0x82>
 8001344:	40021000 	.word	0x40021000
 8001348:	42420000 	.word	0x42420000
 800134c:	42420480 	.word	0x42420480
 8001350:	2000002c 	.word	0x2000002c
 8001354:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001358:	4b2a      	ldr	r3, [pc, #168]	; (8001404 <HAL_RCC_OscConfig+0x330>)
 800135a:	685a      	ldr	r2, [r3, #4]
 800135c:	f002 020c 	and.w	r2, r2, #12
 8001360:	2a08      	cmp	r2, #8
 8001362:	461c      	mov	r4, r3
 8001364:	d03d      	beq.n	80013e2 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001366:	4e28      	ldr	r6, [pc, #160]	; (8001408 <HAL_RCC_OscConfig+0x334>)
 8001368:	2300      	movs	r3, #0
 800136a:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 800136c:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800136e:	d12b      	bne.n	80013c8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8001370:	f7fe ff90 	bl	8000294 <HAL_GetTick>
 8001374:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	0199      	lsls	r1, r3, #6
 800137a:	d41f      	bmi.n	80013bc <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800137c:	6a2b      	ldr	r3, [r5, #32]
 800137e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001382:	d105      	bne.n	8001390 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001384:	6862      	ldr	r2, [r4, #4]
 8001386:	68a9      	ldr	r1, [r5, #8]
 8001388:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800138c:	430a      	orrs	r2, r1
 800138e:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001390:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8001392:	6862      	ldr	r2, [r4, #4]
 8001394:	430b      	orrs	r3, r1
 8001396:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800139a:	4313      	orrs	r3, r2
 800139c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800139e:	2301      	movs	r3, #1
 80013a0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80013a2:	f7fe ff77 	bl	8000294 <HAL_GetTick>
 80013a6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013a8:	6823      	ldr	r3, [r4, #0]
 80013aa:	019a      	lsls	r2, r3, #6
 80013ac:	f53f aea8 	bmi.w	8001100 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013b0:	f7fe ff70 	bl	8000294 <HAL_GetTick>
 80013b4:	1b40      	subs	r0, r0, r5
 80013b6:	2802      	cmp	r0, #2
 80013b8:	d9f6      	bls.n	80013a8 <HAL_RCC_OscConfig+0x2d4>
 80013ba:	e6cc      	b.n	8001156 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013bc:	f7fe ff6a 	bl	8000294 <HAL_GetTick>
 80013c0:	1bc0      	subs	r0, r0, r7
 80013c2:	2802      	cmp	r0, #2
 80013c4:	d9d7      	bls.n	8001376 <HAL_RCC_OscConfig+0x2a2>
 80013c6:	e6c6      	b.n	8001156 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80013c8:	f7fe ff64 	bl	8000294 <HAL_GetTick>
 80013cc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013ce:	6823      	ldr	r3, [r4, #0]
 80013d0:	019b      	lsls	r3, r3, #6
 80013d2:	f57f ae95 	bpl.w	8001100 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013d6:	f7fe ff5d 	bl	8000294 <HAL_GetTick>
 80013da:	1b40      	subs	r0, r0, r5
 80013dc:	2802      	cmp	r0, #2
 80013de:	d9f6      	bls.n	80013ce <HAL_RCC_OscConfig+0x2fa>
 80013e0:	e6b9      	b.n	8001156 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013e2:	2801      	cmp	r0, #1
 80013e4:	f43f aeb8 	beq.w	8001158 <HAL_RCC_OscConfig+0x84>
        pll_config = RCC->CFGR;
 80013e8:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ea:	6a2a      	ldr	r2, [r5, #32]
 80013ec:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80013f0:	4291      	cmp	r1, r2
 80013f2:	f47f ae9b 	bne.w	800112c <HAL_RCC_OscConfig+0x58>
 80013f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80013f8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013fc:	4293      	cmp	r3, r2
 80013fe:	f43f ae7f 	beq.w	8001100 <HAL_RCC_OscConfig+0x2c>
 8001402:	e693      	b.n	800112c <HAL_RCC_OscConfig+0x58>
 8001404:	40021000 	.word	0x40021000
 8001408:	42420060 	.word	0x42420060

0800140c <HAL_RCC_GetSysClockFreq>:
{
 800140c:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800140e:	4b18      	ldr	r3, [pc, #96]	; (8001470 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8001410:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001412:	ac02      	add	r4, sp, #8
 8001414:	f103 0510 	add.w	r5, r3, #16
 8001418:	6818      	ldr	r0, [r3, #0]
 800141a:	6859      	ldr	r1, [r3, #4]
 800141c:	4622      	mov	r2, r4
 800141e:	c203      	stmia	r2!, {r0, r1}
 8001420:	3308      	adds	r3, #8
 8001422:	42ab      	cmp	r3, r5
 8001424:	4614      	mov	r4, r2
 8001426:	d1f7      	bne.n	8001418 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001428:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 800142c:	4911      	ldr	r1, [pc, #68]	; (8001474 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800142e:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8001432:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001434:	f003 020c 	and.w	r2, r3, #12
 8001438:	2a08      	cmp	r2, #8
 800143a:	d117      	bne.n	800146c <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800143c:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8001440:	a806      	add	r0, sp, #24
 8001442:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001444:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001446:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800144a:	d50c      	bpl.n	8001466 <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800144c:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800144e:	480a      	ldr	r0, [pc, #40]	; (8001478 <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001450:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001454:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001456:	aa06      	add	r2, sp, #24
 8001458:	4413      	add	r3, r2
 800145a:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800145e:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8001462:	b007      	add	sp, #28
 8001464:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <HAL_RCC_GetSysClockFreq+0x70>)
 8001468:	4350      	muls	r0, r2
 800146a:	e7fa      	b.n	8001462 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 800146e:	e7f8      	b.n	8001462 <HAL_RCC_GetSysClockFreq+0x56>
 8001470:	08006ab1 	.word	0x08006ab1
 8001474:	40021000 	.word	0x40021000
 8001478:	007a1200 	.word	0x007a1200
 800147c:	003d0900 	.word	0x003d0900

08001480 <HAL_RCC_ClockConfig>:
{
 8001480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001484:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001486:	4604      	mov	r4, r0
 8001488:	b910      	cbnz	r0, 8001490 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800148a:	2001      	movs	r0, #1
}
 800148c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001490:	4a44      	ldr	r2, [pc, #272]	; (80015a4 <HAL_RCC_ClockConfig+0x124>)
 8001492:	6813      	ldr	r3, [r2, #0]
 8001494:	f003 0307 	and.w	r3, r3, #7
 8001498:	428b      	cmp	r3, r1
 800149a:	d328      	bcc.n	80014ee <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800149c:	6821      	ldr	r1, [r4, #0]
 800149e:	078e      	lsls	r6, r1, #30
 80014a0:	d430      	bmi.n	8001504 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014a2:	07ca      	lsls	r2, r1, #31
 80014a4:	d443      	bmi.n	800152e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80014a6:	4a3f      	ldr	r2, [pc, #252]	; (80015a4 <HAL_RCC_ClockConfig+0x124>)
 80014a8:	6813      	ldr	r3, [r2, #0]
 80014aa:	f003 0307 	and.w	r3, r3, #7
 80014ae:	42ab      	cmp	r3, r5
 80014b0:	d865      	bhi.n	800157e <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b2:	6822      	ldr	r2, [r4, #0]
 80014b4:	4d3c      	ldr	r5, [pc, #240]	; (80015a8 <HAL_RCC_ClockConfig+0x128>)
 80014b6:	f012 0f04 	tst.w	r2, #4
 80014ba:	d16c      	bne.n	8001596 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014bc:	0713      	lsls	r3, r2, #28
 80014be:	d506      	bpl.n	80014ce <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80014c0:	686b      	ldr	r3, [r5, #4]
 80014c2:	6922      	ldr	r2, [r4, #16]
 80014c4:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80014c8:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80014cc:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014ce:	f7ff ff9d 	bl	800140c <HAL_RCC_GetSysClockFreq>
 80014d2:	686b      	ldr	r3, [r5, #4]
 80014d4:	4a35      	ldr	r2, [pc, #212]	; (80015ac <HAL_RCC_ClockConfig+0x12c>)
 80014d6:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80014da:	5cd3      	ldrb	r3, [r2, r3]
 80014dc:	40d8      	lsrs	r0, r3
 80014de:	4b34      	ldr	r3, [pc, #208]	; (80015b0 <HAL_RCC_ClockConfig+0x130>)
 80014e0:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80014e2:	4b34      	ldr	r3, [pc, #208]	; (80015b4 <HAL_RCC_ClockConfig+0x134>)
 80014e4:	6818      	ldr	r0, [r3, #0]
 80014e6:	f7fe fe93 	bl	8000210 <HAL_InitTick>
  return HAL_OK;
 80014ea:	2000      	movs	r0, #0
 80014ec:	e7ce      	b.n	800148c <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014ee:	6813      	ldr	r3, [r2, #0]
 80014f0:	f023 0307 	bic.w	r3, r3, #7
 80014f4:	430b      	orrs	r3, r1
 80014f6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014f8:	6813      	ldr	r3, [r2, #0]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	428b      	cmp	r3, r1
 8001500:	d1c3      	bne.n	800148a <HAL_RCC_ClockConfig+0xa>
 8001502:	e7cb      	b.n	800149c <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001504:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <HAL_RCC_ClockConfig+0x128>)
 8001506:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800150a:	bf1e      	ittt	ne
 800150c:	685a      	ldrne	r2, [r3, #4]
 800150e:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8001512:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001514:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001516:	bf42      	ittt	mi
 8001518:	685a      	ldrmi	r2, [r3, #4]
 800151a:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800151e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	68a0      	ldr	r0, [r4, #8]
 8001524:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001528:	4302      	orrs	r2, r0
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	e7b9      	b.n	80014a2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800152e:	6862      	ldr	r2, [r4, #4]
 8001530:	4e1d      	ldr	r6, [pc, #116]	; (80015a8 <HAL_RCC_ClockConfig+0x128>)
 8001532:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001534:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001536:	d11a      	bne.n	800156e <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001538:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153c:	d0a5      	beq.n	800148a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800153e:	6873      	ldr	r3, [r6, #4]
 8001540:	f023 0303 	bic.w	r3, r3, #3
 8001544:	4313      	orrs	r3, r2
 8001546:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001548:	f7fe fea4 	bl	8000294 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8001550:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001552:	6873      	ldr	r3, [r6, #4]
 8001554:	6862      	ldr	r2, [r4, #4]
 8001556:	f003 030c 	and.w	r3, r3, #12
 800155a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800155e:	d0a2      	beq.n	80014a6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001560:	f7fe fe98 	bl	8000294 <HAL_GetTick>
 8001564:	1bc0      	subs	r0, r0, r7
 8001566:	4540      	cmp	r0, r8
 8001568:	d9f3      	bls.n	8001552 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800156a:	2003      	movs	r0, #3
 800156c:	e78e      	b.n	800148c <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800156e:	2a02      	cmp	r2, #2
 8001570:	d102      	bne.n	8001578 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001572:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8001576:	e7e1      	b.n	800153c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001578:	f013 0f02 	tst.w	r3, #2
 800157c:	e7de      	b.n	800153c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	6813      	ldr	r3, [r2, #0]
 8001580:	f023 0307 	bic.w	r3, r3, #7
 8001584:	432b      	orrs	r3, r5
 8001586:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001588:	6813      	ldr	r3, [r2, #0]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	42ab      	cmp	r3, r5
 8001590:	f47f af7b 	bne.w	800148a <HAL_RCC_ClockConfig+0xa>
 8001594:	e78d      	b.n	80014b2 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001596:	686b      	ldr	r3, [r5, #4]
 8001598:	68e1      	ldr	r1, [r4, #12]
 800159a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800159e:	430b      	orrs	r3, r1
 80015a0:	606b      	str	r3, [r5, #4]
 80015a2:	e78b      	b.n	80014bc <HAL_RCC_ClockConfig+0x3c>
 80015a4:	40022000 	.word	0x40022000
 80015a8:	40021000 	.word	0x40021000
 80015ac:	08006f0b 	.word	0x08006f0b
 80015b0:	2000002c 	.word	0x2000002c
 80015b4:	20000004 	.word	0x20000004

080015b8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015b8:	4b04      	ldr	r3, [pc, #16]	; (80015cc <HAL_RCC_GetPCLK1Freq+0x14>)
 80015ba:	4a05      	ldr	r2, [pc, #20]	; (80015d0 <HAL_RCC_GetPCLK1Freq+0x18>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80015c2:	5cd3      	ldrb	r3, [r2, r3]
 80015c4:	4a03      	ldr	r2, [pc, #12]	; (80015d4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80015c6:	6810      	ldr	r0, [r2, #0]
}
 80015c8:	40d8      	lsrs	r0, r3
 80015ca:	4770      	bx	lr
 80015cc:	40021000 	.word	0x40021000
 80015d0:	08006f1b 	.word	0x08006f1b
 80015d4:	2000002c 	.word	0x2000002c

080015d8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <HAL_RCC_GetPCLK2Freq+0x14>)
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <HAL_RCC_GetPCLK2Freq+0x18>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80015e2:	5cd3      	ldrb	r3, [r2, r3]
 80015e4:	4a03      	ldr	r2, [pc, #12]	; (80015f4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80015e6:	6810      	ldr	r0, [r2, #0]
}
 80015e8:	40d8      	lsrs	r0, r3
 80015ea:	4770      	bx	lr
 80015ec:	40021000 	.word	0x40021000
 80015f0:	08006f1b 	.word	0x08006f1b
 80015f4:	2000002c 	.word	0x2000002c

080015f8 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80015f8:	6803      	ldr	r3, [r0, #0]
{
 80015fa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80015fe:	07d9      	lsls	r1, r3, #31
{
 8001600:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001602:	d520      	bpl.n	8001646 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001604:	4c35      	ldr	r4, [pc, #212]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001606:	69e3      	ldr	r3, [r4, #28]
 8001608:	00da      	lsls	r2, r3, #3
 800160a:	d432      	bmi.n	8001672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800160c:	69e3      	ldr	r3, [r4, #28]
 800160e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001612:	61e3      	str	r3, [r4, #28]
 8001614:	69e3      	ldr	r3, [r4, #28]
 8001616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800161e:	2701      	movs	r7, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	4e2f      	ldr	r6, [pc, #188]	; (80016e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8001622:	6833      	ldr	r3, [r6, #0]
 8001624:	05db      	lsls	r3, r3, #23
 8001626:	d526      	bpl.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001628:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800162a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800162e:	d136      	bne.n	800169e <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001630:	6a23      	ldr	r3, [r4, #32]
 8001632:	686a      	ldr	r2, [r5, #4]
 8001634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001638:	4313      	orrs	r3, r2
 800163a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800163c:	b11f      	cbz	r7, 8001646 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800163e:	69e3      	ldr	r3, [r4, #28]
 8001640:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001644:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001646:	6828      	ldr	r0, [r5, #0]
 8001648:	0783      	lsls	r3, r0, #30
 800164a:	d506      	bpl.n	800165a <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800164c:	4923      	ldr	r1, [pc, #140]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800164e:	68ab      	ldr	r3, [r5, #8]
 8001650:	684a      	ldr	r2, [r1, #4]
 8001652:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001656:	431a      	orrs	r2, r3
 8001658:	604a      	str	r2, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800165a:	f010 0010 	ands.w	r0, r0, #16
 800165e:	d01b      	beq.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001660:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8001662:	68e9      	ldr	r1, [r5, #12]
 8001664:	6853      	ldr	r3, [r2, #4]
 8001666:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800166a:	430b      	orrs	r3, r1
 800166c:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800166e:	2000      	movs	r0, #0
 8001670:	e012      	b.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus pwrclkchanged = RESET;
 8001672:	2700      	movs	r7, #0
 8001674:	e7d4      	b.n	8001620 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001676:	6833      	ldr	r3, [r6, #0]
 8001678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800167e:	f7fe fe09 	bl	8000294 <HAL_GetTick>
 8001682:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001684:	6833      	ldr	r3, [r6, #0]
 8001686:	05d8      	lsls	r0, r3, #23
 8001688:	d4ce      	bmi.n	8001628 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168a:	f7fe fe03 	bl	8000294 <HAL_GetTick>
 800168e:	eba0 0008 	sub.w	r0, r0, r8
 8001692:	2864      	cmp	r0, #100	; 0x64
 8001694:	d9f6      	bls.n	8001684 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8001696:	2003      	movs	r0, #3
}
 8001698:	b002      	add	sp, #8
 800169a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800169e:	686a      	ldr	r2, [r5, #4]
 80016a0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80016a4:	429a      	cmp	r2, r3
 80016a6:	d0c3      	beq.n	8001630 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016a8:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80016aa:	4a0e      	ldr	r2, [pc, #56]	; (80016e4 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 80016ac:	2001      	movs	r0, #1
 80016ae:	6010      	str	r0, [r2, #0]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016b4:	2000      	movs	r0, #0
 80016b6:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 80016b8:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016ba:	07d9      	lsls	r1, r3, #31
 80016bc:	d5b8      	bpl.n	8001630 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80016be:	f7fe fde9 	bl	8000294 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c2:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80016c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	6a23      	ldr	r3, [r4, #32]
 80016ca:	079a      	lsls	r2, r3, #30
 80016cc:	d4b0      	bmi.n	8001630 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7fe fde1 	bl	8000294 <HAL_GetTick>
 80016d2:	1b80      	subs	r0, r0, r6
 80016d4:	4540      	cmp	r0, r8
 80016d6:	d9f7      	bls.n	80016c8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 80016d8:	e7dd      	b.n	8001696 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40007000 	.word	0x40007000
 80016e4:	42420440 	.word	0x42420440

080016e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80016e8:	b570      	push	{r4, r5, r6, lr}
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016ea:	4b35      	ldr	r3, [pc, #212]	; (80017c0 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>)
{
 80016ec:	b086      	sub	sp, #24
 80016ee:	4602      	mov	r2, r0
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80016f0:	ad02      	add	r5, sp, #8
 80016f2:	f103 0610 	add.w	r6, r3, #16
 80016f6:	6818      	ldr	r0, [r3, #0]
 80016f8:	6859      	ldr	r1, [r3, #4]
 80016fa:	462c      	mov	r4, r5
 80016fc:	c403      	stmia	r4!, {r0, r1}
 80016fe:	3308      	adds	r3, #8
 8001700:	42b3      	cmp	r3, r6
 8001702:	4625      	mov	r5, r4
 8001704:	d1f7      	bne.n	80016f6 <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001706:	f240 2301 	movw	r3, #513	; 0x201
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800170a:	2a02      	cmp	r2, #2
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800170c:	f8ad 3004 	strh.w	r3, [sp, #4]
  switch (PeriphClk)
 8001710:	d049      	beq.n	80017a6 <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8001712:	2a10      	cmp	r2, #16
 8001714:	d003      	beq.n	800171e <HAL_RCCEx_GetPeriphCLKFreq+0x36>
 8001716:	2a01      	cmp	r2, #1
 8001718:	d026      	beq.n	8001768 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
  uint32_t temp_reg = 0U, frequency = 0U;
 800171a:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 800171c:	e038      	b.n	8001790 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      temp_reg = RCC->CFGR;
 800171e:	4b29      	ldr	r3, [pc, #164]	; (80017c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 8001720:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8001722:	6818      	ldr	r0, [r3, #0]
 8001724:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8001728:	d032      	beq.n	8001790 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800172a:	f3c1 4283 	ubfx	r2, r1, #18, #4
 800172e:	a806      	add	r0, sp, #24
 8001730:	4402      	add	r2, r0
 8001732:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001736:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001738:	bf48      	it	mi
 800173a:	685a      	ldrmi	r2, [r3, #4]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800173c:	685b      	ldr	r3, [r3, #4]
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800173e:	bf51      	iteee	pl
 8001740:	4a21      	ldrpl	r2, [pc, #132]	; (80017c8 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001742:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001746:	a906      	addmi	r1, sp, #24
 8001748:	1852      	addmi	r2, r2, r1
 800174a:	bf42      	ittt	mi
 800174c:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001750:	4a1e      	ldrmi	r2, [pc, #120]	; (80017cc <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
 8001752:	fbb2 f2f1 	udivmi	r2, r2, r1
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001756:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001758:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800175c:	d418      	bmi.n	8001790 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
          frequency = (pllclk * 2) / 3;
 800175e:	0040      	lsls	r0, r0, #1
 8001760:	2303      	movs	r3, #3
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001762:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8001766:	e013      	b.n	8001790 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
      temp_reg = RCC->BDCR;
 8001768:	4a16      	ldr	r2, [pc, #88]	; (80017c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 800176a:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800176c:	f240 3102 	movw	r1, #770	; 0x302
 8001770:	4019      	ands	r1, r3
 8001772:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8001776:	d01f      	beq.n	80017b8 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8001778:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800177c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001780:	d108      	bne.n	8001794 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
 8001782:	6a50      	ldr	r0, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8001784:	f649 4340 	movw	r3, #40000	; 0x9c40
 8001788:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 800178c:	bf18      	it	ne
 800178e:	4618      	movne	r0, r3
}
 8001790:	b006      	add	sp, #24
 8001792:	bd70      	pop	{r4, r5, r6, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8001794:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001798:	d1bf      	bne.n	800171a <HAL_RCCEx_GetPeriphCLKFreq+0x32>
 800179a:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 800179c:	f24f 4324 	movw	r3, #62500	; 0xf424
 80017a0:	f410 3000 	ands.w	r0, r0, #131072	; 0x20000
 80017a4:	e7f2      	b.n	800178c <HAL_RCCEx_GetPeriphCLKFreq+0xa4>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80017a6:	f7ff ff17 	bl	80015d8 <HAL_RCC_GetPCLK2Freq>
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f3c3 3381 	ubfx	r3, r3, #14, #2
 80017b2:	3301      	adds	r3, #1
 80017b4:	005b      	lsls	r3, r3, #1
 80017b6:	e7d4      	b.n	8001762 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
        frequency = LSE_VALUE;
 80017b8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80017bc:	e7e8      	b.n	8001790 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>
 80017be:	bf00      	nop
 80017c0:	08006ab1 	.word	0x08006ab1
 80017c4:	40021000 	.word	0x40021000
 80017c8:	003d0900 	.word	0x003d0900
 80017cc:	007a1200 	.word	0x007a1200

080017d0 <RTC_ReadTimeCounter>:
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
  uint32_t timecounter = 0U;

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80017d0:	6803      	ldr	r3, [r0, #0]
 80017d2:	699a      	ldr	r2, [r3, #24]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 80017d4:	69d8      	ldr	r0, [r3, #28]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 80017d6:	6999      	ldr	r1, [r3, #24]
{
 80017d8:	b530      	push	{r4, r5, lr}

  if (high1 != high2)
 80017da:	b295      	uxth	r5, r2
 80017dc:	b28c      	uxth	r4, r1
 80017de:	42a5      	cmp	r5, r4
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80017e0:	bf17      	itett	ne
 80017e2:	69d8      	ldrne	r0, [r3, #28]
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80017e4:	b280      	uxtheq	r0, r0
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80017e6:	b280      	uxthne	r0, r0
 80017e8:	ea40 4001 	orrne.w	r0, r0, r1, lsl #16
    timecounter = (((uint32_t) high1 << 16U) | low);
 80017ec:	bf08      	it	eq
 80017ee:	ea40 4002 	orreq.w	r0, r0, r2, lsl #16
  }

  return timecounter;
}
 80017f2:	bd30      	pop	{r4, r5, pc}

080017f4 <RTC_ReadAlarmCounter>:
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
  uint16_t high1 = 0U, low = 0U;

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80017f4:	6803      	ldr	r3, [r0, #0]
 80017f6:	6a18      	ldr	r0, [r3, #32]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80017f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24

  return (((uint32_t) high1 << 16U) | low);
 80017fa:	b29b      	uxth	r3, r3
}
 80017fc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001800:	4770      	bx	lr

08001802 <RTC_Bcd2ToByte>:
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
  uint32_t tmp = 0U;
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8001802:	0903      	lsrs	r3, r0, #4
 8001804:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  return (tmp + (Value & (uint8_t)0x0F));
 8001808:	f000 000f 	and.w	r0, r0, #15
 800180c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8001810:	b2c0      	uxtb	r0, r0
 8001812:	4770      	bx	lr

08001814 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8001814:	b530      	push	{r4, r5, lr}
 8001816:	4603      	mov	r3, r0
  uint32_t year = 0U, weekday = 0U;

  year = 2000U + nYear;
 8001818:	f500 64fa 	add.w	r4, r0, #2000	; 0x7d0

  if (nMonth < 3U)
 800181c:	2902      	cmp	r1, #2
 800181e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8001822:	ebc1 00c0 	rsb	r0, r1, r0, lsl #3
 8001826:	f04f 0509 	mov.w	r5, #9
 800182a:	fbb0 f5f5 	udiv	r5, r0, r5
 800182e:	d817      	bhi.n	8001860 <RTC_WeekDayNum+0x4c>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8001830:	3204      	adds	r2, #4
 8001832:	1910      	adds	r0, r2, r4
 8001834:	f203 73cf 	addw	r3, r3, #1999	; 0x7cf
 8001838:	4428      	add	r0, r5
 800183a:	eb00 0093 	add.w	r0, r0, r3, lsr #2
 800183e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8001842:	fbb3 f2f2 	udiv	r2, r3, r2
 8001846:	4410      	add	r0, r2
 8001848:	2264      	movs	r2, #100	; 0x64
 800184a:	fbb3 f3f2 	udiv	r3, r3, r2
 800184e:	1ac0      	subs	r0, r0, r3
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8001850:	2307      	movs	r3, #7
 8001852:	fbb0 f3f3 	udiv	r3, r0, r3
 8001856:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 800185a:	1ac0      	subs	r0, r0, r3
  }

  return (uint8_t)weekday;
}
 800185c:	b2c0      	uxtb	r0, r0
 800185e:	bd30      	pop	{r4, r5, pc}
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8001860:	1c90      	adds	r0, r2, #2
 8001862:	4420      	add	r0, r4
 8001864:	4428      	add	r0, r5
 8001866:	eb00 0094 	add.w	r0, r0, r4, lsr #2
 800186a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800186e:	fbb4 f3f3 	udiv	r3, r4, r3
 8001872:	4418      	add	r0, r3
 8001874:	2264      	movs	r2, #100	; 0x64
 8001876:	fbb4 f4f2 	udiv	r4, r4, r2
 800187a:	1b00      	subs	r0, r0, r4
 800187c:	e7e8      	b.n	8001850 <RTC_WeekDayNum+0x3c>

0800187e <RTC_EnterInitMode>:
{
 800187e:	b538      	push	{r3, r4, r5, lr}
 8001880:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8001882:	f7fe fd07 	bl	8000294 <HAL_GetTick>
 8001886:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8001888:	6823      	ldr	r3, [r4, #0]
 800188a:	685a      	ldr	r2, [r3, #4]
 800188c:	0692      	lsls	r2, r2, #26
 800188e:	d505      	bpl.n	800189c <RTC_EnterInitMode+0x1e>
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001890:	685a      	ldr	r2, [r3, #4]
 8001892:	f042 0210 	orr.w	r2, r2, #16
 8001896:	605a      	str	r2, [r3, #4]
  return HAL_OK;
 8001898:	2000      	movs	r0, #0
}
 800189a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800189c:	f7fe fcfa 	bl	8000294 <HAL_GetTick>
 80018a0:	1b40      	subs	r0, r0, r5
 80018a2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80018a6:	d9ef      	bls.n	8001888 <RTC_EnterInitMode+0xa>
      return HAL_TIMEOUT;
 80018a8:	2003      	movs	r0, #3
 80018aa:	e7f6      	b.n	800189a <RTC_EnterInitMode+0x1c>

080018ac <RTC_ExitInitMode>:
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018ac:	6802      	ldr	r2, [r0, #0]
{
 80018ae:	b538      	push	{r3, r4, r5, lr}
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80018b0:	6853      	ldr	r3, [r2, #4]
 80018b2:	f023 0310 	bic.w	r3, r3, #16
 80018b6:	6053      	str	r3, [r2, #4]
{
 80018b8:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 80018ba:	f7fe fceb 	bl	8000294 <HAL_GetTick>
 80018be:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	069b      	lsls	r3, r3, #26
 80018c6:	d501      	bpl.n	80018cc <RTC_ExitInitMode+0x20>
  return HAL_OK;
 80018c8:	2000      	movs	r0, #0
}
 80018ca:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80018cc:	f7fe fce2 	bl	8000294 <HAL_GetTick>
 80018d0:	1b40      	subs	r0, r0, r5
 80018d2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80018d6:	d9f3      	bls.n	80018c0 <RTC_ExitInitMode+0x14>
      return HAL_TIMEOUT;
 80018d8:	2003      	movs	r0, #3
 80018da:	e7f6      	b.n	80018ca <RTC_ExitInitMode+0x1e>

080018dc <RTC_WriteTimeCounter>:
{
 80018dc:	b538      	push	{r3, r4, r5, lr}
 80018de:	4605      	mov	r5, r0
 80018e0:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80018e2:	f7ff ffcc 	bl	800187e <RTC_EnterInitMode>
 80018e6:	b958      	cbnz	r0, 8001900 <RTC_WriteTimeCounter+0x24>
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80018e8:	682b      	ldr	r3, [r5, #0]
 80018ea:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80018ec:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80018ee:	619a      	str	r2, [r3, #24]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80018f0:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80018f2:	61dc      	str	r4, [r3, #28]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80018f4:	f7ff ffda 	bl	80018ac <RTC_ExitInitMode>
    status = HAL_ERROR;
 80018f8:	3800      	subs	r0, #0
 80018fa:	bf18      	it	ne
 80018fc:	2001      	movne	r0, #1
}
 80018fe:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8001900:	2001      	movs	r0, #1
 8001902:	e7fc      	b.n	80018fe <RTC_WriteTimeCounter+0x22>

08001904 <RTC_WriteAlarmCounter>:
{
 8001904:	b538      	push	{r3, r4, r5, lr}
 8001906:	4605      	mov	r5, r0
 8001908:	460c      	mov	r4, r1
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800190a:	f7ff ffb8 	bl	800187e <RTC_EnterInitMode>
 800190e:	b958      	cbnz	r0, 8001928 <RTC_WriteAlarmCounter+0x24>
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001910:	682b      	ldr	r3, [r5, #0]
 8001912:	0c22      	lsrs	r2, r4, #16
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 8001914:	b2a4      	uxth	r4, r4
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8001916:	621a      	str	r2, [r3, #32]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001918:	4628      	mov	r0, r5
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800191a:	625c      	str	r4, [r3, #36]	; 0x24
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800191c:	f7ff ffc6 	bl	80018ac <RTC_ExitInitMode>
    status = HAL_ERROR;
 8001920:	3800      	subs	r0, #0
 8001922:	bf18      	it	ne
 8001924:	2001      	movne	r0, #1
}
 8001926:	bd38      	pop	{r3, r4, r5, pc}
    status = HAL_ERROR;
 8001928:	2001      	movs	r0, #1
 800192a:	e7fc      	b.n	8001926 <RTC_WriteAlarmCounter+0x22>

0800192c <HAL_RTC_SetTime>:
{
 800192c:	b570      	push	{r4, r5, r6, lr}
  if ((hrtc == NULL) || (sTime == NULL))
 800192e:	4604      	mov	r4, r0
 8001930:	b1f0      	cbz	r0, 8001970 <HAL_RTC_SetTime+0x44>
 8001932:	b1e9      	cbz	r1, 8001970 <HAL_RTC_SetTime+0x44>
  __HAL_LOCK(hrtc);
 8001934:	7c03      	ldrb	r3, [r0, #16]
 8001936:	2b01      	cmp	r3, #1
 8001938:	f04f 0502 	mov.w	r5, #2
 800193c:	d049      	beq.n	80019d2 <HAL_RTC_SetTime+0xa6>
 800193e:	2301      	movs	r3, #1
 8001940:	7403      	strb	r3, [r0, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001942:	7445      	strb	r5, [r0, #17]
  if (Format == RTC_FORMAT_BIN)
 8001944:	7808      	ldrb	r0, [r1, #0]
 8001946:	784d      	ldrb	r5, [r1, #1]
 8001948:	7889      	ldrb	r1, [r1, #2]
 800194a:	b99a      	cbnz	r2, 8001974 <HAL_RTC_SetTime+0x48>
                              ((uint32_t)sTime->Minutes * 60U) + \
 800194c:	ebc5 1505 	rsb	r5, r5, r5, lsl #4
 8001950:	00ae      	lsls	r6, r5, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8001952:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8001956:	fb03 6000 	mla	r0, r3, r0, r6
 800195a:	1846      	adds	r6, r0, r1
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 800195c:	4631      	mov	r1, r6
 800195e:	4620      	mov	r0, r4
 8001960:	f7ff ffbc 	bl	80018dc <RTC_WriteTimeCounter>
 8001964:	4605      	mov	r5, r0
 8001966:	b1c0      	cbz	r0, 800199a <HAL_RTC_SetTime+0x6e>
    hrtc->State = HAL_RTC_STATE_ERROR;
 8001968:	2304      	movs	r3, #4
 800196a:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 800196c:	2300      	movs	r3, #0
 800196e:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8001970:	2501      	movs	r5, #1
 8001972:	e02e      	b.n	80019d2 <HAL_RTC_SetTime+0xa6>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001974:	f7ff ff45 	bl	8001802 <RTC_Bcd2ToByte>
 8001978:	4606      	mov	r6, r0
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800197a:	4628      	mov	r0, r5
 800197c:	f7ff ff41 	bl	8001802 <RTC_Bcd2ToByte>
 8001980:	b203      	sxth	r3, r0
 8001982:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
 8001986:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001988:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 800198c:	fb00 3606 	mla	r6, r0, r6, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8001990:	4608      	mov	r0, r1
 8001992:	f7ff ff36 	bl	8001802 <RTC_Bcd2ToByte>
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8001996:	4406      	add	r6, r0
 8001998:	e7e0      	b.n	800195c <HAL_RTC_SetTime+0x30>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 800199a:	6822      	ldr	r2, [r4, #0]
 800199c:	6853      	ldr	r3, [r2, #4]
 800199e:	f023 0305 	bic.w	r3, r3, #5
 80019a2:	6053      	str	r3, [r2, #4]
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80019a4:	4620      	mov	r0, r4
 80019a6:	f7ff ff25 	bl	80017f4 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80019aa:	1c43      	adds	r3, r0, #1
 80019ac:	d00d      	beq.n	80019ca <HAL_RTC_SetTime+0x9e>
      if (counter_alarm < counter_time)
 80019ae:	4286      	cmp	r6, r0
 80019b0:	d90b      	bls.n	80019ca <HAL_RTC_SetTime+0x9e>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80019b2:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 80019b6:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 80019ba:	4620      	mov	r0, r4
 80019bc:	f7ff ffa2 	bl	8001904 <RTC_WriteAlarmCounter>
 80019c0:	b118      	cbz	r0, 80019ca <HAL_RTC_SetTime+0x9e>
          hrtc->State = HAL_RTC_STATE_ERROR;
 80019c2:	2304      	movs	r3, #4
 80019c4:	7463      	strb	r3, [r4, #17]
          __HAL_UNLOCK(hrtc);
 80019c6:	7425      	strb	r5, [r4, #16]
          return HAL_ERROR;
 80019c8:	e7d2      	b.n	8001970 <HAL_RTC_SetTime+0x44>
    hrtc->State = HAL_RTC_STATE_READY;
 80019ca:	2301      	movs	r3, #1
 80019cc:	7463      	strb	r3, [r4, #17]
    __HAL_UNLOCK(hrtc);
 80019ce:	2300      	movs	r3, #0
 80019d0:	7423      	strb	r3, [r4, #16]
}
 80019d2:	4628      	mov	r0, r5
 80019d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080019d8 <HAL_RTC_SetDate>:
{
 80019d8:	b570      	push	{r4, r5, r6, lr}
 80019da:	460d      	mov	r5, r1
  if ((hrtc == NULL) || (sDate == NULL))
 80019dc:	4604      	mov	r4, r0
 80019de:	b358      	cbz	r0, 8001a38 <HAL_RTC_SetDate+0x60>
 80019e0:	b351      	cbz	r1, 8001a38 <HAL_RTC_SetDate+0x60>
  __HAL_LOCK(hrtc);
 80019e2:	7c03      	ldrb	r3, [r0, #16]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	f04f 0002 	mov.w	r0, #2
 80019ea:	d04a      	beq.n	8001a82 <HAL_RTC_SetDate+0xaa>
 80019ec:	2301      	movs	r3, #1
 80019ee:	7423      	strb	r3, [r4, #16]
  hrtc->State = HAL_RTC_STATE_BUSY;
 80019f0:	7460      	strb	r0, [r4, #17]
  if (Format == RTC_FORMAT_BIN)
 80019f2:	78c8      	ldrb	r0, [r1, #3]
 80019f4:	bb12      	cbnz	r2, 8001a3c <HAL_RTC_SetDate+0x64>
    hrtc->DateToUpdate.Year  = sDate->Year;
 80019f6:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80019f8:	784b      	ldrb	r3, [r1, #1]
 80019fa:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80019fc:	788b      	ldrb	r3, [r1, #2]
 80019fe:	73a3      	strb	r3, [r4, #14]
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8001a00:	7ba2      	ldrb	r2, [r4, #14]
 8001a02:	7b61      	ldrb	r1, [r4, #13]
 8001a04:	7be0      	ldrb	r0, [r4, #15]
 8001a06:	f7ff ff05 	bl	8001814 <RTC_WeekDayNum>
 8001a0a:	7320      	strb	r0, [r4, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8001a0c:	7028      	strb	r0, [r5, #0]
  counter_time = RTC_ReadTimeCounter(hrtc);
 8001a0e:	4620      	mov	r0, r4
 8001a10:	f7ff fede 	bl	80017d0 <RTC_ReadTimeCounter>
  if (hours > 24U)
 8001a14:	4b1b      	ldr	r3, [pc, #108]	; (8001a84 <HAL_RTC_SetDate+0xac>)
 8001a16:	4298      	cmp	r0, r3
 8001a18:	d92f      	bls.n	8001a7a <HAL_RTC_SetDate+0xa2>
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8001a1a:	491b      	ldr	r1, [pc, #108]	; (8001a88 <HAL_RTC_SetDate+0xb0>)
 8001a1c:	fbb0 f6f1 	udiv	r6, r0, r1
 8001a20:	fb01 0616 	mls	r6, r1, r6, r0
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8001a24:	4631      	mov	r1, r6
 8001a26:	4620      	mov	r0, r4
 8001a28:	f7ff ff58 	bl	80018dc <RTC_WriteTimeCounter>
 8001a2c:	4605      	mov	r5, r0
 8001a2e:	b188      	cbz	r0, 8001a54 <HAL_RTC_SetDate+0x7c>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001a30:	2304      	movs	r3, #4
 8001a32:	7463      	strb	r3, [r4, #17]
      __HAL_UNLOCK(hrtc);
 8001a34:	2300      	movs	r3, #0
 8001a36:	7423      	strb	r3, [r4, #16]
    return HAL_ERROR;
 8001a38:	2001      	movs	r0, #1
 8001a3a:	e022      	b.n	8001a82 <HAL_RTC_SetDate+0xaa>
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8001a3c:	f7ff fee1 	bl	8001802 <RTC_Bcd2ToByte>
 8001a40:	73e0      	strb	r0, [r4, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8001a42:	7848      	ldrb	r0, [r1, #1]
 8001a44:	f7ff fedd 	bl	8001802 <RTC_Bcd2ToByte>
 8001a48:	7360      	strb	r0, [r4, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8001a4a:	7888      	ldrb	r0, [r1, #2]
 8001a4c:	f7ff fed9 	bl	8001802 <RTC_Bcd2ToByte>
 8001a50:	73a0      	strb	r0, [r4, #14]
 8001a52:	e7d5      	b.n	8001a00 <HAL_RTC_SetDate+0x28>
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8001a54:	4620      	mov	r0, r4
 8001a56:	f7ff fecd 	bl	80017f4 <RTC_ReadAlarmCounter>
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8001a5a:	1c43      	adds	r3, r0, #1
 8001a5c:	d00d      	beq.n	8001a7a <HAL_RTC_SetDate+0xa2>
      if (counter_alarm < counter_time)
 8001a5e:	4286      	cmp	r6, r0
 8001a60:	d90b      	bls.n	8001a7a <HAL_RTC_SetDate+0xa2>
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8001a62:	f500 31a8 	add.w	r1, r0, #86016	; 0x15000
 8001a66:	f501 71c0 	add.w	r1, r1, #384	; 0x180
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f7ff ff4a 	bl	8001904 <RTC_WriteAlarmCounter>
 8001a70:	b118      	cbz	r0, 8001a7a <HAL_RTC_SetDate+0xa2>
          hrtc->State = HAL_RTC_STATE_ERROR;
 8001a72:	2304      	movs	r3, #4
 8001a74:	7463      	strb	r3, [r4, #17]
          __HAL_UNLOCK(hrtc);
 8001a76:	7425      	strb	r5, [r4, #16]
          return HAL_ERROR;
 8001a78:	e7de      	b.n	8001a38 <HAL_RTC_SetDate+0x60>
  hrtc->State = HAL_RTC_STATE_READY ;
 8001a7a:	2301      	movs	r3, #1
  __HAL_UNLOCK(hrtc);
 8001a7c:	2000      	movs	r0, #0
  hrtc->State = HAL_RTC_STATE_READY ;
 8001a7e:	7463      	strb	r3, [r4, #17]
  __HAL_UNLOCK(hrtc);
 8001a80:	7420      	strb	r0, [r4, #16]
}
 8001a82:	bd70      	pop	{r4, r5, r6, pc}
 8001a84:	00015f8f 	.word	0x00015f8f
 8001a88:	00015180 	.word	0x00015180

08001a8c <HAL_RTC_WaitForSynchro>:
{
 8001a8c:	b538      	push	{r3, r4, r5, lr}
  if (hrtc == NULL)
 8001a8e:	4604      	mov	r4, r0
 8001a90:	b1a8      	cbz	r0, 8001abe <HAL_RTC_WaitForSynchro+0x32>
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8001a92:	6802      	ldr	r2, [r0, #0]
 8001a94:	6853      	ldr	r3, [r2, #4]
 8001a96:	f023 0308 	bic.w	r3, r3, #8
 8001a9a:	6053      	str	r3, [r2, #4]
  tickstart = HAL_GetTick();
 8001a9c:	f7fe fbfa 	bl	8000294 <HAL_GetTick>
 8001aa0:	4605      	mov	r5, r0
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	071b      	lsls	r3, r3, #28
 8001aa8:	d501      	bpl.n	8001aae <HAL_RTC_WaitForSynchro+0x22>
  return HAL_OK;
 8001aaa:	2000      	movs	r0, #0
}
 8001aac:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8001aae:	f7fe fbf1 	bl	8000294 <HAL_GetTick>
 8001ab2:	1b40      	subs	r0, r0, r5
 8001ab4:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001ab8:	d9f3      	bls.n	8001aa2 <HAL_RTC_WaitForSynchro+0x16>
      return HAL_TIMEOUT;
 8001aba:	2003      	movs	r0, #3
 8001abc:	e7f6      	b.n	8001aac <HAL_RTC_WaitForSynchro+0x20>
    return HAL_ERROR;
 8001abe:	2001      	movs	r0, #1
 8001ac0:	e7f4      	b.n	8001aac <HAL_RTC_WaitForSynchro+0x20>
	...

08001ac4 <HAL_RTC_Init>:
{
 8001ac4:	b510      	push	{r4, lr}
  if (hrtc == NULL)
 8001ac6:	4604      	mov	r4, r0
 8001ac8:	b170      	cbz	r0, 8001ae8 <HAL_RTC_Init+0x24>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001aca:	7c43      	ldrb	r3, [r0, #17]
 8001acc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001ad0:	b913      	cbnz	r3, 8001ad8 <HAL_RTC_Init+0x14>
    hrtc->Lock = HAL_UNLOCKED;
 8001ad2:	7402      	strb	r2, [r0, #16]
    HAL_RTC_MspInit(hrtc);
 8001ad4:	f003 fb80 	bl	80051d8 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	7463      	strb	r3, [r4, #17]
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8001adc:	4620      	mov	r0, r4
 8001ade:	f7ff ffd5 	bl	8001a8c <HAL_RTC_WaitForSynchro>
 8001ae2:	b118      	cbz	r0, 8001aec <HAL_RTC_Init+0x28>
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001ae4:	2304      	movs	r3, #4
 8001ae6:	7463      	strb	r3, [r4, #17]
    return HAL_ERROR;
 8001ae8:	2001      	movs	r0, #1
 8001aea:	e036      	b.n	8001b5a <HAL_RTC_Init+0x96>
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8001aec:	4620      	mov	r0, r4
 8001aee:	f7ff fec6 	bl	800187e <RTC_EnterInitMode>
 8001af2:	2800      	cmp	r0, #0
 8001af4:	d1f6      	bne.n	8001ae4 <HAL_RTC_Init+0x20>
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001af6:	6822      	ldr	r2, [r4, #0]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001af8:	68a0      	ldr	r0, [r4, #8]
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8001afa:	6853      	ldr	r3, [r2, #4]
 8001afc:	f023 0307 	bic.w	r3, r3, #7
 8001b00:	6053      	str	r3, [r2, #4]
    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8001b02:	4a16      	ldr	r2, [pc, #88]	; (8001b5c <HAL_RTC_Init+0x98>)
 8001b04:	b118      	cbz	r0, 8001b0e <HAL_RTC_Init+0x4a>
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8001b06:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001b08:	f021 0101 	bic.w	r1, r1, #1
 8001b0c:	6311      	str	r1, [r2, #48]	; 0x30
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8001b0e:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001b10:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8001b14:	4303      	orrs	r3, r0
 8001b16:	62d3      	str	r3, [r2, #44]	; 0x2c
    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8001b18:	6860      	ldr	r0, [r4, #4]
 8001b1a:	1c43      	adds	r3, r0, #1
 8001b1c:	d105      	bne.n	8001b2a <HAL_RTC_Init+0x66>
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f7ff fde2 	bl	80016e8 <HAL_RCCEx_GetPeriphCLKFreq>
      if (prescaler == 0U)
 8001b24:	2800      	cmp	r0, #0
 8001b26:	d0dd      	beq.n	8001ae4 <HAL_RTC_Init+0x20>
        prescaler = prescaler - 1U;
 8001b28:	3801      	subs	r0, #1
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8001b2a:	6822      	ldr	r2, [r4, #0]
 8001b2c:	6893      	ldr	r3, [r2, #8]
 8001b2e:	f023 030f 	bic.w	r3, r3, #15
 8001b32:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8001b36:	6093      	str	r3, [r2, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 8001b38:	68d3      	ldr	r3, [r2, #12]
 8001b3a:	0c1b      	lsrs	r3, r3, #16
 8001b3c:	041b      	lsls	r3, r3, #16
 8001b3e:	b280      	uxth	r0, r0
 8001b40:	4318      	orrs	r0, r3
 8001b42:	60d0      	str	r0, [r2, #12]
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8001b44:	4620      	mov	r0, r4
 8001b46:	f7ff feb1 	bl	80018ac <RTC_ExitInitMode>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	b110      	cbz	r0, 8001b54 <HAL_RTC_Init+0x90>
      hrtc->State = HAL_RTC_STATE_ERROR;
 8001b4e:	2204      	movs	r2, #4
 8001b50:	7462      	strb	r2, [r4, #17]
      return HAL_ERROR;
 8001b52:	e7c9      	b.n	8001ae8 <HAL_RTC_Init+0x24>
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001b54:	7363      	strb	r3, [r4, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8001b56:	81e3      	strh	r3, [r4, #14]
    hrtc->State = HAL_RTC_STATE_READY;
 8001b58:	7463      	strb	r3, [r4, #17]
}
 8001b5a:	bd10      	pop	{r4, pc}
 8001b5c:	40006c00 	.word	0x40006c00

08001b60 <HAL_RTCEx_RTCEventCallback>:
 8001b60:	4770      	bx	lr

08001b62 <HAL_RTCEx_RTCEventErrorCallback>:
 8001b62:	4770      	bx	lr

08001b64 <HAL_RTCEx_RTCIRQHandler>:
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTCEx_RTCIRQHandler(RTC_HandleTypeDef *hrtc)
{
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8001b64:	6803      	ldr	r3, [r0, #0]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	07d1      	lsls	r1, r2, #31
{
 8001b6a:	b510      	push	{r4, lr}
 8001b6c:	4604      	mov	r4, r0
  if (__HAL_RTC_SECOND_GET_IT_SOURCE(hrtc, RTC_IT_SEC))
 8001b6e:	d512      	bpl.n	8001b96 <HAL_RTCEx_RTCIRQHandler+0x32>
  {
    /* Get the status of the Interrupt */
    if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_SEC))
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	07d2      	lsls	r2, r2, #31
 8001b74:	d50f      	bpl.n	8001b96 <HAL_RTCEx_RTCIRQHandler+0x32>
    {
      /* Check if Overrun occurred */
      if (__HAL_RTC_SECOND_GET_FLAG(hrtc, RTC_FLAG_OW))
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	075b      	lsls	r3, r3, #29
 8001b7a:	d50d      	bpl.n	8001b98 <HAL_RTCEx_RTCIRQHandler+0x34>
      {
        /* Second error callback */
        HAL_RTCEx_RTCEventErrorCallback(hrtc);
 8001b7c:	f7ff fff1 	bl	8001b62 <HAL_RTCEx_RTCEventErrorCallback>

        /* Clear flag Second */
        __HAL_RTC_OVERFLOW_CLEAR_FLAG(hrtc, RTC_FLAG_OW);
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	f06f 0204 	mvn.w	r2, #4
 8001b86:	605a      	str	r2, [r3, #4]

        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8001b88:	2304      	movs	r3, #4
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_READY;
      }

      /* Clear flag Second */
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8001b8a:	6822      	ldr	r2, [r4, #0]
        hrtc->State = HAL_RTC_STATE_READY;
 8001b8c:	7463      	strb	r3, [r4, #17]
      __HAL_RTC_SECOND_CLEAR_FLAG(hrtc, RTC_FLAG_SEC);
 8001b8e:	6853      	ldr	r3, [r2, #4]
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6053      	str	r3, [r2, #4]
    }
  }
}
 8001b96:	bd10      	pop	{r4, pc}
        HAL_RTCEx_RTCEventCallback(hrtc);
 8001b98:	f7ff ffe2 	bl	8001b60 <HAL_RTCEx_RTCEventCallback>
        hrtc->State = HAL_RTC_STATE_READY;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	e7f4      	b.n	8001b8a <HAL_RTCEx_RTCIRQHandler+0x26>

08001ba0 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8001ba0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001ba4:	461c      	mov	r4, r3
 8001ba6:	4616      	mov	r6, r2
 8001ba8:	460f      	mov	r7, r1
 8001baa:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001bac:	f7fe fb72 	bl	8000294 <HAL_GetTick>
 8001bb0:	4434      	add	r4, r6
 8001bb2:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8001bb4:	f7fe fb6e 	bl	8000294 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001bb8:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f3c3 33cb 	ubfx	r3, r3, #15, #12
  tmp_tickstart = HAL_GetTick();
 8001bc0:	4680      	mov	r8, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001bc2:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001bc4:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8001bc6:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001bc8:	6893      	ldr	r3, [r2, #8]
 8001bca:	ea37 0303 	bics.w	r3, r7, r3
 8001bce:	d001      	beq.n	8001bd4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8001bd0:	2000      	movs	r0, #0
 8001bd2:	e02e      	b.n	8001c32 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8001bd4:	1c73      	adds	r3, r6, #1
 8001bd6:	d0f7      	beq.n	8001bc8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001bd8:	f7fe fb5c 	bl	8000294 <HAL_GetTick>
 8001bdc:	eba0 0008 	sub.w	r0, r0, r8
 8001be0:	42a0      	cmp	r0, r4
 8001be2:	d329      	bcc.n	8001c38 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001be4:	682b      	ldr	r3, [r5, #0]
 8001be6:	685a      	ldr	r2, [r3, #4]
 8001be8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001bec:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001bee:	686a      	ldr	r2, [r5, #4]
 8001bf0:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001bf4:	d10a      	bne.n	8001c0c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8001bf6:	68aa      	ldr	r2, [r5, #8]
 8001bf8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001bfc:	d002      	beq.n	8001c04 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001bfe:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8001c02:	d103      	bne.n	8001c0c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c0a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001c0c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001c0e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001c12:	d107      	bne.n	8001c24 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001c22:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8001c24:	2301      	movs	r3, #1
 8001c26:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
 8001c30:	2003      	movs	r0, #3
}
 8001c32:	b002      	add	sp, #8
 8001c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8001c38:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001c3a:	2b00      	cmp	r3, #0
      count--;
 8001c3c:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001c3e:	bf08      	it	eq
 8001c40:	2400      	moveq	r4, #0
      count--;
 8001c42:	3b01      	subs	r3, #1
 8001c44:	e7be      	b.n	8001bc4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8001c46:	bf00      	nop
 8001c48:	2000002c 	.word	0x2000002c

08001c4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001c4c:	b510      	push	{r4, lr}
 8001c4e:	4613      	mov	r3, r2
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c50:	460a      	mov	r2, r1
 8001c52:	2180      	movs	r1, #128	; 0x80
{
 8001c54:	4604      	mov	r4, r0
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001c56:	f7ff ffa3 	bl	8001ba0 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8001c5a:	b120      	cbz	r0, 8001c66 <SPI_EndRxTxTransaction+0x1a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001c5c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001c5e:	f043 0320 	orr.w	r3, r3, #32
 8001c62:	6563      	str	r3, [r4, #84]	; 0x54
    return HAL_TIMEOUT;
 8001c64:	2003      	movs	r0, #3
  }
  return HAL_OK;
}
 8001c66:	bd10      	pop	{r4, pc}

08001c68 <HAL_SPI_Init>:
{
 8001c68:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8001c6a:	4604      	mov	r4, r0
 8001c6c:	2800      	cmp	r0, #0
 8001c6e:	d051      	beq.n	8001d14 <HAL_SPI_Init+0xac>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001c70:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d14a      	bne.n	8001d0c <HAL_SPI_Init+0xa4>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c76:	6842      	ldr	r2, [r0, #4]
 8001c78:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001c7c:	d000      	beq.n	8001c80 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001c7e:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c80:	2300      	movs	r3, #0
 8001c82:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c84:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001c88:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001c8c:	b923      	cbnz	r3, 8001c98 <HAL_SPI_Init+0x30>
    hspi->Lock = HAL_UNLOCKED;
 8001c8e:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8001c92:	4620      	mov	r0, r4
 8001c94:	f003 fac8 	bl	8005228 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8001c98:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c9a:	68a0      	ldr	r0, [r4, #8]
 8001c9c:	69a1      	ldr	r1, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001ca4:	6813      	ldr	r3, [r2, #0]
 8001ca6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001caa:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cac:	6863      	ldr	r3, [r4, #4]
 8001cae:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8001cb2:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8001cb6:	4303      	orrs	r3, r0
 8001cb8:	68e0      	ldr	r0, [r4, #12]
 8001cba:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8001cbe:	4303      	orrs	r3, r0
 8001cc0:	6920      	ldr	r0, [r4, #16]
 8001cc2:	f000 0002 	and.w	r0, r0, #2
 8001cc6:	4303      	orrs	r3, r0
 8001cc8:	6960      	ldr	r0, [r4, #20]
 8001cca:	f000 0001 	and.w	r0, r0, #1
 8001cce:	4303      	orrs	r3, r0
 8001cd0:	f401 7000 	and.w	r0, r1, #512	; 0x200
 8001cd4:	4303      	orrs	r3, r0
 8001cd6:	69e0      	ldr	r0, [r4, #28]
 8001cd8:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8001cdc:	4303      	orrs	r3, r0
 8001cde:	6a20      	ldr	r0, [r4, #32]
 8001ce0:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8001ce4:	4303      	orrs	r3, r0
 8001ce6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001ce8:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cea:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8001cee:	4303      	orrs	r3, r0
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001cf0:	f001 0104 	and.w	r1, r1, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001cf4:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001cf6:	6051      	str	r1, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cf8:	69d3      	ldr	r3, [r2, #28]
 8001cfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001cfe:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d00:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8001d02:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001d04:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001d06:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8001d0a:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d0c:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001d0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001d12:	e7b5      	b.n	8001c80 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8001d14:	2001      	movs	r0, #1
 8001d16:	e7f8      	b.n	8001d0a <HAL_SPI_Init+0xa2>

08001d18 <HAL_SPI_Transmit>:
{
 8001d18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001d1c:	461f      	mov	r7, r3
  __HAL_LOCK(hspi);
 8001d1e:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8001d22:	2b01      	cmp	r3, #1
{
 8001d24:	4604      	mov	r4, r0
 8001d26:	460d      	mov	r5, r1
 8001d28:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8001d2a:	f000 80a0 	beq.w	8001e6e <HAL_SPI_Transmit+0x156>
 8001d2e:	2301      	movs	r3, #1
 8001d30:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001d34:	f7fe faae 	bl	8000294 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8001d38:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8001d3c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001d3e:	4681      	mov	r9, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8001d40:	b2d8      	uxtb	r0, r3
 8001d42:	f040 8092 	bne.w	8001e6a <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8001d46:	2d00      	cmp	r5, #0
 8001d48:	d061      	beq.n	8001e0e <HAL_SPI_Transmit+0xf6>
 8001d4a:	f1b8 0f00 	cmp.w	r8, #0
 8001d4e:	d05e      	beq.n	8001e0e <HAL_SPI_Transmit+0xf6>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001d50:	2303      	movs	r3, #3
 8001d52:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001d5a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 8001d5e:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001d62:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001d64:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001d66:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d68:	68a3      	ldr	r3, [r4, #8]
 8001d6a:	6826      	ldr	r6, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001d6c:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
  hspi->TxXferSize  = Size;
 8001d72:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d76:	d107      	bne.n	8001d88 <HAL_SPI_Transmit+0x70>
    __HAL_SPI_DISABLE(hspi);
 8001d78:	6833      	ldr	r3, [r6, #0]
 8001d7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001d7e:	6033      	str	r3, [r6, #0]
    SPI_1LINE_TX(hspi);
 8001d80:	6833      	ldr	r3, [r6, #0]
 8001d82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d86:	6033      	str	r3, [r6, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d88:	6833      	ldr	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d8a:	68e2      	ldr	r2, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d8c:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8001d8e:	bf5e      	ittt	pl
 8001d90:	6833      	ldrpl	r3, [r6, #0]
 8001d92:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8001d96:	6033      	strpl	r3, [r6, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d98:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8001d9c:	6863      	ldr	r3, [r4, #4]
 8001d9e:	d13f      	bne.n	8001e20 <HAL_SPI_Transmit+0x108>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001da0:	b113      	cbz	r3, 8001da8 <HAL_SPI_Transmit+0x90>
 8001da2:	f1b8 0f01 	cmp.w	r8, #1
 8001da6:	d107      	bne.n	8001db8 <HAL_SPI_Transmit+0xa0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001da8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001dac:	60f3      	str	r3, [r6, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001dae:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001db0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001db8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	b9a3      	cbnz	r3, 8001de8 <HAL_SPI_Transmit+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001dbe:	464a      	mov	r2, r9
 8001dc0:	4639      	mov	r1, r7
 8001dc2:	4620      	mov	r0, r4
 8001dc4:	f7ff ff42 	bl	8001c4c <SPI_EndRxTxTransaction>
 8001dc8:	2800      	cmp	r0, #0
 8001dca:	d14b      	bne.n	8001e64 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001dcc:	68a3      	ldr	r3, [r4, #8]
 8001dce:	b933      	cbnz	r3, 8001dde <HAL_SPI_Transmit+0xc6>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	6823      	ldr	r3, [r4, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	9201      	str	r2, [sp, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	9301      	str	r3, [sp, #4]
 8001ddc:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001dde:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8001de0:	3800      	subs	r0, #0
 8001de2:	bf18      	it	ne
 8001de4:	2001      	movne	r0, #1
error:
 8001de6:	e012      	b.n	8001e0e <HAL_SPI_Transmit+0xf6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001de8:	6822      	ldr	r2, [r4, #0]
 8001dea:	6893      	ldr	r3, [r2, #8]
 8001dec:	0798      	lsls	r0, r3, #30
 8001dee:	d505      	bpl.n	8001dfc <HAL_SPI_Transmit+0xe4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001df0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001df2:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001df6:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001df8:	6323      	str	r3, [r4, #48]	; 0x30
 8001dfa:	e7d9      	b.n	8001db0 <HAL_SPI_Transmit+0x98>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dfc:	f7fe fa4a 	bl	8000294 <HAL_GetTick>
 8001e00:	eba0 0009 	sub.w	r0, r0, r9
 8001e04:	42b8      	cmp	r0, r7
 8001e06:	d3d7      	bcc.n	8001db8 <HAL_SPI_Transmit+0xa0>
 8001e08:	1c79      	adds	r1, r7, #1
 8001e0a:	d0d5      	beq.n	8001db8 <HAL_SPI_Transmit+0xa0>
          errorcode = HAL_TIMEOUT;
 8001e0c:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001e14:	2300      	movs	r3, #0
 8001e16:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001e1a:	b003      	add	sp, #12
 8001e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001e20:	b113      	cbz	r3, 8001e28 <HAL_SPI_Transmit+0x110>
 8001e22:	f1b8 0f01 	cmp.w	r8, #1
 8001e26:	d108      	bne.n	8001e3a <HAL_SPI_Transmit+0x122>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e28:	782b      	ldrb	r3, [r5, #0]
 8001e2a:	7333      	strb	r3, [r6, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001e2e:	3301      	adds	r3, #1
 8001e30:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001e32:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e34:	3b01      	subs	r3, #1
 8001e36:	b29b      	uxth	r3, r3
 8001e38:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001e3a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d0bd      	beq.n	8001dbe <HAL_SPI_Transmit+0xa6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e42:	6823      	ldr	r3, [r4, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	0792      	lsls	r2, r2, #30
 8001e48:	d503      	bpl.n	8001e52 <HAL_SPI_Transmit+0x13a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e4a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001e4c:	7812      	ldrb	r2, [r2, #0]
 8001e4e:	731a      	strb	r2, [r3, #12]
 8001e50:	e7ec      	b.n	8001e2c <HAL_SPI_Transmit+0x114>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e52:	f7fe fa1f 	bl	8000294 <HAL_GetTick>
 8001e56:	eba0 0009 	sub.w	r0, r0, r9
 8001e5a:	42b8      	cmp	r0, r7
 8001e5c:	d3ed      	bcc.n	8001e3a <HAL_SPI_Transmit+0x122>
 8001e5e:	1c7b      	adds	r3, r7, #1
 8001e60:	d0eb      	beq.n	8001e3a <HAL_SPI_Transmit+0x122>
 8001e62:	e7d3      	b.n	8001e0c <HAL_SPI_Transmit+0xf4>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e64:	2320      	movs	r3, #32
 8001e66:	6563      	str	r3, [r4, #84]	; 0x54
 8001e68:	e7b0      	b.n	8001dcc <HAL_SPI_Transmit+0xb4>
    errorcode = HAL_BUSY;
 8001e6a:	2002      	movs	r0, #2
 8001e6c:	e7cf      	b.n	8001e0e <HAL_SPI_Transmit+0xf6>
  __HAL_LOCK(hspi);
 8001e6e:	2002      	movs	r0, #2
 8001e70:	e7d3      	b.n	8001e1a <HAL_SPI_Transmit+0x102>

08001e72 <HAL_SPI_TransmitReceive>:
{
 8001e72:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001e76:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8001e78:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8001e7c:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8001e80:	2b01      	cmp	r3, #1
{
 8001e82:	4604      	mov	r4, r0
 8001e84:	460d      	mov	r5, r1
 8001e86:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8001e88:	f000 80e0 	beq.w	800204c <HAL_SPI_TransmitReceive+0x1da>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8001e92:	f7fe f9ff 	bl	8000294 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001e96:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8001e9a:	6862      	ldr	r2, [r4, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001e9c:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8001e9e:	4607      	mov	r7, r0
  tmp_state           = hspi->State;
 8001ea0:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001ea2:	d00a      	beq.n	8001eba <HAL_SPI_TransmitReceive+0x48>
 8001ea4:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8001ea8:	f040 80ce 	bne.w	8002048 <HAL_SPI_TransmitReceive+0x1d6>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001eac:	68a3      	ldr	r3, [r4, #8]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f040 80ca 	bne.w	8002048 <HAL_SPI_TransmitReceive+0x1d6>
 8001eb4:	2904      	cmp	r1, #4
 8001eb6:	f040 80c7 	bne.w	8002048 <HAL_SPI_TransmitReceive+0x1d6>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001eba:	2d00      	cmp	r5, #0
 8001ebc:	d03f      	beq.n	8001f3e <HAL_SPI_TransmitReceive+0xcc>
 8001ebe:	f1b9 0f00 	cmp.w	r9, #0
 8001ec2:	d03c      	beq.n	8001f3e <HAL_SPI_TransmitReceive+0xcc>
 8001ec4:	2e00      	cmp	r6, #0
 8001ec6:	d03a      	beq.n	8001f3e <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ec8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001ecc:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001ed0:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ed2:	bf1c      	itt	ne
 8001ed4:	2305      	movne	r3, #5
 8001ed6:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001eda:	2300      	movs	r3, #0
 8001edc:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8001ede:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ee2:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001ee4:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001ee6:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ee8:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8001eea:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001eec:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8001eee:	bf58      	it	pl
 8001ef0:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001ef2:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8001ef4:	bf58      	it	pl
 8001ef6:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 8001efa:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8001efc:	bf58      	it	pl
 8001efe:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001f00:	68e1      	ldr	r1, [r4, #12]
 8001f02:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8001f06:	d151      	bne.n	8001fac <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001f08:	b10a      	cbz	r2, 8001f0e <HAL_SPI_TransmitReceive+0x9c>
 8001f0a:	2e01      	cmp	r6, #1
 8001f0c:	d107      	bne.n	8001f1e <HAL_SPI_TransmitReceive+0xac>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f0e:	f835 2b02 	ldrh.w	r2, [r5], #2
 8001f12:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001f14:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f16:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001f18:	3b01      	subs	r3, #1
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001f1e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001f20:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	b96b      	cbnz	r3, 8001f42 <HAL_SPI_TransmitReceive+0xd0>
 8001f26:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	b953      	cbnz	r3, 8001f42 <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001f2c:	463a      	mov	r2, r7
 8001f2e:	4641      	mov	r1, r8
 8001f30:	4620      	mov	r0, r4
 8001f32:	f7ff fe8b 	bl	8001c4c <SPI_EndRxTxTransaction>
 8001f36:	2800      	cmp	r0, #0
 8001f38:	d07b      	beq.n	8002032 <HAL_SPI_TransmitReceive+0x1c0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001f3a:	2320      	movs	r3, #32
 8001f3c:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001f3e:	2001      	movs	r0, #1
 8001f40:	e02b      	b.n	8001f9a <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001f42:	6821      	ldr	r1, [r4, #0]
 8001f44:	688b      	ldr	r3, [r1, #8]
 8001f46:	079a      	lsls	r2, r3, #30
 8001f48:	d50d      	bpl.n	8001f66 <HAL_SPI_TransmitReceive+0xf4>
 8001f4a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f4c:	b29b      	uxth	r3, r3
 8001f4e:	b153      	cbz	r3, 8001f66 <HAL_SPI_TransmitReceive+0xf4>
 8001f50:	b14d      	cbz	r5, 8001f66 <HAL_SPI_TransmitReceive+0xf4>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001f52:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001f54:	f833 2b02 	ldrh.w	r2, [r3], #2
 8001f58:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001f5a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001f5c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001f64:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001f66:	688a      	ldr	r2, [r1, #8]
 8001f68:	f012 0201 	ands.w	r2, r2, #1
 8001f6c:	d00c      	beq.n	8001f88 <HAL_SPI_TransmitReceive+0x116>
 8001f6e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	b14b      	cbz	r3, 8001f88 <HAL_SPI_TransmitReceive+0x116>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001f74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001f76:	68c9      	ldr	r1, [r1, #12]
 8001f78:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001f7c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001f7e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001f80:	3b01      	subs	r3, #1
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8001f86:	4615      	mov	r5, r2
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001f88:	f7fe f984 	bl	8000294 <HAL_GetTick>
 8001f8c:	1bc0      	subs	r0, r0, r7
 8001f8e:	4540      	cmp	r0, r8
 8001f90:	d3c6      	bcc.n	8001f20 <HAL_SPI_TransmitReceive+0xae>
 8001f92:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001f96:	d0c3      	beq.n	8001f20 <HAL_SPI_TransmitReceive+0xae>
        errorcode = HAL_TIMEOUT;
 8001f98:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8001fa6:	b003      	add	sp, #12
 8001fa8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fac:	b10a      	cbz	r2, 8001fb2 <HAL_SPI_TransmitReceive+0x140>
 8001fae:	2e01      	cmp	r6, #1
 8001fb0:	d108      	bne.n	8001fc4 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001fb2:	782a      	ldrb	r2, [r5, #0]
 8001fb4:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001fb6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fb8:	3301      	adds	r3, #1
 8001fba:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001fbc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fbe:	3b01      	subs	r3, #1
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8001fc4:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001fc6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	b91b      	cbnz	r3, 8001fd4 <HAL_SPI_TransmitReceive+0x162>
 8001fcc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d0ab      	beq.n	8001f2c <HAL_SPI_TransmitReceive+0xba>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001fd4:	6822      	ldr	r2, [r4, #0]
 8001fd6:	6893      	ldr	r3, [r2, #8]
 8001fd8:	079b      	lsls	r3, r3, #30
 8001fda:	d50e      	bpl.n	8001ffa <HAL_SPI_TransmitReceive+0x188>
 8001fdc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	b15b      	cbz	r3, 8001ffa <HAL_SPI_TransmitReceive+0x188>
 8001fe2:	b155      	cbz	r5, 8001ffa <HAL_SPI_TransmitReceive+0x188>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001fe4:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8001fea:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001fec:	3301      	adds	r3, #1
 8001fee:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001ff0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001ff8:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ffa:	6822      	ldr	r2, [r4, #0]
 8001ffc:	6891      	ldr	r1, [r2, #8]
 8001ffe:	f011 0101 	ands.w	r1, r1, #1
 8002002:	d00d      	beq.n	8002020 <HAL_SPI_TransmitReceive+0x1ae>
 8002004:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002006:	b29b      	uxth	r3, r3
 8002008:	b153      	cbz	r3, 8002020 <HAL_SPI_TransmitReceive+0x1ae>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800200a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800200c:	68d2      	ldr	r2, [r2, #12]
 800200e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002010:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002012:	3301      	adds	r3, #1
 8002014:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8002016:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002018:	3b01      	subs	r3, #1
 800201a:	b29b      	uxth	r3, r3
 800201c:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800201e:	460d      	mov	r5, r1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002020:	f7fe f938 	bl	8000294 <HAL_GetTick>
 8002024:	1bc0      	subs	r0, r0, r7
 8002026:	4540      	cmp	r0, r8
 8002028:	d3cd      	bcc.n	8001fc6 <HAL_SPI_TransmitReceive+0x154>
 800202a:	f1b8 3fff 	cmp.w	r8, #4294967295
 800202e:	d0ca      	beq.n	8001fc6 <HAL_SPI_TransmitReceive+0x154>
 8002030:	e7b2      	b.n	8001f98 <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002032:	68a3      	ldr	r3, [r4, #8]
 8002034:	2b00      	cmp	r3, #0
 8002036:	d1b0      	bne.n	8001f9a <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002038:	6823      	ldr	r3, [r4, #0]
 800203a:	9001      	str	r0, [sp, #4]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	9201      	str	r2, [sp, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	9301      	str	r3, [sp, #4]
 8002044:	9b01      	ldr	r3, [sp, #4]
 8002046:	e7a8      	b.n	8001f9a <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 8002048:	2002      	movs	r0, #2
 800204a:	e7a6      	b.n	8001f9a <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 800204c:	2002      	movs	r0, #2
 800204e:	e7aa      	b.n	8001fa6 <HAL_SPI_TransmitReceive+0x134>

08002050 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002050:	4a1a      	ldr	r2, [pc, #104]	; (80020bc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8002052:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002054:	4290      	cmp	r0, r2
 8002056:	d00a      	beq.n	800206e <TIM_Base_SetConfig+0x1e>
 8002058:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800205c:	d007      	beq.n	800206e <TIM_Base_SetConfig+0x1e>
 800205e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002062:	4290      	cmp	r0, r2
 8002064:	d003      	beq.n	800206e <TIM_Base_SetConfig+0x1e>
 8002066:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800206a:	4290      	cmp	r0, r2
 800206c:	d115      	bne.n	800209a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800206e:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8002074:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002076:	4a11      	ldr	r2, [pc, #68]	; (80020bc <TIM_Base_SetConfig+0x6c>)
 8002078:	4290      	cmp	r0, r2
 800207a:	d00a      	beq.n	8002092 <TIM_Base_SetConfig+0x42>
 800207c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002080:	d007      	beq.n	8002092 <TIM_Base_SetConfig+0x42>
 8002082:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8002086:	4290      	cmp	r0, r2
 8002088:	d003      	beq.n	8002092 <TIM_Base_SetConfig+0x42>
 800208a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800208e:	4290      	cmp	r0, r2
 8002090:	d103      	bne.n	800209a <TIM_Base_SetConfig+0x4a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002092:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002094:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002098:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800209a:	694a      	ldr	r2, [r1, #20]
 800209c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020a0:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80020a2:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80020a4:	688b      	ldr	r3, [r1, #8]
 80020a6:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80020a8:	680b      	ldr	r3, [r1, #0]
 80020aa:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80020ac:	4b03      	ldr	r3, [pc, #12]	; (80020bc <TIM_Base_SetConfig+0x6c>)
 80020ae:	4298      	cmp	r0, r3
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80020b0:	bf04      	itt	eq
 80020b2:	690b      	ldreq	r3, [r1, #16]
 80020b4:	6303      	streq	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80020b6:	2301      	movs	r3, #1
 80020b8:	6143      	str	r3, [r0, #20]
}
 80020ba:	4770      	bx	lr
 80020bc:	40012c00 	.word	0x40012c00

080020c0 <HAL_TIM_Base_Init>:
{
 80020c0:	b510      	push	{r4, lr}
  if (htim == NULL)
 80020c2:	4604      	mov	r4, r0
 80020c4:	b330      	cbz	r0, 8002114 <HAL_TIM_Base_Init+0x54>
  if (htim->State == HAL_TIM_STATE_RESET)
 80020c6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80020ca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80020ce:	b91b      	cbnz	r3, 80020d8 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80020d0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80020d4:	f003 f912 	bl	80052fc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80020d8:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020da:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80020dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020e0:	1d21      	adds	r1, r4, #4
 80020e2:	f7ff ffb5 	bl	8002050 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020e6:	2301      	movs	r3, #1
 80020e8:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  return HAL_OK;
 80020ec:	2000      	movs	r0, #0
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ee:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 80020f2:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 80020f6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 80020fa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002102:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002106:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800210a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800210e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8002112:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002114:	2001      	movs	r0, #1
 8002116:	e7fc      	b.n	8002112 <HAL_TIM_Base_Init+0x52>

08002118 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002118:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800211a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800211c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800211e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002122:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002126:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002128:	6082      	str	r2, [r0, #8]
}
 800212a:	bd10      	pop	{r4, pc}

0800212c <HAL_TIM_ConfigClockSource>:
{
 800212c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800212e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002132:	2b01      	cmp	r3, #1
{
 8002134:	4604      	mov	r4, r0
 8002136:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800213a:	d027      	beq.n	800218c <HAL_TIM_ConfigClockSource+0x60>
  htim->State = HAL_TIM_STATE_BUSY;
 800213c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 8002140:	2301      	movs	r3, #1
  tmpsmcr = htim->Instance->SMCR;
 8002142:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8002144:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8002148:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800214a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800214e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 8002152:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8002154:	680b      	ldr	r3, [r1, #0]
 8002156:	2b60      	cmp	r3, #96	; 0x60
 8002158:	d04d      	beq.n	80021f6 <HAL_TIM_ConfigClockSource+0xca>
 800215a:	d832      	bhi.n	80021c2 <HAL_TIM_ConfigClockSource+0x96>
 800215c:	2b40      	cmp	r3, #64	; 0x40
 800215e:	d062      	beq.n	8002226 <HAL_TIM_ConfigClockSource+0xfa>
 8002160:	d815      	bhi.n	800218e <HAL_TIM_ConfigClockSource+0x62>
 8002162:	2b20      	cmp	r3, #32
 8002164:	d003      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x42>
 8002166:	d809      	bhi.n	800217c <HAL_TIM_ConfigClockSource+0x50>
 8002168:	f033 0210 	bics.w	r2, r3, #16
 800216c:	d108      	bne.n	8002180 <HAL_TIM_ConfigClockSource+0x54>
  tmpsmcr = TIMx->SMCR;
 800216e:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8002170:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002174:	4313      	orrs	r3, r2
 8002176:	f043 0307 	orr.w	r3, r3, #7
 800217a:	e020      	b.n	80021be <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 800217c:	2b30      	cmp	r3, #48	; 0x30
 800217e:	d0f6      	beq.n	800216e <HAL_TIM_ConfigClockSource+0x42>
  htim->State = HAL_TIM_STATE_READY;
 8002180:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8002182:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8002184:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8002188:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800218c:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 800218e:	2b50      	cmp	r3, #80	; 0x50
 8002190:	d1f6      	bne.n	8002180 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002192:	684a      	ldr	r2, [r1, #4]
 8002194:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8002196:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002198:	6a05      	ldr	r5, [r0, #32]
 800219a:	f025 0501 	bic.w	r5, r5, #1
 800219e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80021a0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021a2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021aa:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80021ae:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80021b0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80021b2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80021b4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80021b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80021ba:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80021be:	6083      	str	r3, [r0, #8]
}
 80021c0:	e7de      	b.n	8002180 <HAL_TIM_ConfigClockSource+0x54>
  switch (sClockSourceConfig->ClockSource)
 80021c2:	2b70      	cmp	r3, #112	; 0x70
 80021c4:	d00c      	beq.n	80021e0 <HAL_TIM_ConfigClockSource+0xb4>
 80021c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ca:	d1d9      	bne.n	8002180 <HAL_TIM_ConfigClockSource+0x54>
      TIM_ETR_SetConfig(htim->Instance,
 80021cc:	68cb      	ldr	r3, [r1, #12]
 80021ce:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80021d2:	f7ff ffa1 	bl	8002118 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021d6:	6822      	ldr	r2, [r4, #0]
 80021d8:	6893      	ldr	r3, [r2, #8]
 80021da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021de:	e008      	b.n	80021f2 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 80021e0:	68cb      	ldr	r3, [r1, #12]
 80021e2:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80021e6:	f7ff ff97 	bl	8002118 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80021ea:	6822      	ldr	r2, [r4, #0]
 80021ec:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80021ee:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80021f2:	6093      	str	r3, [r2, #8]
      break;
 80021f4:	e7c4      	b.n	8002180 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80021f6:	684d      	ldr	r5, [r1, #4]
 80021f8:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80021fa:	6a01      	ldr	r1, [r0, #32]
 80021fc:	f021 0110 	bic.w	r1, r1, #16
 8002200:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002202:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002204:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002206:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800220a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800220e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002212:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8002216:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002218:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 800221a:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800221c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002220:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 8002224:	e7cb      	b.n	80021be <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002226:	684a      	ldr	r2, [r1, #4]
 8002228:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800222a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800222c:	6a05      	ldr	r5, [r0, #32]
 800222e:	f025 0501 	bic.w	r5, r5, #1
 8002232:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002234:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002236:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800223a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800223e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8002242:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8002244:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8002246:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8002248:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800224a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800224e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8002252:	e7b4      	b.n	80021be <HAL_TIM_ConfigClockSource+0x92>

08002254 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002254:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002256:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800225a:	2b01      	cmp	r3, #1
{
 800225c:	4602      	mov	r2, r0
 800225e:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8002262:	d022      	beq.n	80022aa <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002264:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002266:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 800226a:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800226c:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 800226e:	6898      	ldr	r0, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002270:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002274:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002276:	605c      	str	r4, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002278:	4c0c      	ldr	r4, [pc, #48]	; (80022ac <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 800227a:	42a3      	cmp	r3, r4
 800227c:	d00a      	beq.n	8002294 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800227e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002282:	d007      	beq.n	8002294 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8002284:	f5a4 3494 	sub.w	r4, r4, #75776	; 0x12800
 8002288:	42a3      	cmp	r3, r4
 800228a:	d003      	beq.n	8002294 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800228c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8002290:	42a3      	cmp	r3, r4
 8002292:	d104      	bne.n	800229e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002294:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002296:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800229a:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800229c:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800229e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80022a0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80022a2:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80022a6:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c

  return HAL_OK;
}
 80022aa:	bd30      	pop	{r4, r5, pc}
 80022ac:	40012c00 	.word	0x40012c00

080022b0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022b0:	6803      	ldr	r3, [r0, #0]
 80022b2:	68da      	ldr	r2, [r3, #12]
 80022b4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80022b8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ba:	695a      	ldr	r2, [r3, #20]
 80022bc:	f022 0201 	bic.w	r2, r2, #1
 80022c0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80022c2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80022c4:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80022c6:	bf02      	ittt	eq
 80022c8:	68da      	ldreq	r2, [r3, #12]
 80022ca:	f022 0210 	biceq.w	r2, r2, #16
 80022ce:	60da      	streq	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80022d0:	2320      	movs	r3, #32
 80022d2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80022d6:	2300      	movs	r3, #0
 80022d8:	6303      	str	r3, [r0, #48]	; 0x30
}
 80022da:	4770      	bx	lr

080022dc <UART_SetConfig>:
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022dc:	6803      	ldr	r3, [r0, #0]
 80022de:	68c1      	ldr	r1, [r0, #12]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80022e6:	430a      	orrs	r2, r1
{
 80022e8:	b510      	push	{r4, lr}
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022ea:	611a      	str	r2, [r3, #16]
{
 80022ec:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022ee:	6882      	ldr	r2, [r0, #8]
 80022f0:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 80022f2:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022f4:	4302      	orrs	r2, r0
 80022f6:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80022f8:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 80022fc:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002300:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8002302:	430a      	orrs	r2, r1
 8002304:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	69a1      	ldr	r1, [r4, #24]
 800230a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800230e:	430a      	orrs	r2, r1
 8002310:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002312:	4a0e      	ldr	r2, [pc, #56]	; (800234c <UART_SetConfig+0x70>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d115      	bne.n	8002344 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002318:	f7ff f95e 	bl	80015d8 <HAL_RCC_GetPCLK2Freq>
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800231c:	6862      	ldr	r2, [r4, #4]
 800231e:	2319      	movs	r3, #25
 8002320:	4343      	muls	r3, r0
 8002322:	0092      	lsls	r2, r2, #2
 8002324:	fbb3 f3f2 	udiv	r3, r3, r2
 8002328:	2264      	movs	r2, #100	; 0x64
 800232a:	fbb3 f1f2 	udiv	r1, r3, r2
 800232e:	fb02 3311 	mls	r3, r2, r1, r3
 8002332:	6820      	ldr	r0, [r4, #0]
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	3332      	adds	r3, #50	; 0x32
 8002338:	fbb3 f3f2 	udiv	r3, r3, r2
 800233c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8002340:	6083      	str	r3, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8002342:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8002344:	f7ff f938 	bl	80015b8 <HAL_RCC_GetPCLK1Freq>
 8002348:	e7e8      	b.n	800231c <UART_SetConfig+0x40>
 800234a:	bf00      	nop
 800234c:	40013800 	.word	0x40013800

08002350 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8002350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002352:	4604      	mov	r4, r0
 8002354:	460e      	mov	r6, r1
 8002356:	4617      	mov	r7, r2
 8002358:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800235a:	6822      	ldr	r2, [r4, #0]
 800235c:	6813      	ldr	r3, [r2, #0]
 800235e:	ea36 0303 	bics.w	r3, r6, r3
 8002362:	d101      	bne.n	8002368 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8002364:	2000      	movs	r0, #0
 8002366:	e014      	b.n	8002392 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8002368:	1c6b      	adds	r3, r5, #1
 800236a:	d0f7      	beq.n	800235c <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800236c:	b995      	cbnz	r5, 8002394 <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800236e:	6823      	ldr	r3, [r4, #0]
 8002370:	68da      	ldr	r2, [r3, #12]
 8002372:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002376:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	f022 0201 	bic.w	r2, r2, #1
 800237e:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8002380:	2320      	movs	r3, #32
 8002382:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002386:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 800238a:	2300      	movs	r3, #0
 800238c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002390:	2003      	movs	r0, #3
}
 8002392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002394:	f7fd ff7e 	bl	8000294 <HAL_GetTick>
 8002398:	1bc0      	subs	r0, r0, r7
 800239a:	4285      	cmp	r5, r0
 800239c:	d2dd      	bcs.n	800235a <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 800239e:	e7e6      	b.n	800236e <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

080023a0 <HAL_UART_Init>:
{
 80023a0:	b510      	push	{r4, lr}
  if (huart == NULL)
 80023a2:	4604      	mov	r4, r0
 80023a4:	b340      	cbz	r0, 80023f8 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80023a6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80023aa:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80023ae:	b91b      	cbnz	r3, 80023b8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80023b0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80023b4:	f002 ffc6 	bl	8005344 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80023b8:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80023ba:	2324      	movs	r3, #36	; 0x24
 80023bc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80023c0:	68d3      	ldr	r3, [r2, #12]
 80023c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80023c6:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80023c8:	4620      	mov	r0, r4
 80023ca:	f7ff ff87 	bl	80022dc <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023ce:	6823      	ldr	r3, [r4, #0]
 80023d0:	691a      	ldr	r2, [r3, #16]
 80023d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023d6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023de:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80023e0:	68da      	ldr	r2, [r3, #12]
 80023e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80023e6:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023e8:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80023ea:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023ec:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80023ee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80023f2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80023f6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80023f8:	2001      	movs	r0, #1
 80023fa:	e7fc      	b.n	80023f6 <HAL_UART_Init+0x56>

080023fc <HAL_UART_Transmit>:
{
 80023fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002400:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002402:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002406:	2b20      	cmp	r3, #32
{
 8002408:	4604      	mov	r4, r0
 800240a:	460e      	mov	r6, r1
 800240c:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800240e:	d148      	bne.n	80024a2 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8002410:	2900      	cmp	r1, #0
 8002412:	d044      	beq.n	800249e <HAL_UART_Transmit+0xa2>
 8002414:	2a00      	cmp	r2, #0
 8002416:	d042      	beq.n	800249e <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8002418:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800241c:	2b01      	cmp	r3, #1
 800241e:	d040      	beq.n	80024a2 <HAL_UART_Transmit+0xa6>
 8002420:	2301      	movs	r3, #1
 8002422:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002426:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002428:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242a:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800242c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8002430:	f7fd ff30 	bl	8000294 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002434:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8002436:	84a7      	strh	r7, [r4, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002438:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 800243c:	4680      	mov	r8, r0
    huart->TxXferCount = Size;
 800243e:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002440:	d103      	bne.n	800244a <HAL_UART_Transmit+0x4e>
 8002442:	6923      	ldr	r3, [r4, #16]
 8002444:	b90b      	cbnz	r3, 800244a <HAL_UART_Transmit+0x4e>
 8002446:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002448:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 800244a:	2300      	movs	r3, #0
 800244c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8002450:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8002452:	b29b      	uxth	r3, r3
 8002454:	b953      	cbnz	r3, 800246c <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002456:	464b      	mov	r3, r9
 8002458:	4642      	mov	r2, r8
 800245a:	2140      	movs	r1, #64	; 0x40
 800245c:	4620      	mov	r0, r4
 800245e:	f7ff ff77 	bl	8002350 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002462:	b950      	cbnz	r0, 800247a <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8002464:	2320      	movs	r3, #32
 8002466:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 800246a:	e007      	b.n	800247c <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800246c:	464b      	mov	r3, r9
 800246e:	4642      	mov	r2, r8
 8002470:	2180      	movs	r1, #128	; 0x80
 8002472:	4620      	mov	r0, r4
 8002474:	f7ff ff6c 	bl	8002350 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8002478:	b110      	cbz	r0, 8002480 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 800247a:	2003      	movs	r0, #3
}
 800247c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8002480:	6822      	ldr	r2, [r4, #0]
 8002482:	b94e      	cbnz	r6, 8002498 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002484:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002488:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800248c:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 800248e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8002490:	3901      	subs	r1, #1
 8002492:	b289      	uxth	r1, r1
 8002494:	84e1      	strh	r1, [r4, #38]	; 0x26
 8002496:	e7db      	b.n	8002450 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002498:	f816 3b01 	ldrb.w	r3, [r6], #1
 800249c:	e7f6      	b.n	800248c <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 800249e:	2001      	movs	r0, #1
 80024a0:	e7ec      	b.n	800247c <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80024a2:	2002      	movs	r0, #2
 80024a4:	e7ea      	b.n	800247c <HAL_UART_Transmit+0x80>

080024a6 <HAL_UART_TxCpltCallback>:
 80024a6:	4770      	bx	lr

080024a8 <HAL_UART_ErrorCallback>:
 80024a8:	4770      	bx	lr

080024aa <UART_DMAAbortOnError>:
{
 80024aa:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024ac:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80024b2:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 80024b4:	f7ff fff8 	bl	80024a8 <HAL_UART_ErrorCallback>
}
 80024b8:	bd08      	pop	{r3, pc}

080024ba <HAL_UARTEx_RxEventCallback>:
}
 80024ba:	4770      	bx	lr

080024bc <UART_Receive_IT>:
{
 80024bc:	b513      	push	{r0, r1, r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80024be:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 80024c2:	2b22      	cmp	r3, #34	; 0x22
 80024c4:	d149      	bne.n	800255a <UART_Receive_IT+0x9e>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024c6:	6881      	ldr	r1, [r0, #8]
 80024c8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80024ca:	6802      	ldr	r2, [r0, #0]
 80024cc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 80024d0:	d133      	bne.n	800253a <UART_Receive_IT+0x7e>
 80024d2:	6901      	ldr	r1, [r0, #16]
 80024d4:	2900      	cmp	r1, #0
 80024d6:	d133      	bne.n	8002540 <UART_Receive_IT+0x84>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80024d8:	6852      	ldr	r2, [r2, #4]
 80024da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80024de:	f823 2b02 	strh.w	r2, [r3], #2
    if (--huart->RxXferCount == 0U)
 80024e2:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
      huart->pRxBuffPtr += 1U;
 80024e4:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 80024e6:	3c01      	subs	r4, #1
 80024e8:	b2a4      	uxth	r4, r4
 80024ea:	85c4      	strh	r4, [r0, #46]	; 0x2e
 80024ec:	bb1c      	cbnz	r4, 8002536 <UART_Receive_IT+0x7a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80024ee:	6803      	ldr	r3, [r0, #0]
 80024f0:	68da      	ldr	r2, [r3, #12]
 80024f2:	f022 0220 	bic.w	r2, r2, #32
 80024f6:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80024fe:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	f022 0201 	bic.w	r2, r2, #1
 8002506:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8002508:	2220      	movs	r2, #32
 800250a:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800250e:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002510:	2a01      	cmp	r2, #1
 8002512:	d11f      	bne.n	8002554 <UART_Receive_IT+0x98>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002514:	6304      	str	r4, [r0, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	f022 0210 	bic.w	r2, r2, #16
 800251c:	60da      	str	r2, [r3, #12]
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	06d2      	lsls	r2, r2, #27
 8002522:	d505      	bpl.n	8002530 <UART_Receive_IT+0x74>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002524:	9401      	str	r4, [sp, #4]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	9201      	str	r2, [sp, #4]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	9301      	str	r3, [sp, #4]
 800252e:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002530:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8002532:	f7ff ffc2 	bl	80024ba <HAL_UARTEx_RxEventCallback>
 8002536:	2000      	movs	r0, #0
 8002538:	e010      	b.n	800255c <UART_Receive_IT+0xa0>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800253a:	b939      	cbnz	r1, 800254c <UART_Receive_IT+0x90>
 800253c:	6901      	ldr	r1, [r0, #16]
 800253e:	b929      	cbnz	r1, 800254c <UART_Receive_IT+0x90>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002540:	6852      	ldr	r2, [r2, #4]
 8002542:	b2d2      	uxtb	r2, r2
 8002544:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr += 1U;
 8002546:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002548:	3301      	adds	r3, #1
 800254a:	e7ca      	b.n	80024e2 <UART_Receive_IT+0x26>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800254c:	6852      	ldr	r2, [r2, #4]
 800254e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002552:	e7f7      	b.n	8002544 <UART_Receive_IT+0x88>
       HAL_UART_RxCpltCallback(huart);
 8002554:	f002 fb78 	bl	8004c48 <HAL_UART_RxCpltCallback>
 8002558:	e7ed      	b.n	8002536 <UART_Receive_IT+0x7a>
    return HAL_BUSY;
 800255a:	2002      	movs	r0, #2
}
 800255c:	b002      	add	sp, #8
 800255e:	bd10      	pop	{r4, pc}

08002560 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002560:	6803      	ldr	r3, [r0, #0]
{
 8002562:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002564:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002566:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002568:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 800256a:	f012 0f0f 	tst.w	r2, #15
{
 800256e:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8002570:	d108      	bne.n	8002584 <HAL_UART_IRQHandler+0x24>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002572:	0695      	lsls	r5, r2, #26
 8002574:	d55f      	bpl.n	8002636 <HAL_UART_IRQHandler+0xd6>
 8002576:	068d      	lsls	r5, r1, #26
 8002578:	d55d      	bpl.n	8002636 <HAL_UART_IRQHandler+0xd6>
}
 800257a:	b003      	add	sp, #12
 800257c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      UART_Receive_IT(huart);
 8002580:	f7ff bf9c 	b.w	80024bc <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002584:	f005 0001 	and.w	r0, r5, #1
 8002588:	f401 7590 	and.w	r5, r1, #288	; 0x120
 800258c:	4305      	orrs	r5, r0
 800258e:	d052      	beq.n	8002636 <HAL_UART_IRQHandler+0xd6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002590:	07d5      	lsls	r5, r2, #31
 8002592:	d505      	bpl.n	80025a0 <HAL_UART_IRQHandler+0x40>
 8002594:	05cb      	lsls	r3, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002596:	bf42      	ittt	mi
 8002598:	6c23      	ldrmi	r3, [r4, #64]	; 0x40
 800259a:	f043 0301 	orrmi.w	r3, r3, #1
 800259e:	6423      	strmi	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025a0:	0755      	lsls	r5, r2, #29
 80025a2:	d504      	bpl.n	80025ae <HAL_UART_IRQHandler+0x4e>
 80025a4:	b118      	cbz	r0, 80025ae <HAL_UART_IRQHandler+0x4e>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025a6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025a8:	f043 0302 	orr.w	r3, r3, #2
 80025ac:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80025ae:	0793      	lsls	r3, r2, #30
 80025b0:	d504      	bpl.n	80025bc <HAL_UART_IRQHandler+0x5c>
 80025b2:	b118      	cbz	r0, 80025bc <HAL_UART_IRQHandler+0x5c>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025b4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025b6:	f043 0304 	orr.w	r3, r3, #4
 80025ba:	6423      	str	r3, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80025bc:	0715      	lsls	r5, r2, #28
 80025be:	d507      	bpl.n	80025d0 <HAL_UART_IRQHandler+0x70>
 80025c0:	f001 0320 	and.w	r3, r1, #32
 80025c4:	4303      	orrs	r3, r0
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025c6:	bf1e      	ittt	ne
 80025c8:	6c23      	ldrne	r3, [r4, #64]	; 0x40
 80025ca:	f043 0308 	orrne.w	r3, r3, #8
 80025ce:	6423      	strne	r3, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80025d2:	b353      	cbz	r3, 800262a <HAL_UART_IRQHandler+0xca>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025d4:	0692      	lsls	r2, r2, #26
 80025d6:	d504      	bpl.n	80025e2 <HAL_UART_IRQHandler+0x82>
 80025d8:	068b      	lsls	r3, r1, #26
 80025da:	d502      	bpl.n	80025e2 <HAL_UART_IRQHandler+0x82>
        UART_Receive_IT(huart);
 80025dc:	4620      	mov	r0, r4
 80025de:	f7ff ff6d 	bl	80024bc <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025e2:	6823      	ldr	r3, [r4, #0]
 80025e4:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025e6:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025ec:	f005 0508 	and.w	r5, r5, #8
 80025f0:	431d      	orrs	r5, r3
        UART_EndRxTransfer(huart);
 80025f2:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025f4:	d01b      	beq.n	800262e <HAL_UART_IRQHandler+0xce>
        UART_EndRxTransfer(huart);
 80025f6:	f7ff fe5b 	bl	80022b0 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	0655      	lsls	r5, r2, #25
 8002600:	d510      	bpl.n	8002624 <HAL_UART_IRQHandler+0xc4>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002602:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8002604:	6ba0      	ldr	r0, [r4, #56]	; 0x38
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002606:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800260a:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 800260c:	b150      	cbz	r0, 8002624 <HAL_UART_IRQHandler+0xc4>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800260e:	4b53      	ldr	r3, [pc, #332]	; (800275c <HAL_UART_IRQHandler+0x1fc>)
 8002610:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002612:	f7fe f94d 	bl	80008b0 <HAL_DMA_Abort_IT>
 8002616:	b140      	cbz	r0, 800262a <HAL_UART_IRQHandler+0xca>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002618:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800261a:	6b43      	ldr	r3, [r0, #52]	; 0x34
}
 800261c:	b003      	add	sp, #12
 800261e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002622:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8002624:	4620      	mov	r0, r4
 8002626:	f7ff ff3f 	bl	80024a8 <HAL_UART_ErrorCallback>
}
 800262a:	b003      	add	sp, #12
 800262c:	bd30      	pop	{r4, r5, pc}
        HAL_UART_ErrorCallback(huart);
 800262e:	f7ff ff3b 	bl	80024a8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002632:	6425      	str	r5, [r4, #64]	; 0x40
 8002634:	e7f9      	b.n	800262a <HAL_UART_IRQHandler+0xca>
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002636:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002638:	2801      	cmp	r0, #1
 800263a:	d155      	bne.n	80026e8 <HAL_UART_IRQHandler+0x188>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800263c:	06d0      	lsls	r0, r2, #27
 800263e:	d553      	bpl.n	80026e8 <HAL_UART_IRQHandler+0x188>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002640:	06cd      	lsls	r5, r1, #27
 8002642:	d551      	bpl.n	80026e8 <HAL_UART_IRQHandler+0x188>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002644:	2100      	movs	r1, #0
 8002646:	9101      	str	r1, [sp, #4]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	9201      	str	r2, [sp, #4]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	9201      	str	r2, [sp, #4]
 8002650:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	f012 0240 	ands.w	r2, r2, #64	; 0x40
 8002658:	d02a      	beq.n	80026b0 <HAL_UART_IRQHandler+0x150>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800265a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 800265c:	6802      	ldr	r2, [r0, #0]
 800265e:	6852      	ldr	r2, [r2, #4]
 8002660:	b292      	uxth	r2, r2
      if (  (nb_remaining_rx_data > 0U)
 8002662:	2a00      	cmp	r2, #0
 8002664:	d0e1      	beq.n	800262a <HAL_UART_IRQHandler+0xca>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002666:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8002668:	4295      	cmp	r5, r2
 800266a:	d9de      	bls.n	800262a <HAL_UART_IRQHandler+0xca>
        huart->RxXferCount = nb_remaining_rx_data;
 800266c:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800266e:	6982      	ldr	r2, [r0, #24]
 8002670:	2a20      	cmp	r2, #32
 8002672:	d015      	beq.n	80026a0 <HAL_UART_IRQHandler+0x140>
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800267a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800267c:	695a      	ldr	r2, [r3, #20]
 800267e:	f022 0201 	bic.w	r2, r2, #1
 8002682:	615a      	str	r2, [r3, #20]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800268a:	615a      	str	r2, [r3, #20]
          huart->RxState = HAL_UART_STATE_READY;
 800268c:	2220      	movs	r2, #32
 800268e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002692:	6321      	str	r1, [r4, #48]	; 0x30
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002694:	68da      	ldr	r2, [r3, #12]
 8002696:	f022 0210 	bic.w	r2, r2, #16
 800269a:	60da      	str	r2, [r3, #12]
          (void)HAL_DMA_Abort(huart->hdmarx);
 800269c:	f7fe f8ea 	bl	8000874 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80026a0:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 80026a2:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80026a4:	1ac9      	subs	r1, r1, r3
 80026a6:	b289      	uxth	r1, r1
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80026a8:	4620      	mov	r0, r4
 80026aa:	f7ff ff06 	bl	80024ba <HAL_UARTEx_RxEventCallback>
 80026ae:	e7bc      	b.n	800262a <HAL_UART_IRQHandler+0xca>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026b0:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80026b2:	b288      	uxth	r0, r1
      if (  (huart->RxXferCount > 0U)
 80026b4:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
 80026b6:	b289      	uxth	r1, r1
 80026b8:	2900      	cmp	r1, #0
 80026ba:	d0b6      	beq.n	800262a <HAL_UART_IRQHandler+0xca>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026bc:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 80026be:	1a09      	subs	r1, r1, r0
 80026c0:	b289      	uxth	r1, r1
          &&(nb_rx_data > 0U) )
 80026c2:	2900      	cmp	r1, #0
 80026c4:	d0b1      	beq.n	800262a <HAL_UART_IRQHandler+0xca>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026c6:	68d8      	ldr	r0, [r3, #12]
 80026c8:	f420 7090 	bic.w	r0, r0, #288	; 0x120
 80026cc:	60d8      	str	r0, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026ce:	6958      	ldr	r0, [r3, #20]
 80026d0:	f020 0001 	bic.w	r0, r0, #1
 80026d4:	6158      	str	r0, [r3, #20]
        huart->RxState = HAL_UART_STATE_READY;
 80026d6:	2020      	movs	r0, #32
 80026d8:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026dc:	6322      	str	r2, [r4, #48]	; 0x30
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026de:	68da      	ldr	r2, [r3, #12]
 80026e0:	f022 0210 	bic.w	r2, r2, #16
 80026e4:	60da      	str	r2, [r3, #12]
 80026e6:	e7df      	b.n	80026a8 <HAL_UART_IRQHandler+0x148>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80026e8:	0610      	lsls	r0, r2, #24
 80026ea:	d526      	bpl.n	800273a <HAL_UART_IRQHandler+0x1da>
 80026ec:	060d      	lsls	r5, r1, #24
 80026ee:	d524      	bpl.n	800273a <HAL_UART_IRQHandler+0x1da>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80026f0:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 80026f4:	2a21      	cmp	r2, #33	; 0x21
 80026f6:	d198      	bne.n	800262a <HAL_UART_IRQHandler+0xca>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f8:	68a1      	ldr	r1, [r4, #8]
 80026fa:	6a22      	ldr	r2, [r4, #32]
 80026fc:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8002700:	d116      	bne.n	8002730 <HAL_UART_IRQHandler+0x1d0>
 8002702:	6921      	ldr	r1, [r4, #16]
 8002704:	b9a1      	cbnz	r1, 8002730 <HAL_UART_IRQHandler+0x1d0>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002706:	f832 1b02 	ldrh.w	r1, [r2], #2
 800270a:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800270e:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002710:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 8002712:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8002714:	3a01      	subs	r2, #1
 8002716:	b292      	uxth	r2, r2
 8002718:	84e2      	strh	r2, [r4, #38]	; 0x26
 800271a:	2a00      	cmp	r2, #0
 800271c:	d185      	bne.n	800262a <HAL_UART_IRQHandler+0xca>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800271e:	68da      	ldr	r2, [r3, #12]
 8002720:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002724:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800272c:	60da      	str	r2, [r3, #12]
 800272e:	e77c      	b.n	800262a <HAL_UART_IRQHandler+0xca>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002730:	1c51      	adds	r1, r2, #1
 8002732:	6221      	str	r1, [r4, #32]
 8002734:	7812      	ldrb	r2, [r2, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	e7eb      	b.n	8002712 <HAL_UART_IRQHandler+0x1b2>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800273a:	0650      	lsls	r0, r2, #25
 800273c:	f57f af75 	bpl.w	800262a <HAL_UART_IRQHandler+0xca>
 8002740:	064a      	lsls	r2, r1, #25
 8002742:	f57f af72 	bpl.w	800262a <HAL_UART_IRQHandler+0xca>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800274c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800274e:	2320      	movs	r3, #32
 8002750:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8002754:	4620      	mov	r0, r4
 8002756:	f7ff fea6 	bl	80024a6 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800275a:	e766      	b.n	800262a <HAL_UART_IRQHandler+0xca>
 800275c:	080024ab 	.word	0x080024ab

08002760 <UART_Start_Receive_IT>:
{
 8002760:	4603      	mov	r3, r0
  huart->RxXferCount = Size;
 8002762:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->RxXferSize = Size;
 8002764:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->pRxBuffPtr = pData;
 8002766:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002768:	2222      	movs	r2, #34	; 0x22
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800276a:	2000      	movs	r0, #0
 800276c:	6418      	str	r0, [r3, #64]	; 0x40
  __HAL_UNLOCK(huart);
 800276e:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68da      	ldr	r2, [r3, #12]
 800277a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800277e:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002780:	695a      	ldr	r2, [r3, #20]
 8002782:	f042 0201 	orr.w	r2, r2, #1
 8002786:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002788:	68da      	ldr	r2, [r3, #12]
 800278a:	f042 0220 	orr.w	r2, r2, #32
 800278e:	60da      	str	r2, [r3, #12]
}
 8002790:	4770      	bx	lr

08002792 <HAL_UART_Receive_IT>:
{
 8002792:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8002794:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
 8002798:	2e20      	cmp	r6, #32
 800279a:	d110      	bne.n	80027be <HAL_UART_Receive_IT+0x2c>
    if ((pData == NULL) || (Size == 0U))
 800279c:	b161      	cbz	r1, 80027b8 <HAL_UART_Receive_IT+0x26>
 800279e:	b15a      	cbz	r2, 80027b8 <HAL_UART_Receive_IT+0x26>
    __HAL_LOCK(huart);
 80027a0:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 80027a4:	2c01      	cmp	r4, #1
 80027a6:	d00a      	beq.n	80027be <HAL_UART_Receive_IT+0x2c>
 80027a8:	2401      	movs	r4, #1
 80027aa:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ae:	2400      	movs	r4, #0
 80027b0:	6304      	str	r4, [r0, #48]	; 0x30
}
 80027b2:	bc70      	pop	{r4, r5, r6}
    return(UART_Start_Receive_IT(huart, pData, Size));
 80027b4:	f7ff bfd4 	b.w	8002760 <UART_Start_Receive_IT>
      return HAL_ERROR;
 80027b8:	2001      	movs	r0, #1
}
 80027ba:	bc70      	pop	{r4, r5, r6}
 80027bc:	4770      	bx	lr
    return HAL_BUSY;
 80027be:	2002      	movs	r0, #2
 80027c0:	e7fb      	b.n	80027ba <HAL_UART_Receive_IT+0x28>
	...

080027c4 <disk_status>:
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80027c4:	4b03      	ldr	r3, [pc, #12]	; (80027d4 <disk_status+0x10>)
 80027c6:	181a      	adds	r2, r3, r0
 80027c8:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80027cc:	7a10      	ldrb	r0, [r2, #8]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	4718      	bx	r3
 80027d4:	200000e4 	.word	0x200000e4

080027d8 <disk_initialize>:
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
  DSTATUS stat = RES_OK;
  
  if(disk.is_initialized[pdrv] == 0)
 80027d8:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <disk_initialize+0x1c>)
 80027da:	5c1a      	ldrb	r2, [r3, r0]
 80027dc:	b942      	cbnz	r2, 80027f0 <disk_initialize+0x18>
  { 
    disk.is_initialized[pdrv] = 1;
 80027de:	2201      	movs	r2, #1
 80027e0:	541a      	strb	r2, [r3, r0]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80027e2:	181a      	adds	r2, r3, r0
 80027e4:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 80027e8:	7a10      	ldrb	r0, [r2, #8]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4718      	bx	r3
  }
  return stat;
}
 80027f0:	2000      	movs	r0, #0
 80027f2:	4770      	bx	lr
 80027f4:	200000e4 	.word	0x200000e4

080027f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80027f8:	b430      	push	{r4, r5}
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80027fa:	4c05      	ldr	r4, [pc, #20]	; (8002810 <disk_read+0x18>)
 80027fc:	1825      	adds	r5, r4, r0
 80027fe:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 8002802:	6860      	ldr	r0, [r4, #4]
 8002804:	6884      	ldr	r4, [r0, #8]
 8002806:	7a28      	ldrb	r0, [r5, #8]
 8002808:	46a4      	mov	ip, r4
  return res;
}
 800280a:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800280c:	4760      	bx	ip
 800280e:	bf00      	nop
 8002810:	200000e4 	.word	0x200000e4

08002814 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8002814:	b430      	push	{r4, r5}
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002816:	4c05      	ldr	r4, [pc, #20]	; (800282c <disk_write+0x18>)
 8002818:	1825      	adds	r5, r4, r0
 800281a:	eb04 0480 	add.w	r4, r4, r0, lsl #2
 800281e:	6860      	ldr	r0, [r4, #4]
 8002820:	68c4      	ldr	r4, [r0, #12]
 8002822:	7a28      	ldrb	r0, [r5, #8]
 8002824:	46a4      	mov	ip, r4
  return res;
}
 8002826:	bc30      	pop	{r4, r5}
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8002828:	4760      	bx	ip
 800282a:	bf00      	nop
 800282c:	200000e4 	.word	0x200000e4

08002830 <disk_ioctl>:
	void *buff		/* Buffer to send/receive control data */
)
{
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <disk_ioctl+0x14>)
{
 8002832:	b410      	push	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002834:	181c      	adds	r4, r3, r0
 8002836:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 800283a:	7a20      	ldrb	r0, [r4, #8]
 800283c:	685b      	ldr	r3, [r3, #4]
  return res;
}
 800283e:	bc10      	pop	{r4}
  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	4718      	bx	r3
 8002844:	200000e4 	.word	0x200000e4

08002848 <mem_set>:
/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
	BYTE *d = (BYTE*)dst;

	while (cnt--)
 8002848:	4402      	add	r2, r0
 800284a:	4290      	cmp	r0, r2
 800284c:	d100      	bne.n	8002850 <mem_set+0x8>
		*d++ = (BYTE)val;
}
 800284e:	4770      	bx	lr
		*d++ = (BYTE)val;
 8002850:	f800 1b01 	strb.w	r1, [r0], #1
 8002854:	e7f9      	b.n	800284a <mem_set+0x2>
	...

08002858 <inc_lock>:
{
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
		if (Files[i].fs == dp->fs &&
 8002858:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 800285c:	4a26      	ldr	r2, [pc, #152]	; (80028f8 <inc_lock+0xa0>)
{
 800285e:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (Files[i].fs == dp->fs &&
 8002860:	681e      	ldr	r6, [r3, #0]
 8002862:	6813      	ldr	r3, [r2, #0]
 8002864:	429e      	cmp	r6, r3
 8002866:	d10b      	bne.n	8002880 <inc_lock+0x28>
 8002868:	f241 0408 	movw	r4, #4104	; 0x1008
 800286c:	6855      	ldr	r5, [r2, #4]
 800286e:	5904      	ldr	r4, [r0, r4]
 8002870:	42a5      	cmp	r5, r4
 8002872:	d105      	bne.n	8002880 <inc_lock+0x28>
			Files[i].clu == dp->sclust &&
			Files[i].idx == dp->index) break;
 8002874:	f241 0406 	movw	r4, #4102	; 0x1006
			Files[i].clu == dp->sclust &&
 8002878:	5b05      	ldrh	r5, [r0, r4]
 800287a:	8914      	ldrh	r4, [r2, #8]
 800287c:	42a5      	cmp	r5, r4
 800287e:	d023      	beq.n	80028c8 <inc_lock+0x70>
		if (Files[i].fs == dp->fs &&
 8002880:	68d4      	ldr	r4, [r2, #12]
 8002882:	42b4      	cmp	r4, r6
 8002884:	d10b      	bne.n	800289e <inc_lock+0x46>
 8002886:	f241 0508 	movw	r5, #4104	; 0x1008
 800288a:	6917      	ldr	r7, [r2, #16]
 800288c:	5945      	ldr	r5, [r0, r5]
 800288e:	42af      	cmp	r7, r5
 8002890:	d105      	bne.n	800289e <inc_lock+0x46>
			Files[i].clu == dp->sclust &&
 8002892:	f241 0506 	movw	r5, #4102	; 0x1006
 8002896:	8a97      	ldrh	r7, [r2, #20]
 8002898:	5b45      	ldrh	r5, [r0, r5]
 800289a:	42af      	cmp	r7, r5
 800289c:	d01e      	beq.n	80028dc <inc_lock+0x84>
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800289e:	b10b      	cbz	r3, 80028a4 <inc_lock+0x4c>
 80028a0:	b9d4      	cbnz	r4, 80028d8 <inc_lock+0x80>
 80028a2:	2301      	movs	r3, #1
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
		Files[i].fs = dp->fs;
 80028a4:	240c      	movs	r4, #12
 80028a6:	435c      	muls	r4, r3
 80028a8:	1915      	adds	r5, r2, r4
 80028aa:	5116      	str	r6, [r2, r4]
		Files[i].clu = dp->sclust;
 80028ac:	f241 0408 	movw	r4, #4104	; 0x1008
 80028b0:	5904      	ldr	r4, [r0, r4]
 80028b2:	606c      	str	r4, [r5, #4]
		Files[i].idx = dp->index;
 80028b4:	f241 0406 	movw	r4, #4102	; 0x1006
 80028b8:	5b00      	ldrh	r0, [r0, r4]
 80028ba:	8128      	strh	r0, [r5, #8]
		Files[i].ctr = 0;
 80028bc:	2000      	movs	r0, #0
 80028be:	8168      	strh	r0, [r5, #10]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80028c0:	b171      	cbz	r1, 80028e0 <inc_lock+0x88>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80028c2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028c6:	e011      	b.n	80028ec <inc_lock+0x94>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80028c8:	2300      	movs	r3, #0
	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80028ca:	b149      	cbz	r1, 80028e0 <inc_lock+0x88>
 80028cc:	210c      	movs	r1, #12
 80028ce:	fb01 2103 	mla	r1, r1, r3, r2
 80028d2:	8949      	ldrh	r1, [r1, #10]
 80028d4:	2900      	cmp	r1, #0
 80028d6:	d0f4      	beq.n	80028c2 <inc_lock+0x6a>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80028d8:	2000      	movs	r0, #0
 80028da:	e00c      	b.n	80028f6 <inc_lock+0x9e>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80028dc:	2301      	movs	r3, #1
 80028de:	e7f4      	b.n	80028ca <inc_lock+0x72>
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80028e0:	210c      	movs	r1, #12
 80028e2:	fb01 2103 	mla	r1, r1, r3, r2
 80028e6:	8949      	ldrh	r1, [r1, #10]
 80028e8:	3101      	adds	r1, #1
 80028ea:	b289      	uxth	r1, r1
 80028ec:	200c      	movs	r0, #12
 80028ee:	fb00 2203 	mla	r2, r0, r3, r2

	return i + 1;
 80028f2:	1c58      	adds	r0, r3, #1
	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80028f4:	8151      	strh	r1, [r2, #10]
}
 80028f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028f8:	200000c8 	.word	0x200000c8

080028fc <get_fileinfo>:
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
	if (dp->sect) {		/* Get SFN */
 80028fc:	f241 0210 	movw	r2, #4112	; 0x1010
{
 8002900:	b570      	push	{r4, r5, r6, lr}
	if (dp->sect) {		/* Get SFN */
 8002902:	5882      	ldr	r2, [r0, r2]
	p = fno->fname;
 8002904:	f101 0309 	add.w	r3, r1, #9
	if (dp->sect) {		/* Get SFN */
 8002908:	b322      	cbz	r2, 8002954 <get_fileinfo+0x58>
		dir = dp->dir;
 800290a:	f241 0214 	movw	r2, #4116	; 0x1014
		i = 0;
 800290e:	2400      	movs	r4, #0
		dir = dp->dir;
 8002910:	5882      	ldr	r2, [r0, r2]
		while (i < 11) {		/* Copy name body and extension */
			c = (TCHAR)dir[i++];
			if (c == ' ') continue;				/* Skip padding spaces */
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8002912:	262e      	movs	r6, #46	; 0x2e
 8002914:	1e55      	subs	r5, r2, #1
			c = (TCHAR)dir[i++];
 8002916:	f815 0f01 	ldrb.w	r0, [r5, #1]!
			if (c == ' ') continue;				/* Skip padding spaces */
 800291a:	2820      	cmp	r0, #32
			c = (TCHAR)dir[i++];
 800291c:	f104 0401 	add.w	r4, r4, #1
			if (c == ' ') continue;				/* Skip padding spaces */
 8002920:	d008      	beq.n	8002934 <get_fileinfo+0x38>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8002922:	2805      	cmp	r0, #5
 8002924:	bf08      	it	eq
 8002926:	20e5      	moveq	r0, #229	; 0xe5
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8002928:	2c09      	cmp	r4, #9
 800292a:	bf08      	it	eq
 800292c:	f803 6b01 	strbeq.w	r6, [r3], #1
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8002930:	f803 0b01 	strb.w	r0, [r3], #1
		while (i < 11) {		/* Copy name body and extension */
 8002934:	2c0b      	cmp	r4, #11
 8002936:	d1ee      	bne.n	8002916 <get_fileinfo+0x1a>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8002938:	7ad0      	ldrb	r0, [r2, #11]
 800293a:	7208      	strb	r0, [r1, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 800293c:	69d0      	ldr	r0, [r2, #28]
 800293e:	6008      	str	r0, [r1, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8002940:	7e54      	ldrb	r4, [r2, #25]
 8002942:	7e10      	ldrb	r0, [r2, #24]
 8002944:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
 8002948:	8088      	strh	r0, [r1, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 800294a:	7dd0      	ldrb	r0, [r2, #23]
 800294c:	7d92      	ldrb	r2, [r2, #22]
 800294e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002952:	80ca      	strh	r2, [r1, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8002958:	bd70      	pop	{r4, r5, r6, pc}

0800295a <get_ldnumber>:
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800295a:	6802      	ldr	r2, [r0, #0]
{
 800295c:	b510      	push	{r4, lr}
	if (*path) {	/* If the pointer is not a null */
 800295e:	b152      	cbz	r2, 8002976 <get_ldnumber+0x1c>
 8002960:	4611      	mov	r1, r2
 8002962:	460b      	mov	r3, r1
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8002964:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002968:	2c20      	cmp	r4, #32
 800296a:	d90c      	bls.n	8002986 <get_ldnumber+0x2c>
 800296c:	2c3a      	cmp	r4, #58	; 0x3a
 800296e:	d1f8      	bne.n	8002962 <get_ldnumber+0x8>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
			tp = *path;
			i = *tp++ - '0'; 
 8002970:	1c51      	adds	r1, r2, #1
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8002972:	428b      	cmp	r3, r1
 8002974:	d002      	beq.n	800297c <get_ldnumber+0x22>
	int vol = -1;
 8002976:	f04f 30ff 	mov.w	r0, #4294967295
 800297a:	e005      	b.n	8002988 <get_ldnumber+0x2e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800297c:	7812      	ldrb	r2, [r2, #0]
 800297e:	2a30      	cmp	r2, #48	; 0x30
 8002980:	d1f9      	bne.n	8002976 <get_ldnumber+0x1c>
					vol = (int)i;
					*path = ++tt;
 8002982:	3301      	adds	r3, #1
 8002984:	6003      	str	r3, [r0, #0]
			return vol;
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8002986:	2000      	movs	r0, #0
#endif
	}
	return vol;
}
 8002988:	bd10      	pop	{r4, pc}

0800298a <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 800298a:	b508      	push	{r3, lr}
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 800298c:	b1b8      	cbz	r0, 80029be <validate+0x34>
 800298e:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	b19b      	cbz	r3, 80029be <validate+0x34>
 8002996:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 800299a:	7812      	ldrb	r2, [r2, #0]
 800299c:	b17a      	cbz	r2, 80029be <validate+0x34>
 800299e:	f241 0206 	movw	r2, #4102	; 0x1006
 80029a2:	5a99      	ldrh	r1, [r3, r2]
 80029a4:	f241 0204 	movw	r2, #4100	; 0x1004
 80029a8:	5a82      	ldrh	r2, [r0, r2]
 80029aa:	4291      	cmp	r1, r2
 80029ac:	d107      	bne.n	80029be <validate+0x34>
 80029ae:	f241 0201 	movw	r2, #4097	; 0x1001
 80029b2:	5c98      	ldrb	r0, [r3, r2]
 80029b4:	f7ff ff06 	bl	80027c4 <disk_status>
 80029b8:	f010 0001 	ands.w	r0, r0, #1
 80029bc:	d000      	beq.n	80029c0 <validate+0x36>
		return FR_INVALID_OBJECT;
 80029be:	2009      	movs	r0, #9

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
}
 80029c0:	bd08      	pop	{r3, pc}

080029c2 <ld_clust.isra.0>:
	cl = LD_WORD(dir + DIR_FstClusLO);
 80029c2:	7eca      	ldrb	r2, [r1, #27]
 80029c4:	7e8b      	ldrb	r3, [r1, #26]
	if (fs->fs_type == FS_FAT32)
 80029c6:	2803      	cmp	r0, #3
	cl = LD_WORD(dir + DIR_FstClusLO);
 80029c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 80029cc:	bf01      	itttt	eq
 80029ce:	7d48      	ldrbeq	r0, [r1, #21]
 80029d0:	7d0a      	ldrbeq	r2, [r1, #20]
 80029d2:	ea42 2200 	orreq.w	r2, r2, r0, lsl #8
 80029d6:	ea43 4302 	orreq.w	r3, r3, r2, lsl #16
}
 80029da:	4618      	mov	r0, r3
 80029dc:	4770      	bx	lr

080029de <sync_window.part.0>:
FRESULT sync_window (
 80029de:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		wsect = fs->winsect;	/* Current sector number */
 80029e2:	f241 032c 	movw	r3, #4140	; 0x102c
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80029e6:	f241 0801 	movw	r8, #4097	; 0x1001
		wsect = fs->winsect;	/* Current sector number */
 80029ea:	58c6      	ldr	r6, [r0, r3]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80029ec:	4601      	mov	r1, r0
FRESULT sync_window (
 80029ee:	4604      	mov	r4, r0
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 80029f0:	2301      	movs	r3, #1
 80029f2:	f810 0008 	ldrb.w	r0, [r0, r8]
 80029f6:	4632      	mov	r2, r6
 80029f8:	f7ff ff0c 	bl	8002814 <disk_write>
 80029fc:	4605      	mov	r5, r0
 80029fe:	bb10      	cbnz	r0, 8002a46 <sync_window.part.0+0x68>
			fs->wflag = 0;
 8002a00:	f241 0304 	movw	r3, #4100	; 0x1004
 8002a04:	54e0      	strb	r0, [r4, r3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8002a06:	f504 5381 	add.w	r3, r4, #4128	; 0x1020
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002a10:	1ab2      	subs	r2, r6, r2
 8002a12:	58e1      	ldr	r1, [r4, r3]
 8002a14:	428a      	cmp	r2, r1
 8002a16:	d207      	bcs.n	8002a28 <sync_window.part.0+0x4a>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002a18:	f241 0203 	movw	r2, #4099	; 0x1003
					wsect += fs->fsize;
 8002a1c:	18e7      	adds	r7, r4, r3
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002a1e:	f814 9002 	ldrb.w	r9, [r4, r2]
 8002a22:	f1b9 0f01 	cmp.w	r9, #1
 8002a26:	d802      	bhi.n	8002a2e <sync_window.part.0+0x50>
}
 8002a28:	4628      	mov	r0, r5
 8002a2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					wsect += fs->fsize;
 8002a2e:	683b      	ldr	r3, [r7, #0]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002a30:	f814 0008 	ldrb.w	r0, [r4, r8]
					wsect += fs->fsize;
 8002a34:	441e      	add	r6, r3
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8002a36:	4632      	mov	r2, r6
 8002a38:	2301      	movs	r3, #1
 8002a3a:	4621      	mov	r1, r4
 8002a3c:	f7ff feea 	bl	8002814 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8002a40:	f109 39ff 	add.w	r9, r9, #4294967295
 8002a44:	e7ed      	b.n	8002a22 <sync_window.part.0+0x44>
			res = FR_DISK_ERR;
 8002a46:	2501      	movs	r5, #1
 8002a48:	e7ee      	b.n	8002a28 <sync_window.part.0+0x4a>

08002a4a <sync_window>:
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8002a4a:	f241 0304 	movw	r3, #4100	; 0x1004
 8002a4e:	5cc3      	ldrb	r3, [r0, r3]
 8002a50:	b10b      	cbz	r3, 8002a56 <sync_window+0xc>
 8002a52:	f7ff bfc4 	b.w	80029de <sync_window.part.0>
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	4770      	bx	lr

08002a5a <move_window>:
{
 8002a5a:	b538      	push	{r3, r4, r5, lr}
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002a5c:	f241 032c 	movw	r3, #4140	; 0x102c
{
 8002a60:	4605      	mov	r5, r0
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002a62:	58c3      	ldr	r3, [r0, r3]
 8002a64:	428b      	cmp	r3, r1
{
 8002a66:	460c      	mov	r4, r1
	if (sector != fs->winsect) {	/* Window offset changed? */
 8002a68:	d014      	beq.n	8002a94 <move_window+0x3a>
		res = sync_window(fs);		/* Write-back changes */
 8002a6a:	f7ff ffee 	bl	8002a4a <sync_window>
		if (res == FR_OK) {			/* Fill sector window with new data */
 8002a6e:	b980      	cbnz	r0, 8002a92 <move_window+0x38>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8002a70:	f241 0001 	movw	r0, #4097	; 0x1001
 8002a74:	2301      	movs	r3, #1
 8002a76:	4622      	mov	r2, r4
 8002a78:	5c28      	ldrb	r0, [r5, r0]
 8002a7a:	4629      	mov	r1, r5
 8002a7c:	f7ff febc 	bl	80027f8 <disk_read>
			fs->winsect = sector;
 8002a80:	f241 032c 	movw	r3, #4140	; 0x102c
				res = FR_DISK_ERR;
 8002a84:	2800      	cmp	r0, #0
 8002a86:	bf18      	it	ne
 8002a88:	f04f 34ff 	movne.w	r4, #4294967295
			fs->winsect = sector;
 8002a8c:	50ec      	str	r4, [r5, r3]
				res = FR_DISK_ERR;
 8002a8e:	bf18      	it	ne
 8002a90:	2001      	movne	r0, #1
}
 8002a92:	bd38      	pop	{r3, r4, r5, pc}
	FRESULT res = FR_OK;
 8002a94:	2000      	movs	r0, #0
 8002a96:	e7fc      	b.n	8002a92 <move_window+0x38>

08002a98 <check_fs>:
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8002a98:	f241 0304 	movw	r3, #4100	; 0x1004
 8002a9c:	2200      	movs	r2, #0
{
 8002a9e:	b510      	push	{r4, lr}
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8002aa0:	54c2      	strb	r2, [r0, r3]
 8002aa2:	f241 032c 	movw	r3, #4140	; 0x102c
 8002aa6:	f04f 32ff 	mov.w	r2, #4294967295
 8002aaa:	50c2      	str	r2, [r0, r3]
{
 8002aac:	4604      	mov	r4, r0
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8002aae:	f7ff ffd4 	bl	8002a5a <move_window>
 8002ab2:	b9c0      	cbnz	r0, 8002ae6 <check_fs+0x4e>
	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8002ab4:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8002ab8:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8002abc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002ac0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d110      	bne.n	8002aea <check_fs+0x52>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8002ac8:	f8d4 3036 	ldr.w	r3, [r4, #54]	; 0x36
 8002acc:	4a08      	ldr	r2, [pc, #32]	; (8002af0 <check_fs+0x58>)
 8002ace:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d006      	beq.n	8002ae4 <check_fs+0x4c>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8002ad6:	f8d4 0052 	ldr.w	r0, [r4, #82]	; 0x52
 8002ada:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return 3;
 8002ade:	1a80      	subs	r0, r0, r2
 8002ae0:	bf18      	it	ne
 8002ae2:	2001      	movne	r0, #1
}
 8002ae4:	bd10      	pop	{r4, pc}
		return 3;
 8002ae6:	2003      	movs	r0, #3
 8002ae8:	e7fc      	b.n	8002ae4 <check_fs+0x4c>
		return 2;
 8002aea:	2002      	movs	r0, #2
 8002aec:	e7fa      	b.n	8002ae4 <check_fs+0x4c>
 8002aee:	bf00      	nop
 8002af0:	00544146 	.word	0x00544146

08002af4 <find_volume>:
{
 8002af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*rfs = 0;
 8002af8:	2300      	movs	r3, #0
 8002afa:	6003      	str	r3, [r0, #0]
{
 8002afc:	b085      	sub	sp, #20
 8002afe:	4606      	mov	r6, r0
	vol = get_ldnumber(path);
 8002b00:	4608      	mov	r0, r1
{
 8002b02:	4615      	mov	r5, r2
	vol = get_ldnumber(path);
 8002b04:	f7ff ff29 	bl	800295a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002b08:	1e07      	subs	r7, r0, #0
 8002b0a:	f2c0 816a 	blt.w	8002de2 <find_volume+0x2ee>
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8002b0e:	4bb8      	ldr	r3, [pc, #736]	; (8002df0 <find_volume+0x2fc>)
 8002b10:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002b14:	2c00      	cmp	r4, #0
 8002b16:	f000 8166 	beq.w	8002de6 <find_volume+0x2f2>
	*rfs = fs;							/* Return pointer to the file system object */
 8002b1a:	6034      	str	r4, [r6, #0]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8002b1c:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
 8002b20:	7833      	ldrb	r3, [r6, #0]
 8002b22:	b17b      	cbz	r3, 8002b44 <find_volume+0x50>
		stat = disk_status(fs->drv);
 8002b24:	f241 0301 	movw	r3, #4097	; 0x1001
 8002b28:	5ce0      	ldrb	r0, [r4, r3]
 8002b2a:	f7ff fe4b 	bl	80027c4 <disk_status>
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8002b2e:	07c1      	lsls	r1, r0, #31
 8002b30:	d408      	bmi.n	8002b44 <find_volume+0x50>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8002b32:	b11d      	cbz	r5, 8002b3c <find_volume+0x48>
 8002b34:	f010 0504 	ands.w	r5, r0, #4
 8002b38:	d000      	beq.n	8002b3c <find_volume+0x48>
				return FR_WRITE_PROTECTED;
 8002b3a:	250a      	movs	r5, #10
}
 8002b3c:	4628      	mov	r0, r5
 8002b3e:	b005      	add	sp, #20
 8002b40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	fs->fs_type = 0;					/* Clear the file system object */
 8002b44:	2300      	movs	r3, #0
 8002b46:	7033      	strb	r3, [r6, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8002b48:	f241 0301 	movw	r3, #4097	; 0x1001
 8002b4c:	b2f8      	uxtb	r0, r7
 8002b4e:	54e0      	strb	r0, [r4, r3]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8002b50:	f7ff fe42 	bl	80027d8 <disk_initialize>
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8002b54:	07c2      	lsls	r2, r0, #31
 8002b56:	f100 8148 	bmi.w	8002dea <find_volume+0x2f6>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8002b5a:	b10d      	cbz	r5, 8002b60 <find_volume+0x6c>
 8002b5c:	0743      	lsls	r3, r0, #29
 8002b5e:	d4ec      	bmi.n	8002b3a <find_volume+0x46>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8002b60:	f241 0301 	movw	r3, #4097	; 0x1001
 8002b64:	f241 070a 	movw	r7, #4106	; 0x100a
 8002b68:	5ce0      	ldrb	r0, [r4, r3]
 8002b6a:	19e2      	adds	r2, r4, r7
 8002b6c:	2102      	movs	r1, #2
 8002b6e:	f7ff fe5f 	bl	8002830 <disk_ioctl>
 8002b72:	4605      	mov	r5, r0
 8002b74:	b108      	cbz	r0, 8002b7a <find_volume+0x86>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8002b76:	2501      	movs	r5, #1
 8002b78:	e7e0      	b.n	8002b3c <find_volume+0x48>
 8002b7a:	5be3      	ldrh	r3, [r4, r7]
 8002b7c:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8002b80:	b29b      	uxth	r3, r3
 8002b82:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8002b86:	d8f6      	bhi.n	8002b76 <find_volume+0x82>
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8002b88:	4601      	mov	r1, r0
 8002b8a:	4620      	mov	r0, r4
 8002b8c:	f7ff ff84 	bl	8002a98 <check_fs>
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8002b90:	2801      	cmp	r0, #1
 8002b92:	f040 8108 	bne.w	8002da6 <find_volume+0x2b2>
 8002b96:	466f      	mov	r7, sp
 8002b98:	f504 73df 	add.w	r3, r4, #446	; 0x1be
 8002b9c:	f504 70ff 	add.w	r0, r4, #510	; 0x1fe
 8002ba0:	4639      	mov	r1, r7
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8002ba2:	791a      	ldrb	r2, [r3, #4]
 8002ba4:	b102      	cbz	r2, 8002ba8 <find_volume+0xb4>
 8002ba6:	689a      	ldr	r2, [r3, #8]
 8002ba8:	f841 2b04 	str.w	r2, [r1], #4
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8002bac:	3310      	adds	r3, #16
 8002bae:	4298      	cmp	r0, r3
 8002bb0:	d1f7      	bne.n	8002ba2 <find_volume+0xae>
 8002bb2:	f04f 0900 	mov.w	r9, #0
			bsect = br[i];
 8002bb6:	f857 8b04 	ldr.w	r8, [r7], #4
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8002bba:	f1b8 0f00 	cmp.w	r8, #0
 8002bbe:	f000 80e8 	beq.w	8002d92 <find_volume+0x29e>
 8002bc2:	4641      	mov	r1, r8
 8002bc4:	4620      	mov	r0, r4
 8002bc6:	f7ff ff67 	bl	8002a98 <check_fs>
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8002bca:	2800      	cmp	r0, #0
 8002bcc:	f040 80e2 	bne.w	8002d94 <find_volume+0x2a0>
	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8002bd0:	f241 020a 	movw	r2, #4106	; 0x100a
 8002bd4:	7b21      	ldrb	r1, [r4, #12]
 8002bd6:	7ae3      	ldrb	r3, [r4, #11]
 8002bd8:	5aa0      	ldrh	r0, [r4, r2]
 8002bda:	5ea2      	ldrsh	r2, [r4, r2]
 8002bdc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002be0:	b21b      	sxth	r3, r3
 8002be2:	4293      	cmp	r3, r2
 8002be4:	f040 80e3 	bne.w	8002dae <find_volume+0x2ba>
	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8002be8:	7de3      	ldrb	r3, [r4, #23]
 8002bea:	7da1      	ldrb	r1, [r4, #22]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8002bec:	f894 9010 	ldrb.w	r9, [r4, #16]
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8002bf0:	ea51 2103 	orrs.w	r1, r1, r3, lsl #8
	fs->fsize = fasize;
 8002bf4:	f241 0318 	movw	r3, #4120	; 0x1018
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8002bf8:	bf08      	it	eq
 8002bfa:	6a61      	ldreq	r1, [r4, #36]	; 0x24
	fs->fsize = fasize;
 8002bfc:	50e1      	str	r1, [r4, r3]
	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8002bfe:	f241 0303 	movw	r3, #4099	; 0x1003
 8002c02:	f804 9003 	strb.w	r9, [r4, r3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8002c06:	f109 33ff 	add.w	r3, r9, #4294967295
 8002c0a:	2b01      	cmp	r3, #1
 8002c0c:	f200 80cf 	bhi.w	8002dae <find_volume+0x2ba>
	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8002c10:	7b67      	ldrb	r7, [r4, #13]
 8002c12:	f241 0302 	movw	r3, #4098	; 0x1002
 8002c16:	54e7      	strb	r7, [r4, r3]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8002c18:	2f00      	cmp	r7, #0
 8002c1a:	f000 80c8 	beq.w	8002dae <find_volume+0x2ba>
 8002c1e:	1e7b      	subs	r3, r7, #1
 8002c20:	423b      	tst	r3, r7
 8002c22:	f040 80c4 	bne.w	8002dae <find_volume+0x2ba>
	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8002c26:	7ca3      	ldrb	r3, [r4, #18]
 8002c28:	f894 e011 	ldrb.w	lr, [r4, #17]
 8002c2c:	ea4e 2e03 	orr.w	lr, lr, r3, lsl #8
 8002c30:	f241 0308 	movw	r3, #4104	; 0x1008
 8002c34:	f824 e003 	strh.w	lr, [r4, r3]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8002c38:	0943      	lsrs	r3, r0, #5
 8002c3a:	fbbe fcf3 	udiv	ip, lr, r3
 8002c3e:	fb03 e31c 	mls	r3, r3, ip, lr
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f040 80b2 	bne.w	8002dae <find_volume+0x2ba>
	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8002c4a:	7d22      	ldrb	r2, [r4, #20]
 8002c4c:	7ce3      	ldrb	r3, [r4, #19]
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8002c4e:	f894 a00f 	ldrb.w	sl, [r4, #15]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8002c52:	ea53 2302 	orrs.w	r3, r3, r2, lsl #8
	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8002c56:	7ba2      	ldrb	r2, [r4, #14]
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8002c58:	bf08      	it	eq
 8002c5a:	6a23      	ldreq	r3, [r4, #32]
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8002c5c:	ea52 220a 	orrs.w	r2, r2, sl, lsl #8
 8002c60:	f000 80a5 	beq.w	8002dae <find_volume+0x2ba>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8002c64:	fb01 f909 	mul.w	r9, r1, r9
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8002c68:	4494      	add	ip, r2
 8002c6a:	44cc      	add	ip, r9
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8002c6c:	4563      	cmp	r3, ip
 8002c6e:	f0c0 809e 	bcc.w	8002dae <find_volume+0x2ba>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8002c72:	eba3 030c 	sub.w	r3, r3, ip
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8002c76:	42bb      	cmp	r3, r7
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8002c78:	fbb3 faf7 	udiv	sl, r3, r7
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8002c7c:	f0c0 8097 	bcc.w	8002dae <find_volume+0x2ba>
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8002c80:	f640 73f5 	movw	r3, #4085	; 0xff5
 8002c84:	459a      	cmp	sl, r3
 8002c86:	f240 8096 	bls.w	8002db6 <find_volume+0x2c2>
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8002c8a:	f64f 77f5 	movw	r7, #65525	; 0xfff5
 8002c8e:	45ba      	cmp	sl, r7
 8002c90:	bf94      	ite	ls
 8002c92:	2702      	movls	r7, #2
 8002c94:	2703      	movhi	r7, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8002c96:	f10a 0302 	add.w	r3, sl, #2
 8002c9a:	f241 0a14 	movw	sl, #4116	; 0x1014
	if (fmt == FS_FAT32) {
 8002c9e:	2f03      	cmp	r7, #3
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8002ca0:	f844 300a 	str.w	r3, [r4, sl]
	fs->volbase = bsect;								/* Volume start sector */
 8002ca4:	f241 0a1c 	movw	sl, #4124	; 0x101c
 8002ca8:	f844 800a 	str.w	r8, [r4, sl]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8002cac:	eb02 0a08 	add.w	sl, r2, r8
 8002cb0:	f504 5281 	add.w	r2, r4, #4128	; 0x1020
 8002cb4:	f8c2 a000 	str.w	sl, [r2]
	fs->database = bsect + sysect;						/* Data start sector */
 8002cb8:	eb0c 0208 	add.w	r2, ip, r8
 8002cbc:	f241 0c28 	movw	ip, #4136	; 0x1028
 8002cc0:	f844 200c 	str.w	r2, [r4, ip]
	if (fmt == FS_FAT32) {
 8002cc4:	d179      	bne.n	8002dba <find_volume+0x2c6>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8002cc6:	f1be 0f00 	cmp.w	lr, #0
 8002cca:	d170      	bne.n	8002dae <find_volume+0x2ba>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8002ccc:	f241 0c24 	movw	ip, #4132	; 0x1024
 8002cd0:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002cd2:	f844 200c 	str.w	r2, [r4, ip]
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8002cd6:	009b      	lsls	r3, r3, #2
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8002cd8:	1e42      	subs	r2, r0, #1
 8002cda:	4413      	add	r3, r2
 8002cdc:	fbb3 f0f0 	udiv	r0, r3, r0
 8002ce0:	4288      	cmp	r0, r1
 8002ce2:	d864      	bhi.n	8002dae <find_volume+0x2ba>
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8002ce4:	f241 0a10 	movw	sl, #4112	; 0x1010
 8002ce8:	f241 090c 	movw	r9, #4108	; 0x100c
 8002cec:	f04f 33ff 	mov.w	r3, #4294967295
	fs->fsi_flag = 0x80;
 8002cf0:	f241 0b05 	movw	fp, #4101	; 0x1005
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8002cf4:	f844 300a 	str.w	r3, [r4, sl]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8002cf8:	2f03      	cmp	r7, #3
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8002cfa:	f844 3009 	str.w	r3, [r4, r9]
	fs->fsi_flag = 0x80;
 8002cfe:	f04f 0380 	mov.w	r3, #128	; 0x80
 8002d02:	f804 300b 	strb.w	r3, [r4, fp]
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8002d06:	d12e      	bne.n	8002d66 <find_volume+0x272>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8002d08:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
 8002d0c:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8002d10:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d126      	bne.n	8002d66 <find_volume+0x272>
		&& move_window(fs, bsect + 1) == FR_OK)
 8002d18:	f108 0101 	add.w	r1, r8, #1
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	f7ff fe9c 	bl	8002a5a <move_window>
 8002d22:	bb00      	cbnz	r0, 8002d66 <find_volume+0x272>
		fs->fsi_flag = 0;
 8002d24:	f804 000b 	strb.w	r0, [r4, fp]
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8002d28:	f894 21ff 	ldrb.w	r2, [r4, #511]	; 0x1ff
 8002d2c:	f894 31fe 	ldrb.w	r3, [r4, #510]	; 0x1fe
 8002d30:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002d34:	f64a 2255 	movw	r2, #43605	; 0xaa55
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d114      	bne.n	8002d66 <find_volume+0x272>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8002d3c:	6822      	ldr	r2, [r4, #0]
 8002d3e:	4b2d      	ldr	r3, [pc, #180]	; (8002df4 <find_volume+0x300>)
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d110      	bne.n	8002d66 <find_volume+0x272>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8002d44:	f103 53ff 	add.w	r3, r3, #534773760	; 0x1fe00000
 8002d48:	f8d4 21e4 	ldr.w	r2, [r4, #484]	; 0x1e4
 8002d4c:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8002d50:	3320      	adds	r3, #32
 8002d52:	429a      	cmp	r2, r3
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8002d54:	bf01      	itttt	eq
 8002d56:	f8d4 31e8 	ldreq.w	r3, [r4, #488]	; 0x1e8
 8002d5a:	f844 300a 	streq.w	r3, [r4, sl]
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8002d5e:	f8d4 31ec 	ldreq.w	r3, [r4, #492]	; 0x1ec
 8002d62:	f844 3009 	streq.w	r3, [r4, r9]
	fs->id = ++Fsid;	/* File system mount ID */
 8002d66:	4a24      	ldr	r2, [pc, #144]	; (8002df8 <find_volume+0x304>)
	fs->fs_type = fmt;	/* FAT sub-type */
 8002d68:	7037      	strb	r7, [r6, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 8002d6a:	8813      	ldrh	r3, [r2, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	8013      	strh	r3, [r2, #0]
 8002d72:	f241 0206 	movw	r2, #4102	; 0x1006
 8002d76:	52a3      	strh	r3, [r4, r2]
		if (Files[i].fs == fs) Files[i].fs = 0;
 8002d78:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <find_volume+0x308>)
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4294      	cmp	r4, r2
 8002d7e:	bf04      	itt	eq
 8002d80:	2200      	moveq	r2, #0
 8002d82:	601a      	streq	r2, [r3, #0]
 8002d84:	68da      	ldr	r2, [r3, #12]
 8002d86:	4294      	cmp	r4, r2
 8002d88:	f47f aed8 	bne.w	8002b3c <find_volume+0x48>
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	60da      	str	r2, [r3, #12]
 8002d90:	e6d4      	b.n	8002b3c <find_volume+0x48>
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8002d92:	2002      	movs	r0, #2
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8002d94:	f109 0901 	add.w	r9, r9, #1
 8002d98:	f1b9 0f04 	cmp.w	r9, #4
 8002d9c:	f47f af0b 	bne.w	8002bb6 <find_volume+0xc2>
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8002da0:	2803      	cmp	r0, #3
 8002da2:	d104      	bne.n	8002dae <find_volume+0x2ba>
 8002da4:	e6e7      	b.n	8002b76 <find_volume+0x82>
 8002da6:	2803      	cmp	r0, #3
 8002da8:	f43f aee5 	beq.w	8002b76 <find_volume+0x82>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8002dac:	b108      	cbz	r0, 8002db2 <find_volume+0x2be>
 8002dae:	250d      	movs	r5, #13
 8002db0:	e6c4      	b.n	8002b3c <find_volume+0x48>
	bsect = 0;
 8002db2:	46a8      	mov	r8, r5
 8002db4:	e70c      	b.n	8002bd0 <find_volume+0xdc>
	fmt = FS_FAT12;
 8002db6:	2701      	movs	r7, #1
 8002db8:	e76d      	b.n	8002c96 <find_volume+0x1a2>
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8002dba:	f1be 0f00 	cmp.w	lr, #0
 8002dbe:	d0f6      	beq.n	8002dae <find_volume+0x2ba>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8002dc0:	f241 0c24 	movw	ip, #4132	; 0x1024
 8002dc4:	eb0a 0209 	add.w	r2, sl, r9
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002dc8:	2f02      	cmp	r7, #2
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8002dca:	f844 200c 	str.w	r2, [r4, ip]
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8002dce:	ea4f 0243 	mov.w	r2, r3, lsl #1
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8002dd2:	bf1b      	ittet	ne
 8002dd4:	18d2      	addne	r2, r2, r3
 8002dd6:	f003 0301 	andne.w	r3, r3, #1
 8002dda:	4613      	moveq	r3, r2
 8002ddc:	eb03 0352 	addne.w	r3, r3, r2, lsr #1
 8002de0:	e77a      	b.n	8002cd8 <find_volume+0x1e4>
	if (vol < 0) return FR_INVALID_DRIVE;
 8002de2:	250b      	movs	r5, #11
 8002de4:	e6aa      	b.n	8002b3c <find_volume+0x48>
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8002de6:	250c      	movs	r5, #12
 8002de8:	e6a8      	b.n	8002b3c <find_volume+0x48>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8002dea:	2503      	movs	r5, #3
 8002dec:	e6a6      	b.n	8002b3c <find_volume+0x48>
 8002dee:	bf00      	nop
 8002df0:	200000c4 	.word	0x200000c4
 8002df4:	41615252 	.word	0x41615252
 8002df8:	200000e0 	.word	0x200000e0
 8002dfc:	200000c8 	.word	0x200000c8

08002e00 <clust2sect>:
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002e00:	f241 0314 	movw	r3, #4116	; 0x1014
	clst -= 2;
 8002e04:	3902      	subs	r1, #2
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002e06:	58c3      	ldr	r3, [r0, r3]
 8002e08:	3b02      	subs	r3, #2
 8002e0a:	428b      	cmp	r3, r1
	return clst * fs->csize + fs->database;
 8002e0c:	bf81      	itttt	hi
 8002e0e:	f241 0302 	movwhi	r3, #4098	; 0x1002
 8002e12:	f241 0228 	movwhi	r2, #4136	; 0x1028
 8002e16:	5cc3      	ldrbhi	r3, [r0, r3]
 8002e18:	5880      	ldrhi	r0, [r0, r2]
 8002e1a:	bf8c      	ite	hi
 8002e1c:	fb01 0003 	mlahi	r0, r1, r3, r0
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8002e20:	2000      	movls	r0, #0
}
 8002e22:	4770      	bx	lr

08002e24 <get_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002e24:	2901      	cmp	r1, #1
{
 8002e26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e2a:	4605      	mov	r5, r0
 8002e2c:	460e      	mov	r6, r1
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8002e2e:	d97e      	bls.n	8002f2e <get_fat+0x10a>
 8002e30:	f241 0314 	movw	r3, #4116	; 0x1014
 8002e34:	58c3      	ldr	r3, [r0, r3]
 8002e36:	428b      	cmp	r3, r1
 8002e38:	d979      	bls.n	8002f2e <get_fat+0x10a>
		switch (fs->fs_type) {
 8002e3a:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d038      	beq.n	8002eb6 <get_fat+0x92>
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d050      	beq.n	8002eea <get_fat+0xc6>
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d170      	bne.n	8002f2e <get_fat+0x10a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002e4c:	f500 5981 	add.w	r9, r0, #4128	; 0x1020
			bc = (UINT)clst; bc += bc / 2;
 8002e50:	eb01 0451 	add.w	r4, r1, r1, lsr #1
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002e54:	f241 080a 	movw	r8, #4106	; 0x100a
 8002e58:	f8d9 1000 	ldr.w	r1, [r9]
 8002e5c:	f830 3008 	ldrh.w	r3, [r0, r8]
 8002e60:	fbb4 f3f3 	udiv	r3, r4, r3
 8002e64:	4419      	add	r1, r3
 8002e66:	f7ff fdf8 	bl	8002a5a <move_window>
 8002e6a:	b118      	cbz	r0, 8002e74 <get_fat+0x50>
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002e6c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8002e70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			wc = fs->win.d8[bc++ % SS(fs)];
 8002e74:	f835 1008 	ldrh.w	r1, [r5, r8]
 8002e78:	fbb4 f3f1 	udiv	r3, r4, r1
 8002e7c:	1c67      	adds	r7, r4, #1
 8002e7e:	fb01 4413 	mls	r4, r1, r3, r4
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002e82:	f8d9 3000 	ldr.w	r3, [r9]
 8002e86:	fbb7 f1f1 	udiv	r1, r7, r1
 8002e8a:	4628      	mov	r0, r5
 8002e8c:	4419      	add	r1, r3
			wc = fs->win.d8[bc++ % SS(fs)];
 8002e8e:	5d2c      	ldrb	r4, [r5, r4]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002e90:	f7ff fde3 	bl	8002a5a <move_window>
 8002e94:	2800      	cmp	r0, #0
 8002e96:	d1e9      	bne.n	8002e6c <get_fat+0x48>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8002e98:	f835 2008 	ldrh.w	r2, [r5, r8]
 8002e9c:	fbb7 f3f2 	udiv	r3, r7, r2
 8002ea0:	fb02 7313 	mls	r3, r2, r3, r7
 8002ea4:	5ce8      	ldrb	r0, [r5, r3]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8002ea6:	07f3      	lsls	r3, r6, #31
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8002ea8:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8002eac:	bf4c      	ite	mi
 8002eae:	0900      	lsrmi	r0, r0, #4
 8002eb0:	f3c0 000b 	ubfxpl	r0, r0, #0, #12
 8002eb4:	e7dc      	b.n	8002e70 <get_fat+0x4c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8002eb6:	f241 040a 	movw	r4, #4106	; 0x100a
 8002eba:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 8002ebe:	5b03      	ldrh	r3, [r0, r4]
 8002ec0:	085b      	lsrs	r3, r3, #1
 8002ec2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ec6:	6811      	ldr	r1, [r2, #0]
 8002ec8:	4419      	add	r1, r3
 8002eca:	f7ff fdc6 	bl	8002a5a <move_window>
 8002ece:	2800      	cmp	r0, #0
 8002ed0:	d1cc      	bne.n	8002e6c <get_fat+0x48>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8002ed2:	5b2a      	ldrh	r2, [r5, r4]
 8002ed4:	0076      	lsls	r6, r6, #1
 8002ed6:	fbb6 f3f2 	udiv	r3, r6, r2
 8002eda:	fb02 6613 	mls	r6, r2, r3, r6
			val = LD_WORD(p);
 8002ede:	19ab      	adds	r3, r5, r6
 8002ee0:	5da8      	ldrb	r0, [r5, r6]
 8002ee2:	785b      	ldrb	r3, [r3, #1]
 8002ee4:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
			break;
 8002ee8:	e7c2      	b.n	8002e70 <get_fat+0x4c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8002eea:	f241 040a 	movw	r4, #4106	; 0x100a
 8002eee:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 8002ef2:	5b03      	ldrh	r3, [r0, r4]
 8002ef4:	089b      	lsrs	r3, r3, #2
 8002ef6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002efa:	6811      	ldr	r1, [r2, #0]
 8002efc:	4419      	add	r1, r3
 8002efe:	f7ff fdac 	bl	8002a5a <move_window>
 8002f02:	2800      	cmp	r0, #0
 8002f04:	d1b2      	bne.n	8002e6c <get_fat+0x48>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8002f06:	5b2b      	ldrh	r3, [r5, r4]
 8002f08:	00b6      	lsls	r6, r6, #2
 8002f0a:	fbb6 f1f3 	udiv	r1, r6, r3
 8002f0e:	fb03 6611 	mls	r6, r3, r1, r6
 8002f12:	19ab      	adds	r3, r5, r6
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8002f14:	7898      	ldrb	r0, [r3, #2]
 8002f16:	78da      	ldrb	r2, [r3, #3]
 8002f18:	785b      	ldrb	r3, [r3, #1]
 8002f1a:	0400      	lsls	r0, r0, #16
 8002f1c:	ea40 6002 	orr.w	r0, r0, r2, lsl #24
 8002f20:	5daa      	ldrb	r2, [r5, r6]
 8002f22:	4310      	orrs	r0, r2
 8002f24:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
 8002f28:	f020 4070 	bic.w	r0, r0, #4026531840	; 0xf0000000
			break;
 8002f2c:	e7a0      	b.n	8002e70 <get_fat+0x4c>
		switch (fs->fs_type) {
 8002f2e:	2001      	movs	r0, #1
	return val;
 8002f30:	e79e      	b.n	8002e70 <get_fat+0x4c>

08002f32 <dir_sdi>:
{
 8002f32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	dp->index = (WORD)idx;	/* Current index */
 8002f36:	f241 0306 	movw	r3, #4102	; 0x1006
{
 8002f3a:	4606      	mov	r6, r0
	dp->index = (WORD)idx;	/* Current index */
 8002f3c:	52c1      	strh	r1, [r0, r3]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8002f3e:	f241 0308 	movw	r3, #4104	; 0x1008
{
 8002f42:	460d      	mov	r5, r1
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8002f44:	58c4      	ldr	r4, [r0, r3]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8002f46:	2c01      	cmp	r4, #1
 8002f48:	d102      	bne.n	8002f50 <dir_sdi+0x1e>
		return FR_INT_ERR;
 8002f4a:	2002      	movs	r0, #2
}
 8002f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8002f50:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
 8002f54:	f241 0214 	movw	r2, #4116	; 0x1014
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	589a      	ldr	r2, [r3, r2]
 8002f5c:	42a2      	cmp	r2, r4
 8002f5e:	d9f4      	bls.n	8002f4a <dir_sdi+0x18>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8002f60:	bb54      	cbnz	r4, 8002fb8 <dir_sdi+0x86>
 8002f62:	f503 5280 	add.w	r2, r3, #4096	; 0x1000
 8002f66:	7812      	ldrb	r2, [r2, #0]
 8002f68:	2a03      	cmp	r2, #3
 8002f6a:	d103      	bne.n	8002f74 <dir_sdi+0x42>
		clst = dp->fs->dirbase;
 8002f6c:	f241 0224 	movw	r2, #4132	; 0x1024
 8002f70:	589a      	ldr	r2, [r3, r2]
	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8002f72:	bb02      	cbnz	r2, 8002fb6 <dir_sdi+0x84>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8002f74:	f241 0208 	movw	r2, #4104	; 0x1008
 8002f78:	5a9a      	ldrh	r2, [r3, r2]
 8002f7a:	42aa      	cmp	r2, r5
 8002f7c:	d9e5      	bls.n	8002f4a <dir_sdi+0x18>
		sect = dp->fs->dirbase;
 8002f7e:	f241 0224 	movw	r2, #4132	; 0x1024
 8002f82:	5898      	ldr	r0, [r3, r2]
	dp->clust = clst;	/* Current cluster# */
 8002f84:	f241 030c 	movw	r3, #4108	; 0x100c
 8002f88:	50f4      	str	r4, [r6, r3]
	if (!sect) return FR_INT_ERR;
 8002f8a:	2800      	cmp	r0, #0
 8002f8c:	d0dd      	beq.n	8002f4a <dir_sdi+0x18>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	f241 020a 	movw	r2, #4106	; 0x100a
 8002f94:	f241 0410 	movw	r4, #4112	; 0x1010
 8002f98:	5a9a      	ldrh	r2, [r3, r2]
 8002f9a:	0952      	lsrs	r2, r2, #5
 8002f9c:	fbb5 f1f2 	udiv	r1, r5, r2
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8002fa0:	fb02 5511 	mls	r5, r2, r1, r5
 8002fa4:	f241 0214 	movw	r2, #4116	; 0x1014
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8002fa8:	4408      	add	r0, r1
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8002faa:	eb03 1345 	add.w	r3, r3, r5, lsl #5
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 8002fae:	5130      	str	r0, [r6, r4]
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 8002fb0:	50b3      	str	r3, [r6, r2]
	return FR_OK;
 8002fb2:	2000      	movs	r0, #0
 8002fb4:	e7ca      	b.n	8002f4c <dir_sdi+0x1a>
 8002fb6:	4614      	mov	r4, r2
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8002fb8:	f241 020a 	movw	r2, #4106	; 0x100a
 8002fbc:	f241 0102 	movw	r1, #4098	; 0x1002
 8002fc0:	f833 8002 	ldrh.w	r8, [r3, r2]
 8002fc4:	ea4f 1258 	mov.w	r2, r8, lsr #5
 8002fc8:	f813 8001 	ldrb.w	r8, [r3, r1]
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8002fcc:	f241 0914 	movw	r9, #4116	; 0x1014
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8002fd0:	fb08 f802 	mul.w	r8, r8, r2
		while (idx >= ic) {	/* Follow cluster chain */
 8002fd4:	4545      	cmp	r5, r8
 8002fd6:	6838      	ldr	r0, [r7, #0]
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8002fd8:	4621      	mov	r1, r4
		while (idx >= ic) {	/* Follow cluster chain */
 8002fda:	d202      	bcs.n	8002fe2 <dir_sdi+0xb0>
		sect = clust2sect(dp->fs, clst);
 8002fdc:	f7ff ff10 	bl	8002e00 <clust2sect>
 8002fe0:	e7d0      	b.n	8002f84 <dir_sdi+0x52>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8002fe2:	f7ff ff1f 	bl	8002e24 <get_fat>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002fe6:	1c43      	adds	r3, r0, #1
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 8002fe8:	4604      	mov	r4, r0
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8002fea:	d009      	beq.n	8003000 <dir_sdi+0xce>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8002fec:	2801      	cmp	r0, #1
 8002fee:	d9ac      	bls.n	8002f4a <dir_sdi+0x18>
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	f853 3009 	ldr.w	r3, [r3, r9]
 8002ff6:	4283      	cmp	r3, r0
 8002ff8:	d9a7      	bls.n	8002f4a <dir_sdi+0x18>
			idx -= ic;
 8002ffa:	eba5 0508 	sub.w	r5, r5, r8
 8002ffe:	e7e9      	b.n	8002fd4 <dir_sdi+0xa2>
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8003000:	2001      	movs	r0, #1
 8003002:	e7a3      	b.n	8002f4c <dir_sdi+0x1a>

08003004 <put_fat>:
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003004:	2901      	cmp	r1, #1
{
 8003006:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800300a:	4604      	mov	r4, r0
 800300c:	460d      	mov	r5, r1
 800300e:	4616      	mov	r6, r2
	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8003010:	f240 8097 	bls.w	8003142 <put_fat+0x13e>
 8003014:	f241 0314 	movw	r3, #4116	; 0x1014
 8003018:	58c3      	ldr	r3, [r0, r3]
 800301a:	428b      	cmp	r3, r1
 800301c:	f240 8091 	bls.w	8003142 <put_fat+0x13e>
		switch (fs->fs_type) {
 8003020:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8003024:	781b      	ldrb	r3, [r3, #0]
 8003026:	2b02      	cmp	r3, #2
 8003028:	d04e      	beq.n	80030c8 <put_fat+0xc4>
 800302a:	2b03      	cmp	r3, #3
 800302c:	d066      	beq.n	80030fc <put_fat+0xf8>
 800302e:	2b01      	cmp	r3, #1
 8003030:	f040 8087 	bne.w	8003142 <put_fat+0x13e>
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003034:	f500 5881 	add.w	r8, r0, #4128	; 0x1020
			bc = (UINT)clst; bc += bc / 2;
 8003038:	eb01 0951 	add.w	r9, r1, r1, lsr #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800303c:	f241 0a0a 	movw	sl, #4106	; 0x100a
 8003040:	f8d8 1000 	ldr.w	r1, [r8]
 8003044:	f830 300a 	ldrh.w	r3, [r0, sl]
 8003048:	fbb9 f3f3 	udiv	r3, r9, r3
 800304c:	4419      	add	r1, r3
 800304e:	f7ff fd04 	bl	8002a5a <move_window>
			if (res != FR_OK) break;
 8003052:	bb80      	cbnz	r0, 80030b6 <put_fat+0xb2>
			p = &fs->win.d8[bc++ % SS(fs)];
 8003054:	f834 100a 	ldrh.w	r1, [r4, sl]
 8003058:	fbb9 f2f1 	udiv	r2, r9, r1
 800305c:	fb01 9212 	mls	r2, r1, r2, r9
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003060:	f015 0501 	ands.w	r5, r5, #1
 8003064:	bf1f      	itttt	ne
 8003066:	5ca3      	ldrbne	r3, [r4, r2]
 8003068:	f003 000f 	andne.w	r0, r3, #15
 800306c:	0133      	lslne	r3, r6, #4
 800306e:	f003 03f0 	andne.w	r3, r3, #240	; 0xf0
 8003072:	bf14      	ite	ne
 8003074:	4303      	orrne	r3, r0
 8003076:	b2f3      	uxtbeq	r3, r6
 8003078:	54a3      	strb	r3, [r4, r2]
			fs->wflag = 1;
 800307a:	f241 0304 	movw	r3, #4100	; 0x1004
 800307e:	2201      	movs	r2, #1
 8003080:	54e2      	strb	r2, [r4, r3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003082:	f8d8 3000 	ldr.w	r3, [r8]
			p = &fs->win.d8[bc++ % SS(fs)];
 8003086:	f109 0701 	add.w	r7, r9, #1
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800308a:	4620      	mov	r0, r4
 800308c:	fbb7 f1f1 	udiv	r1, r7, r1
 8003090:	4419      	add	r1, r3
 8003092:	f7ff fce2 	bl	8002a5a <move_window>
			if (res != FR_OK) break;
 8003096:	b970      	cbnz	r0, 80030b6 <put_fat+0xb2>
			p = &fs->win.d8[bc % SS(fs)];
 8003098:	f241 030a 	movw	r3, #4106	; 0x100a
 800309c:	5ae2      	ldrh	r2, [r4, r3]
 800309e:	fbb7 f3f2 	udiv	r3, r7, r2
 80030a2:	fb02 7713 	mls	r7, r2, r3, r7
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80030a6:	b145      	cbz	r5, 80030ba <put_fat+0xb6>
 80030a8:	f3c6 1607 	ubfx	r6, r6, #4, #8
 80030ac:	55e6      	strb	r6, [r4, r7]
			fs->wflag = 1;
 80030ae:	f241 0304 	movw	r3, #4100	; 0x1004
 80030b2:	2201      	movs	r2, #1
 80030b4:	54e2      	strb	r2, [r4, r3]
}
 80030b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80030ba:	5de3      	ldrb	r3, [r4, r7]
 80030bc:	f3c6 2603 	ubfx	r6, r6, #8, #4
 80030c0:	f023 030f 	bic.w	r3, r3, #15
 80030c4:	431e      	orrs	r6, r3
 80030c6:	e7f1      	b.n	80030ac <put_fat+0xa8>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80030c8:	f241 070a 	movw	r7, #4106	; 0x100a
 80030cc:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 80030d0:	5bc3      	ldrh	r3, [r0, r7]
 80030d2:	085b      	lsrs	r3, r3, #1
 80030d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030d8:	6811      	ldr	r1, [r2, #0]
 80030da:	4419      	add	r1, r3
 80030dc:	f7ff fcbd 	bl	8002a5a <move_window>
			if (res != FR_OK) break;
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d1e8      	bne.n	80030b6 <put_fat+0xb2>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 80030e4:	5be2      	ldrh	r2, [r4, r7]
 80030e6:	006d      	lsls	r5, r5, #1
 80030e8:	fbb5 f3f2 	udiv	r3, r5, r2
 80030ec:	fb02 5513 	mls	r5, r2, r3, r5
			ST_WORD(p, (WORD)val);
 80030f0:	5566      	strb	r6, [r4, r5]
 80030f2:	4425      	add	r5, r4
 80030f4:	f3c6 2607 	ubfx	r6, r6, #8, #8
 80030f8:	706e      	strb	r6, [r5, #1]
			fs->wflag = 1;
 80030fa:	e7d8      	b.n	80030ae <put_fat+0xaa>
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80030fc:	f241 070a 	movw	r7, #4106	; 0x100a
 8003100:	f500 5281 	add.w	r2, r0, #4128	; 0x1020
 8003104:	5bc3      	ldrh	r3, [r0, r7]
 8003106:	089b      	lsrs	r3, r3, #2
 8003108:	fbb1 f3f3 	udiv	r3, r1, r3
 800310c:	6811      	ldr	r1, [r2, #0]
 800310e:	4419      	add	r1, r3
 8003110:	f7ff fca3 	bl	8002a5a <move_window>
			if (res != FR_OK) break;
 8003114:	2800      	cmp	r0, #0
 8003116:	d1ce      	bne.n	80030b6 <put_fat+0xb2>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8003118:	5be3      	ldrh	r3, [r4, r7]
 800311a:	00ad      	lsls	r5, r5, #2
 800311c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003120:	fb03 5511 	mls	r5, r3, r1, r5
 8003124:	1963      	adds	r3, r4, r5
			val |= LD_DWORD(p) & 0xF0000000;
 8003126:	78da      	ldrb	r2, [r3, #3]
 8003128:	0612      	lsls	r2, r2, #24
 800312a:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
 800312e:	4316      	orrs	r6, r2
			ST_DWORD(p, val);
 8003130:	f3c6 2207 	ubfx	r2, r6, #8, #8
 8003134:	5566      	strb	r6, [r4, r5]
 8003136:	705a      	strb	r2, [r3, #1]
 8003138:	0c32      	lsrs	r2, r6, #16
 800313a:	0e36      	lsrs	r6, r6, #24
 800313c:	709a      	strb	r2, [r3, #2]
 800313e:	70de      	strb	r6, [r3, #3]
 8003140:	e7b5      	b.n	80030ae <put_fat+0xaa>
		switch (fs->fs_type) {
 8003142:	2002      	movs	r0, #2
 8003144:	e7b7      	b.n	80030b6 <put_fat+0xb2>

08003146 <create_chain>:
{
 8003146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800314a:	4605      	mov	r5, r0
	if (clst == 0) {		/* Create a new chain */
 800314c:	460f      	mov	r7, r1
 800314e:	b9b9      	cbnz	r1, 8003180 <create_chain+0x3a>
		scl = fs->last_clust;			/* Get suggested start point */
 8003150:	f241 030c 	movw	r3, #4108	; 0x100c
 8003154:	58c6      	ldr	r6, [r0, r3]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 8003156:	b32e      	cbz	r6, 80031a4 <create_chain+0x5e>
 8003158:	f241 0314 	movw	r3, #4116	; 0x1014
 800315c:	58c3      	ldr	r3, [r0, r3]
 800315e:	429e      	cmp	r6, r3
 8003160:	bf28      	it	cs
 8003162:	2601      	movcs	r6, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003164:	f505 5880 	add.w	r8, r5, #4096	; 0x1000
 8003168:	4634      	mov	r4, r6
 800316a:	f108 0814 	add.w	r8, r8, #20
 800316e:	f8d8 3000 	ldr.w	r3, [r8]
		ncl++;							/* Next cluster */
 8003172:	3401      	adds	r4, #1
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8003174:	42a3      	cmp	r3, r4
 8003176:	d818      	bhi.n	80031aa <create_chain+0x64>
			if (ncl > scl) return 0;	/* No free cluster */
 8003178:	2e01      	cmp	r6, #1
 800317a:	d815      	bhi.n	80031a8 <create_chain+0x62>
 800317c:	2400      	movs	r4, #0
 800317e:	e005      	b.n	800318c <create_chain+0x46>
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003180:	f7ff fe50 	bl	8002e24 <get_fat>
		if (cs < 2) return 1;			/* Invalid value */
 8003184:	2801      	cmp	r0, #1
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8003186:	4604      	mov	r4, r0
		if (cs < 2) return 1;			/* Invalid value */
 8003188:	d803      	bhi.n	8003192 <create_chain+0x4c>
 800318a:	2401      	movs	r4, #1
}
 800318c:	4620      	mov	r0, r4
 800318e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003192:	1c42      	adds	r2, r0, #1
 8003194:	d037      	beq.n	8003206 <create_chain+0xc0>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003196:	f241 0314 	movw	r3, #4116	; 0x1014
 800319a:	58eb      	ldr	r3, [r5, r3]
 800319c:	4283      	cmp	r3, r0
 800319e:	d8f5      	bhi.n	800318c <create_chain+0x46>
 80031a0:	463e      	mov	r6, r7
 80031a2:	e7df      	b.n	8003164 <create_chain+0x1e>
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80031a4:	2601      	movs	r6, #1
 80031a6:	e7dd      	b.n	8003164 <create_chain+0x1e>
			ncl = 2;
 80031a8:	2402      	movs	r4, #2
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 80031aa:	4621      	mov	r1, r4
 80031ac:	4628      	mov	r0, r5
 80031ae:	f7ff fe39 	bl	8002e24 <get_fat>
		if (cs == 0) break;				/* Found a free cluster */
 80031b2:	b130      	cbz	r0, 80031c2 <create_chain+0x7c>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80031b4:	1c43      	adds	r3, r0, #1
 80031b6:	d026      	beq.n	8003206 <create_chain+0xc0>
 80031b8:	2801      	cmp	r0, #1
 80031ba:	d0e6      	beq.n	800318a <create_chain+0x44>
		if (ncl == scl) return 0;		/* No free cluster */
 80031bc:	42b4      	cmp	r4, r6
 80031be:	d1d6      	bne.n	800316e <create_chain+0x28>
 80031c0:	e7dc      	b.n	800317c <create_chain+0x36>
	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80031c2:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80031c6:	4621      	mov	r1, r4
 80031c8:	4628      	mov	r0, r5
 80031ca:	f7ff ff1b 	bl	8003004 <put_fat>
	if (res == FR_OK && clst != 0) {
 80031ce:	b9c0      	cbnz	r0, 8003202 <create_chain+0xbc>
 80031d0:	b987      	cbnz	r7, 80031f4 <create_chain+0xae>
		fs->last_clust = ncl;			/* Update FSINFO */
 80031d2:	f241 030c 	movw	r3, #4108	; 0x100c
		if (fs->free_clust != 0xFFFFFFFF) {
 80031d6:	f241 0210 	movw	r2, #4112	; 0x1010
		fs->last_clust = ncl;			/* Update FSINFO */
 80031da:	50ec      	str	r4, [r5, r3]
		if (fs->free_clust != 0xFFFFFFFF) {
 80031dc:	58ab      	ldr	r3, [r5, r2]
 80031de:	1c59      	adds	r1, r3, #1
 80031e0:	d0d4      	beq.n	800318c <create_chain+0x46>
			fs->free_clust--;
 80031e2:	3b01      	subs	r3, #1
 80031e4:	50ab      	str	r3, [r5, r2]
			fs->fsi_flag |= 1;
 80031e6:	f241 0205 	movw	r2, #4101	; 0x1005
 80031ea:	5cab      	ldrb	r3, [r5, r2]
 80031ec:	f043 0301 	orr.w	r3, r3, #1
 80031f0:	54ab      	strb	r3, [r5, r2]
 80031f2:	e7cb      	b.n	800318c <create_chain+0x46>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80031f4:	4622      	mov	r2, r4
 80031f6:	4639      	mov	r1, r7
 80031f8:	4628      	mov	r0, r5
 80031fa:	f7ff ff03 	bl	8003004 <put_fat>
	if (res == FR_OK) {
 80031fe:	2800      	cmp	r0, #0
 8003200:	d0e7      	beq.n	80031d2 <create_chain+0x8c>
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8003202:	2801      	cmp	r0, #1
 8003204:	d1c1      	bne.n	800318a <create_chain+0x44>
 8003206:	f04f 34ff 	mov.w	r4, #4294967295
 800320a:	e7bf      	b.n	800318c <create_chain+0x46>

0800320c <dir_next>:
{
 800320c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = dp->index + 1;
 8003210:	f241 0306 	movw	r3, #4102	; 0x1006
{
 8003214:	4605      	mov	r5, r0
	i = dp->index + 1;
 8003216:	5ac6      	ldrh	r6, [r0, r3]
 8003218:	3601      	adds	r6, #1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800321a:	b2b3      	uxth	r3, r6
{
 800321c:	4689      	mov	r9, r1
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 800321e:	b913      	cbnz	r3, 8003226 <dir_next+0x1a>
		return FR_NO_FILE;
 8003220:	2004      	movs	r0, #4
}
 8003222:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8003226:	f241 0110 	movw	r1, #4112	; 0x1010
 800322a:	5842      	ldr	r2, [r0, r1]
 800322c:	2a00      	cmp	r2, #0
 800322e:	d0f7      	beq.n	8003220 <dir_next+0x14>
	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8003230:	f500 5780 	add.w	r7, r0, #4096	; 0x1000
 8003234:	f241 030a 	movw	r3, #4106	; 0x100a
 8003238:	6838      	ldr	r0, [r7, #0]
 800323a:	5ac3      	ldrh	r3, [r0, r3]
 800323c:	095b      	lsrs	r3, r3, #5
 800323e:	fbb6 f4f3 	udiv	r4, r6, r3
 8003242:	fb03 6314 	mls	r3, r3, r4, r6
 8003246:	b95b      	cbnz	r3, 8003260 <dir_next+0x54>
		if (!dp->clust) {		/* Static table */
 8003248:	f241 0a0c 	movw	sl, #4108	; 0x100c
		dp->sect++;					/* Next sector */
 800324c:	3201      	adds	r2, #1
 800324e:	506a      	str	r2, [r5, r1]
		if (!dp->clust) {		/* Static table */
 8003250:	f855 100a 	ldr.w	r1, [r5, sl]
 8003254:	b9b9      	cbnz	r1, 8003286 <dir_next+0x7a>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8003256:	f241 0308 	movw	r3, #4104	; 0x1008
 800325a:	5ac3      	ldrh	r3, [r0, r3]
 800325c:	42b3      	cmp	r3, r6
 800325e:	d9df      	bls.n	8003220 <dir_next+0x14>
	dp->index = (WORD)i;	/* Current index */
 8003260:	f241 0306 	movw	r3, #4102	; 0x1006
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8003264:	f241 020a 	movw	r2, #4106	; 0x100a
	dp->index = (WORD)i;	/* Current index */
 8003268:	52ee      	strh	r6, [r5, r3]
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800326a:	683b      	ldr	r3, [r7, #0]
 800326c:	5a9a      	ldrh	r2, [r3, r2]
 800326e:	0952      	lsrs	r2, r2, #5
 8003270:	fbb6 f1f2 	udiv	r1, r6, r2
 8003274:	fb02 6611 	mls	r6, r2, r1, r6
 8003278:	f241 0214 	movw	r2, #4116	; 0x1014
 800327c:	eb03 1346 	add.w	r3, r3, r6, lsl #5
 8003280:	50ab      	str	r3, [r5, r2]
	return FR_OK;
 8003282:	2000      	movs	r0, #0
 8003284:	e7cd      	b.n	8003222 <dir_next+0x16>
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8003286:	f241 0302 	movw	r3, #4098	; 0x1002
 800328a:	f810 8003 	ldrb.w	r8, [r0, r3]
 800328e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003292:	ea18 0804 	ands.w	r8, r8, r4
 8003296:	d1e3      	bne.n	8003260 <dir_next+0x54>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8003298:	f7ff fdc4 	bl	8002e24 <get_fat>
				if (clst <= 1) return FR_INT_ERR;
 800329c:	2801      	cmp	r0, #1
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 800329e:	4604      	mov	r4, r0
				if (clst <= 1) return FR_INT_ERR;
 80032a0:	d801      	bhi.n	80032a6 <dir_next+0x9a>
 80032a2:	2002      	movs	r0, #2
 80032a4:	e7bd      	b.n	8003222 <dir_next+0x16>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80032a6:	1c42      	adds	r2, r0, #1
 80032a8:	d101      	bne.n	80032ae <dir_next+0xa2>
 80032aa:	2001      	movs	r0, #1
 80032ac:	e7b9      	b.n	8003222 <dir_next+0x16>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 80032ae:	6838      	ldr	r0, [r7, #0]
 80032b0:	f241 0314 	movw	r3, #4116	; 0x1014
 80032b4:	58c3      	ldr	r3, [r0, r3]
 80032b6:	42a3      	cmp	r3, r4
 80032b8:	d834      	bhi.n	8003324 <dir_next+0x118>
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 80032ba:	f1b9 0f00 	cmp.w	r9, #0
 80032be:	d0af      	beq.n	8003220 <dir_next+0x14>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 80032c0:	f855 100a 	ldr.w	r1, [r5, sl]
 80032c4:	f7ff ff3f 	bl	8003146 <create_chain>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80032c8:	4604      	mov	r4, r0
 80032ca:	2800      	cmp	r0, #0
 80032cc:	d044      	beq.n	8003358 <dir_next+0x14c>
					if (clst == 1) return FR_INT_ERR;
 80032ce:	2801      	cmp	r0, #1
 80032d0:	d0e7      	beq.n	80032a2 <dir_next+0x96>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80032d2:	1c43      	adds	r3, r0, #1
 80032d4:	d0e9      	beq.n	80032aa <dir_next+0x9e>
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80032d6:	6838      	ldr	r0, [r7, #0]
 80032d8:	f7ff fbb7 	bl	8002a4a <sync_window>
 80032dc:	4601      	mov	r1, r0
 80032de:	2800      	cmp	r0, #0
 80032e0:	d1e3      	bne.n	80032aa <dir_next+0x9e>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 80032e2:	f241 030a 	movw	r3, #4106	; 0x100a
 80032e6:	6838      	ldr	r0, [r7, #0]
 80032e8:	5ac2      	ldrh	r2, [r0, r3]
 80032ea:	f7ff faad 	bl	8002848 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80032ee:	f8d7 9000 	ldr.w	r9, [r7]
 80032f2:	4621      	mov	r1, r4
 80032f4:	4648      	mov	r0, r9
 80032f6:	f7ff fd83 	bl	8002e00 <clust2sect>
 80032fa:	f241 032c 	movw	r3, #4140	; 0x102c
						dp->fs->wflag = 1;
 80032fe:	f241 0a04 	movw	sl, #4100	; 0x1004
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8003302:	f849 0003 	str.w	r0, [r9, r3]
						dp->fs->wflag = 1;
 8003306:	f04f 0b01 	mov.w	fp, #1
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800330a:	f241 0902 	movw	r9, #4098	; 0x1002
 800330e:	6838      	ldr	r0, [r7, #0]
 8003310:	f810 3009 	ldrb.w	r3, [r0, r9]
 8003314:	4543      	cmp	r3, r8
 8003316:	d810      	bhi.n	800333a <dir_next+0x12e>
					dp->fs->winsect -= c;						/* Rewind window offset */
 8003318:	f241 022c 	movw	r2, #4140	; 0x102c
 800331c:	5883      	ldr	r3, [r0, r2]
 800331e:	eba3 0308 	sub.w	r3, r3, r8
 8003322:	5083      	str	r3, [r0, r2]
				dp->clust = clst;				/* Initialize data for new cluster */
 8003324:	f241 030c 	movw	r3, #4108	; 0x100c
				dp->sect = clust2sect(dp->fs, clst);
 8003328:	6838      	ldr	r0, [r7, #0]
				dp->clust = clst;				/* Initialize data for new cluster */
 800332a:	50ec      	str	r4, [r5, r3]
				dp->sect = clust2sect(dp->fs, clst);
 800332c:	4621      	mov	r1, r4
 800332e:	f7ff fd67 	bl	8002e00 <clust2sect>
 8003332:	f241 0310 	movw	r3, #4112	; 0x1010
 8003336:	50e8      	str	r0, [r5, r3]
 8003338:	e792      	b.n	8003260 <dir_next+0x54>
						dp->fs->wflag = 1;
 800333a:	f800 b00a 	strb.w	fp, [r0, sl]
	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800333e:	f7ff fb4e 	bl	80029de <sync_window.part.0>
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8003342:	2800      	cmp	r0, #0
 8003344:	d1b1      	bne.n	80032aa <dir_next+0x9e>
						dp->fs->winsect++;
 8003346:	6839      	ldr	r1, [r7, #0]
 8003348:	f241 022c 	movw	r2, #4140	; 0x102c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 800334c:	f108 0801 	add.w	r8, r8, #1
						dp->fs->winsect++;
 8003350:	588b      	ldr	r3, [r1, r2]
 8003352:	3301      	adds	r3, #1
 8003354:	508b      	str	r3, [r1, r2]
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8003356:	e7da      	b.n	800330e <dir_next+0x102>
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8003358:	2007      	movs	r0, #7
 800335a:	e762      	b.n	8003222 <dir_next+0x16>

0800335c <follow_path>:
{
 800335c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8003360:	780b      	ldrb	r3, [r1, #0]
 8003362:	2b2f      	cmp	r3, #47	; 0x2f
{
 8003364:	4605      	mov	r5, r0
 8003366:	460c      	mov	r4, r1
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8003368:	d001      	beq.n	800336e <follow_path+0x12>
 800336a:	2b5c      	cmp	r3, #92	; 0x5c
 800336c:	d100      	bne.n	8003370 <follow_path+0x14>
		path++;
 800336e:	3401      	adds	r4, #1
	dp->sclust = 0;							/* Always start from the root directory */
 8003370:	f241 0308 	movw	r3, #4104	; 0x1008
 8003374:	2600      	movs	r6, #0
 8003376:	50ee      	str	r6, [r5, r3]
	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8003378:	7823      	ldrb	r3, [r4, #0]
 800337a:	2b1f      	cmp	r3, #31
 800337c:	d93e      	bls.n	80033fc <follow_path+0xa0>
	sfn = dp->fn;
 800337e:	f505 5680 	add.w	r6, r5, #4096	; 0x1000
 8003382:	3618      	adds	r6, #24
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8003384:	4623      	mov	r3, r4
 8003386:	f813 2b01 	ldrb.w	r2, [r3], #1
 800338a:	2a2f      	cmp	r2, #47	; 0x2f
 800338c:	d03f      	beq.n	800340e <follow_path+0xb2>
 800338e:	2a5c      	cmp	r2, #92	; 0x5c
 8003390:	d03d      	beq.n	800340e <follow_path+0xb2>
	sfn = dp->fn;
 8003392:	f8d6 8000 	ldr.w	r8, [r6]
	mem_set(sfn, ' ', 11);
 8003396:	2120      	movs	r1, #32
 8003398:	4640      	mov	r0, r8
 800339a:	220b      	movs	r2, #11
 800339c:	f7ff fa54 	bl	8002848 <mem_set>
	si = i = b = 0; ni = 8;
 80033a0:	2000      	movs	r0, #0
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80033a2:	4964      	ldr	r1, [pc, #400]	; (8003534 <follow_path+0x1d8>)
 80033a4:	f104 39ff 	add.w	r9, r4, #4294967295
	si = i = b = 0; ni = 8;
 80033a8:	f04f 0e08 	mov.w	lr, #8
 80033ac:	4607      	mov	r7, r0
 80033ae:	f1c4 0a02 	rsb	sl, r4, #2
		c = (BYTE)p[si++];
 80033b2:	eb0a 0309 	add.w	r3, sl, r9
 80033b6:	f819 cf01 	ldrb.w	ip, [r9, #1]!
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80033ba:	f1bc 0f20 	cmp.w	ip, #32
 80033be:	d93d      	bls.n	800343c <follow_path+0xe0>
 80033c0:	f1bc 0f2f 	cmp.w	ip, #47	; 0x2f
 80033c4:	d03a      	beq.n	800343c <follow_path+0xe0>
 80033c6:	f1bc 0f5c 	cmp.w	ip, #92	; 0x5c
 80033ca:	d037      	beq.n	800343c <follow_path+0xe0>
		if (c == '.' || i >= ni) {
 80033cc:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
 80033d0:	f000 80a5 	beq.w	800351e <follow_path+0x1c2>
 80033d4:	4586      	cmp	lr, r0
 80033d6:	d90f      	bls.n	80033f8 <follow_path+0x9c>
		if (c >= 0x80) {				/* Extended character? */
 80033d8:	f01c 0f80 	tst.w	ip, #128	; 0x80
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80033dc:	bf18      	it	ne
 80033de:	f1ac 0c80 	subne.w	ip, ip, #128	; 0x80
 80033e2:	4a55      	ldr	r2, [pc, #340]	; (8003538 <follow_path+0x1dc>)
 80033e4:	bf1c      	itt	ne
 80033e6:	f811 c00c 	ldrbne.w	ip, [r1, ip]
			b |= 3;						/* Eliminate NT flag */
 80033ea:	f047 0703 	orrne.w	r7, r7, #3
	while (*str && *str != chr) str++;
 80033ee:	f812 3b01 	ldrb.w	r3, [r2], #1
 80033f2:	b173      	cbz	r3, 8003412 <follow_path+0xb6>
 80033f4:	459c      	cmp	ip, r3
 80033f6:	d1fa      	bne.n	80033ee <follow_path+0x92>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 80033f8:	2006      	movs	r0, #6
	return res;
 80033fa:	e006      	b.n	800340a <follow_path+0xae>
		res = dir_sdi(dp, 0);
 80033fc:	4631      	mov	r1, r6
 80033fe:	4628      	mov	r0, r5
 8003400:	f7ff fd97 	bl	8002f32 <dir_sdi>
		dp->dir = 0;
 8003404:	f241 0314 	movw	r3, #4116	; 0x1014
 8003408:	50ee      	str	r6, [r5, r3]
}
 800340a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
{
 800340e:	461c      	mov	r4, r3
 8003410:	e7b8      	b.n	8003384 <follow_path+0x28>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8003412:	f1ac 0341 	sub.w	r3, ip, #65	; 0x41
 8003416:	2b19      	cmp	r3, #25
 8003418:	d805      	bhi.n	8003426 <follow_path+0xca>
				b |= 2;
 800341a:	f047 0702 	orr.w	r7, r7, #2
			sfn[i++] = c;
 800341e:	f808 c000 	strb.w	ip, [r8, r0]
 8003422:	3001      	adds	r0, #1
 8003424:	e7c5      	b.n	80033b2 <follow_path+0x56>
				if (IsLower(c)) {		/* ASCII small capital? */
 8003426:	f1ac 0361 	sub.w	r3, ip, #97	; 0x61
 800342a:	2b19      	cmp	r3, #25
					b |= 1; c -= 0x20;
 800342c:	bf9e      	ittt	ls
 800342e:	f1ac 0c20 	subls.w	ip, ip, #32
 8003432:	f047 0701 	orrls.w	r7, r7, #1
 8003436:	fa5f fc8c 	uxtbls.w	ip, ip
 800343a:	e7f0      	b.n	800341e <follow_path+0xc2>
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 800343c:	f1bc 0f21 	cmp.w	ip, #33	; 0x21
	*path = &p[si];						/* Return pointer to the next segment */
 8003440:	441c      	add	r4, r3
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8003442:	bf34      	ite	cc
 8003444:	2304      	movcc	r3, #4
 8003446:	2300      	movcs	r3, #0
	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8003448:	2800      	cmp	r0, #0
 800344a:	d0d5      	beq.n	80033f8 <follow_path+0x9c>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 800344c:	f898 2000 	ldrb.w	r2, [r8]
 8003450:	2ae5      	cmp	r2, #229	; 0xe5
 8003452:	bf04      	itt	eq
 8003454:	2205      	moveq	r2, #5
 8003456:	f888 2000 	strbeq.w	r2, [r8]
	if (ni == 8) b <<= 2;
 800345a:	f1be 0f08 	cmp.w	lr, #8
 800345e:	d13f      	bne.n	80034e0 <follow_path+0x184>
 8003460:	00bf      	lsls	r7, r7, #2
 8003462:	b2ff      	uxtb	r7, r7
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8003464:	f007 070c 	and.w	r7, r7, #12
 8003468:	2f04      	cmp	r7, #4
 800346a:	bf08      	it	eq
 800346c:	f043 0308 	orreq.w	r3, r3, #8
	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8003470:	f888 300b 	strb.w	r3, [r8, #11]
	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8003474:	2100      	movs	r1, #0
 8003476:	4628      	mov	r0, r5
 8003478:	f7ff fd5b 	bl	8002f32 <dir_sdi>
	if (res != FR_OK) return res;
 800347c:	bb30      	cbnz	r0, 80034cc <follow_path+0x170>
		res = move_window(dp->fs, dp->sect);
 800347e:	f505 5780 	add.w	r7, r5, #4096	; 0x1000
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003482:	f505 5880 	add.w	r8, r5, #4096	; 0x1000
		res = move_window(dp->fs, dp->sect);
 8003486:	3710      	adds	r7, #16
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003488:	f108 0814 	add.w	r8, r8, #20
		res = move_window(dp->fs, dp->sect);
 800348c:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 8003490:	6839      	ldr	r1, [r7, #0]
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	f7ff fae1 	bl	8002a5a <move_window>
		if (res != FR_OK) break;
 8003498:	b9c0      	cbnz	r0, 80034cc <follow_path+0x170>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800349a:	f8d8 3000 	ldr.w	r3, [r8]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800349e:	781a      	ldrb	r2, [r3, #0]
 80034a0:	b32a      	cbz	r2, 80034ee <follow_path+0x192>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80034a2:	7ad8      	ldrb	r0, [r3, #11]
 80034a4:	f010 0008 	ands.w	r0, r0, #8
 80034a8:	d10a      	bne.n	80034c0 <follow_path+0x164>
 80034aa:	6832      	ldr	r2, [r6, #0]
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80034ac:	f103 0e0b 	add.w	lr, r3, #11
	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80034b0:	4573      	cmp	r3, lr
 80034b2:	d00b      	beq.n	80034cc <follow_path+0x170>
 80034b4:	f813 cb01 	ldrb.w	ip, [r3], #1
 80034b8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80034bc:	458c      	cmp	ip, r1
 80034be:	d0f7      	beq.n	80034b0 <follow_path+0x154>
		res = dir_next(dp, 0);		/* Next entry */
 80034c0:	2100      	movs	r1, #0
 80034c2:	4628      	mov	r0, r5
 80034c4:	f7ff fea2 	bl	800320c <dir_next>
	} while (res == FR_OK);
 80034c8:	2800      	cmp	r0, #0
 80034ca:	d0df      	beq.n	800348c <follow_path+0x130>
			ns = dp->fn[NSFLAG];
 80034cc:	6833      	ldr	r3, [r6, #0]
 80034ce:	7adb      	ldrb	r3, [r3, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80034d0:	b178      	cbz	r0, 80034f2 <follow_path+0x196>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80034d2:	2804      	cmp	r0, #4
 80034d4:	d199      	bne.n	800340a <follow_path+0xae>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80034d6:	f013 0f04 	tst.w	r3, #4
 80034da:	bf08      	it	eq
 80034dc:	2005      	moveq	r0, #5
 80034de:	e794      	b.n	800340a <follow_path+0xae>
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80034e0:	f007 0203 	and.w	r2, r7, #3
 80034e4:	2a01      	cmp	r2, #1
 80034e6:	bf08      	it	eq
 80034e8:	f043 0310 	orreq.w	r3, r3, #16
 80034ec:	e7ba      	b.n	8003464 <follow_path+0x108>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80034ee:	2004      	movs	r0, #4
 80034f0:	e7ec      	b.n	80034cc <follow_path+0x170>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80034f2:	075a      	lsls	r2, r3, #29
 80034f4:	d489      	bmi.n	800340a <follow_path+0xae>
			dir = dp->dir;						/* Follow the sub-directory */
 80034f6:	f241 0314 	movw	r3, #4116	; 0x1014
 80034fa:	58e9      	ldr	r1, [r5, r3]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 80034fc:	7acb      	ldrb	r3, [r1, #11]
 80034fe:	06db      	lsls	r3, r3, #27
 8003500:	d50b      	bpl.n	800351a <follow_path+0x1be>
			dp->sclust = ld_clust(dp->fs, dir);
 8003502:	f505 5380 	add.w	r3, r5, #4096	; 0x1000
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350c:	7818      	ldrb	r0, [r3, #0]
 800350e:	f7ff fa58 	bl	80029c2 <ld_clust.isra.0>
 8003512:	f241 0308 	movw	r3, #4104	; 0x1008
 8003516:	50e8      	str	r0, [r5, r3]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003518:	e734      	b.n	8003384 <follow_path+0x28>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800351a:	2005      	movs	r0, #5
 800351c:	e775      	b.n	800340a <follow_path+0xae>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 800351e:	f1be 0f08 	cmp.w	lr, #8
 8003522:	f47f af69 	bne.w	80033f8 <follow_path+0x9c>
			b <<= 2; continue;
 8003526:	00bf      	lsls	r7, r7, #2
			i = 8; ni = 11;
 8003528:	4670      	mov	r0, lr
			b <<= 2; continue;
 800352a:	b2ff      	uxtb	r7, r7
			i = 8; ni = 11;
 800352c:	f04f 0e0b 	mov.w	lr, #11
			b <<= 2; continue;
 8003530:	e73f      	b.n	80033b2 <follow_path+0x56>
 8003532:	bf00      	nop
 8003534:	08006ad1 	.word	0x08006ad1
 8003538:	08006ac2 	.word	0x08006ac2

0800353c <dir_read.constprop.0>:
FRESULT dir_read (
 800353c:	b570      	push	{r4, r5, r6, lr}
 800353e:	4604      	mov	r4, r0
	while (dp->sect) {
 8003540:	f504 5580 	add.w	r5, r4, #4096	; 0x1000
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003544:	f504 5680 	add.w	r6, r4, #4096	; 0x1000
	res = FR_NO_FILE;
 8003548:	2004      	movs	r0, #4
	while (dp->sect) {
 800354a:	3510      	adds	r5, #16
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 800354c:	3614      	adds	r6, #20
	while (dp->sect) {
 800354e:	6829      	ldr	r1, [r5, #0]
 8003550:	b909      	cbnz	r1, 8003556 <dir_read.constprop.0+0x1a>
	if (res != FR_OK) dp->sect = 0;
 8003552:	b1b0      	cbz	r0, 8003582 <dir_read.constprop.0+0x46>
 8003554:	e01d      	b.n	8003592 <dir_read.constprop.0+0x56>
		res = move_window(dp->fs, dp->sect);
 8003556:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 800355a:	6818      	ldr	r0, [r3, #0]
 800355c:	f7ff fa7d 	bl	8002a5a <move_window>
		if (res != FR_OK) break;
 8003560:	b9b8      	cbnz	r0, 8003592 <dir_read.constprop.0+0x56>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003562:	6832      	ldr	r2, [r6, #0]
		c = dir[DIR_Name];
 8003564:	7813      	ldrb	r3, [r2, #0]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003566:	b1cb      	cbz	r3, 800359c <dir_read.constprop.0+0x60>
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8003568:	2be5      	cmp	r3, #229	; 0xe5
 800356a:	d00c      	beq.n	8003586 <dir_read.constprop.0+0x4a>
 800356c:	2b2e      	cmp	r3, #46	; 0x2e
 800356e:	d00a      	beq.n	8003586 <dir_read.constprop.0+0x4a>
		a = dir[DIR_Attr] & AM_MASK;
 8003570:	7ad3      	ldrb	r3, [r2, #11]
 8003572:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8003576:	2b0f      	cmp	r3, #15
 8003578:	d005      	beq.n	8003586 <dir_read.constprop.0+0x4a>
 800357a:	f023 0320 	bic.w	r3, r3, #32
 800357e:	2b08      	cmp	r3, #8
 8003580:	d001      	beq.n	8003586 <dir_read.constprop.0+0x4a>
		res = move_window(dp->fs, dp->sect);
 8003582:	2000      	movs	r0, #0
}
 8003584:	bd70      	pop	{r4, r5, r6, pc}
		res = dir_next(dp, 0);				/* Next entry */
 8003586:	2100      	movs	r1, #0
 8003588:	4620      	mov	r0, r4
 800358a:	f7ff fe3f 	bl	800320c <dir_next>
		if (res != FR_OK) break;
 800358e:	2800      	cmp	r0, #0
 8003590:	d0dd      	beq.n	800354e <dir_read.constprop.0+0x12>
	if (res != FR_OK) dp->sect = 0;
 8003592:	f241 0310 	movw	r3, #4112	; 0x1010
 8003596:	2200      	movs	r2, #0
 8003598:	50e2      	str	r2, [r4, r3]
 800359a:	e7f3      	b.n	8003584 <dir_read.constprop.0+0x48>
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800359c:	2004      	movs	r0, #4
 800359e:	e7f8      	b.n	8003592 <dir_read.constprop.0+0x56>

080035a0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80035a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80035a2:	e9cd 1000 	strd	r1, r0, [sp]
	int vol;
	FRESULT res;
	const TCHAR *rp = path;


	vol = get_ldnumber(&rp);
 80035a6:	a803      	add	r0, sp, #12
{
 80035a8:	4615      	mov	r5, r2
	const TCHAR *rp = path;
 80035aa:	9103      	str	r1, [sp, #12]
	vol = get_ldnumber(&rp);
 80035ac:	f7ff f9d5 	bl	800295a <get_ldnumber>
	if (vol < 0) return FR_INVALID_DRIVE;
 80035b0:	1e04      	subs	r4, r0, #0
 80035b2:	db24      	blt.n	80035fe <f_mount+0x5e>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80035b4:	4e14      	ldr	r6, [pc, #80]	; (8003608 <f_mount+0x68>)
 80035b6:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]

	if (cfs) {
 80035ba:	b173      	cbz	r3, 80035da <f_mount+0x3a>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80035bc:	4913      	ldr	r1, [pc, #76]	; (800360c <f_mount+0x6c>)
 80035be:	680a      	ldr	r2, [r1, #0]
 80035c0:	4293      	cmp	r3, r2
 80035c2:	bf04      	itt	eq
 80035c4:	2200      	moveq	r2, #0
 80035c6:	600a      	streq	r2, [r1, #0]
 80035c8:	68ca      	ldr	r2, [r1, #12]
 80035ca:	4293      	cmp	r3, r2
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80035cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80035d0:	f04f 0200 	mov.w	r2, #0
		if (Files[i].fs == fs) Files[i].fs = 0;
 80035d4:	bf08      	it	eq
 80035d6:	60ca      	streq	r2, [r1, #12]
		cfs->fs_type = 0;				/* Clear old fs object */
 80035d8:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80035da:	9801      	ldr	r0, [sp, #4]
 80035dc:	b118      	cbz	r0, 80035e6 <f_mount+0x46>
		fs->fs_type = 0;				/* Clear new fs object */
 80035de:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 80035e2:	2200      	movs	r2, #0
 80035e4:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80035e6:	f846 0024 	str.w	r0, [r6, r4, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80035ea:	b130      	cbz	r0, 80035fa <f_mount+0x5a>
 80035ec:	2d01      	cmp	r5, #1
 80035ee:	d108      	bne.n	8003602 <f_mount+0x62>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80035f0:	2200      	movs	r2, #0
 80035f2:	4669      	mov	r1, sp
 80035f4:	a801      	add	r0, sp, #4
 80035f6:	f7ff fa7d 	bl	8002af4 <find_volume>
	LEAVE_FF(fs, res);
}
 80035fa:	b004      	add	sp, #16
 80035fc:	bd70      	pop	{r4, r5, r6, pc}
	if (vol < 0) return FR_INVALID_DRIVE;
 80035fe:	200b      	movs	r0, #11
 8003600:	e7fb      	b.n	80035fa <f_mount+0x5a>
	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8003602:	2000      	movs	r0, #0
 8003604:	e7f9      	b.n	80035fa <f_mount+0x5a>
 8003606:	bf00      	nop
 8003608:	200000c4 	.word	0x200000c4
 800360c:	200000c8 	.word	0x200000c8

08003610 <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8003610:	b570      	push	{r4, r5, r6, lr}
 8003612:	b086      	sub	sp, #24
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8003614:	4605      	mov	r5, r0
{
 8003616:	9101      	str	r1, [sp, #4]
	if (!dp) return FR_INVALID_OBJECT;
 8003618:	2800      	cmp	r0, #0
 800361a:	d04e      	beq.n	80036ba <f_opendir+0xaa>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800361c:	2200      	movs	r2, #0
 800361e:	a901      	add	r1, sp, #4
 8003620:	a802      	add	r0, sp, #8
 8003622:	f7ff fa67 	bl	8002af4 <find_volume>
	if (res == FR_OK) {
 8003626:	f505 5680 	add.w	r6, r5, #4096	; 0x1000
 800362a:	4604      	mov	r4, r0
 800362c:	b9a0      	cbnz	r0, 8003658 <f_opendir+0x48>
		dp->fs = fs;
 800362e:	9b02      	ldr	r3, [sp, #8]
 8003630:	6033      	str	r3, [r6, #0]
		INIT_BUF(*dp);
 8003632:	f241 0318 	movw	r3, #4120	; 0x1018
 8003636:	aa03      	add	r2, sp, #12
 8003638:	50ea      	str	r2, [r5, r3]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 800363a:	9901      	ldr	r1, [sp, #4]
 800363c:	4628      	mov	r0, r5
 800363e:	f7ff fe8d 	bl	800335c <follow_path>
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 8003642:	4604      	mov	r4, r0
 8003644:	2800      	cmp	r0, #0
 8003646:	d133      	bne.n	80036b0 <f_opendir+0xa0>
			if (dp->dir) {						/* It is not the origin directory itself */
 8003648:	f241 0314 	movw	r3, #4116	; 0x1014
 800364c:	58e9      	ldr	r1, [r5, r3]
 800364e:	b179      	cbz	r1, 8003670 <f_opendir+0x60>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 8003650:	7acb      	ldrb	r3, [r1, #11]
 8003652:	06db      	lsls	r3, r3, #27
 8003654:	d403      	bmi.n	800365e <f_opendir+0x4e>
					dp->sclust = ld_clust(fs, dp->dir);
				else							/* The object is a file */
					res = FR_NO_PATH;
 8003656:	2405      	movs	r4, #5
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 8003658:	2300      	movs	r3, #0
 800365a:	6033      	str	r3, [r6, #0]
 800365c:	e021      	b.n	80036a2 <f_opendir+0x92>
					dp->sclust = ld_clust(fs, dp->dir);
 800365e:	9b02      	ldr	r3, [sp, #8]
 8003660:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003664:	7818      	ldrb	r0, [r3, #0]
 8003666:	f7ff f9ac 	bl	80029c2 <ld_clust.isra.0>
 800366a:	f241 0308 	movw	r3, #4104	; 0x1008
 800366e:	50e8      	str	r0, [r5, r3]
				dp->id = fs->id;
 8003670:	9a02      	ldr	r2, [sp, #8]
 8003672:	f241 0306 	movw	r3, #4102	; 0x1006
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8003676:	2100      	movs	r1, #0
				dp->id = fs->id;
 8003678:	5ad2      	ldrh	r2, [r2, r3]
 800367a:	f241 0304 	movw	r3, #4100	; 0x1004
				res = dir_sdi(dp, 0);			/* Rewind directory */
 800367e:	4628      	mov	r0, r5
				dp->id = fs->id;
 8003680:	52ea      	strh	r2, [r5, r3]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8003682:	f7ff fc56 	bl	8002f32 <dir_sdi>
				if (res == FR_OK) {
 8003686:	4604      	mov	r4, r0
 8003688:	b990      	cbnz	r0, 80036b0 <f_opendir+0xa0>
					if (dp->sclust) {
 800368a:	f241 0308 	movw	r3, #4104	; 0x1008
 800368e:	58eb      	ldr	r3, [r5, r3]
 8003690:	b153      	cbz	r3, 80036a8 <f_opendir+0x98>
						dp->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8003692:	4601      	mov	r1, r0
 8003694:	4628      	mov	r0, r5
 8003696:	f7ff f8df 	bl	8002858 <inc_lock>
 800369a:	f241 031c 	movw	r3, #4124	; 0x101c
 800369e:	50e8      	str	r0, [r5, r3]
						if (!dp->lockid)
 80036a0:	b148      	cbz	r0, 80036b6 <f_opendir+0xa6>

	LEAVE_FF(fs, res);
}
 80036a2:	4620      	mov	r0, r4
 80036a4:	b006      	add	sp, #24
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
						dp->lockid = 0;	/* Root directory need not to be locked */
 80036a8:	f241 031c 	movw	r3, #4124	; 0x101c
 80036ac:	50e8      	str	r0, [r5, r3]
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 80036ae:	e7f8      	b.n	80036a2 <f_opendir+0x92>
 80036b0:	2c04      	cmp	r4, #4
 80036b2:	d0d0      	beq.n	8003656 <f_opendir+0x46>
 80036b4:	e7d0      	b.n	8003658 <f_opendir+0x48>
							res = FR_TOO_MANY_OPEN_FILES;
 80036b6:	2412      	movs	r4, #18
 80036b8:	e7ce      	b.n	8003658 <f_opendir+0x48>
	if (!dp) return FR_INVALID_OBJECT;
 80036ba:	2409      	movs	r4, #9
 80036bc:	e7f1      	b.n	80036a2 <f_opendir+0x92>

080036be <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 80036be:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80036c0:	4605      	mov	r5, r0
 80036c2:	460e      	mov	r6, r1
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 80036c4:	f7ff f961 	bl	800298a <validate>
	if (res == FR_OK) {
 80036c8:	4604      	mov	r4, r0
 80036ca:	bb00      	cbnz	r0, 800370e <f_readdir+0x50>
		if (!fno) {
 80036cc:	b92e      	cbnz	r6, 80036da <f_readdir+0x1c>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80036ce:	4601      	mov	r1, r0
 80036d0:	4628      	mov	r0, r5
 80036d2:	f7ff fc2e 	bl	8002f32 <dir_sdi>
 80036d6:	4604      	mov	r4, r0
 80036d8:	e019      	b.n	800370e <f_readdir+0x50>
		} else {
			INIT_BUF(*dp);
 80036da:	f241 0318 	movw	r3, #4120	; 0x1018
 80036de:	aa01      	add	r2, sp, #4
 80036e0:	50ea      	str	r2, [r5, r3]
			res = dir_read(dp, 0);			/* Read an item */
 80036e2:	4628      	mov	r0, r5
 80036e4:	f7ff ff2a 	bl	800353c <dir_read.constprop.0>
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 80036e8:	2804      	cmp	r0, #4
 80036ea:	d113      	bne.n	8003714 <f_readdir+0x56>
				dp->sect = 0;
 80036ec:	f241 0310 	movw	r3, #4112	; 0x1010
 80036f0:	50ec      	str	r4, [r5, r3]
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dp, fno);		/* Get the object information */
 80036f2:	4631      	mov	r1, r6
 80036f4:	4628      	mov	r0, r5
 80036f6:	f7ff f901 	bl	80028fc <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80036fa:	2100      	movs	r1, #0
 80036fc:	4628      	mov	r0, r5
 80036fe:	f7ff fd85 	bl	800320c <dir_next>
				if (res == FR_NO_FILE) {
 8003702:	2804      	cmp	r0, #4
 8003704:	d1e7      	bne.n	80036d6 <f_readdir+0x18>
					dp->sect = 0;
 8003706:	f241 0310 	movw	r3, #4112	; 0x1010
 800370a:	2200      	movs	r2, #0
 800370c:	50ea      	str	r2, [r5, r3]
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
}
 800370e:	4620      	mov	r0, r4
 8003710:	b004      	add	sp, #16
 8003712:	bd70      	pop	{r4, r5, r6, pc}
			if (res == FR_OK) {				/* A valid entry is found */
 8003714:	2800      	cmp	r0, #0
 8003716:	d1de      	bne.n	80036d6 <f_readdir+0x18>
 8003718:	e7eb      	b.n	80036f2 <f_readdir+0x34>
	...

0800371c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800371c:	b530      	push	{r4, r5, lr}
  uint8_t ret = 1;
  uint8_t DiskNum = 0;
  
  if(disk.nbr <= _VOLUMES)
 800371e:	4b0f      	ldr	r3, [pc, #60]	; (800375c <FATFS_LinkDriverEx+0x40>)
{
 8003720:	4605      	mov	r5, r0
  if(disk.nbr <= _VOLUMES)
 8003722:	7a58      	ldrb	r0, [r3, #9]
 8003724:	2801      	cmp	r0, #1
 8003726:	d816      	bhi.n	8003756 <FATFS_LinkDriverEx+0x3a>
  {
    disk.is_initialized[disk.nbr] = 0;
 8003728:	7a5c      	ldrb	r4, [r3, #9]
 800372a:	b2e4      	uxtb	r4, r4
 800372c:	2000      	movs	r0, #0
 800372e:	5518      	strb	r0, [r3, r4]
    disk.drv[disk.nbr] = drv;  
 8003730:	7a5c      	ldrb	r4, [r3, #9]
 8003732:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8003736:	6065      	str	r5, [r4, #4]
    disk.lun[disk.nbr] = lun;  
 8003738:	7a5c      	ldrb	r4, [r3, #9]
 800373a:	441c      	add	r4, r3
 800373c:	7222      	strb	r2, [r4, #8]
    DiskNum = disk.nbr++;
 800373e:	7a5a      	ldrb	r2, [r3, #9]
 8003740:	1c54      	adds	r4, r2, #1
 8003742:	b2e4      	uxtb	r4, r4
 8003744:	725c      	strb	r4, [r3, #9]
    path[0] = DiskNum + '0';
    path[1] = ':';
 8003746:	233a      	movs	r3, #58	; 0x3a
    path[0] = DiskNum + '0';
 8003748:	3230      	adds	r2, #48	; 0x30
    path[1] = ':';
 800374a:	704b      	strb	r3, [r1, #1]
    path[2] = '/';
 800374c:	232f      	movs	r3, #47	; 0x2f
    path[0] = DiskNum + '0';
 800374e:	700a      	strb	r2, [r1, #0]
    path[2] = '/';
 8003750:	708b      	strb	r3, [r1, #2]
    path[3] = 0;
 8003752:	70c8      	strb	r0, [r1, #3]
    ret = 0;
  }
  
  return ret;
}
 8003754:	bd30      	pop	{r4, r5, pc}
  uint8_t ret = 1;
 8003756:	2001      	movs	r0, #1
 8003758:	e7fc      	b.n	8003754 <FATFS_LinkDriverEx+0x38>
 800375a:	bf00      	nop
 800375c:	200000e4 	.word	0x200000e4

08003760 <FATFS_LinkDriver>:
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
  return FATFS_LinkDriverEx(drv, path, 0);
 8003760:	2200      	movs	r2, #0
 8003762:	f7ff bfdb 	b.w	800371c <FATFS_LinkDriverEx>
	...

08003768 <buz_fn>:
 */

#include "main.h"

void buz_fn(int ac, char *av[])
{
 8003768:	b570      	push	{r4, r5, r6, lr}
	int i;
    printf("BUZZER...\n");
 800376a:	480a      	ldr	r0, [pc, #40]	; (8003794 <buz_fn+0x2c>)
    for( i = 0 ; i < 100 ; i ++)

    {
                  BUZZER_GPIO_Port->BSRR = BUZZER_Pin;
 800376c:	4d0a      	ldr	r5, [pc, #40]	; (8003798 <buz_fn+0x30>)
    printf("BUZZER...\n");
 800376e:	f002 fa51 	bl	8005c14 <puts>
 8003772:	2464      	movs	r4, #100	; 0x64
                  BUZZER_GPIO_Port->BSRR = BUZZER_Pin;
 8003774:	f44f 4600 	mov.w	r6, #32768	; 0x8000
                  HAL_Delay(2);
 8003778:	2002      	movs	r0, #2
                  BUZZER_GPIO_Port->BSRR = BUZZER_Pin;
 800377a:	612e      	str	r6, [r5, #16]
                  HAL_Delay(2);
 800377c:	f7fc fd90 	bl	80002a0 <HAL_Delay>
                  BUZZER_GPIO_Port->BSRR = BUZZER_Pin << 16;
 8003780:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003784:	612b      	str	r3, [r5, #16]
                  HAL_Delay(2);
 8003786:	2002      	movs	r0, #2
 8003788:	f7fc fd8a 	bl	80002a0 <HAL_Delay>
    for( i = 0 ; i < 100 ; i ++)
 800378c:	3c01      	subs	r4, #1
 800378e:	d1f3      	bne.n	8003778 <buz_fn+0x10>
    }
}
 8003790:	bd70      	pop	{r4, r5, r6, pc}
 8003792:	bf00      	nop
 8003794:	08006b51 	.word	0x08006b51
 8003798:	40010800 	.word	0x40010800

0800379c <cds_fn>:
#include "main.h"

extern ADC_HandleTypeDef hadc1;
extern void buz_fn(int ac, char *av[]);
void cds_fn(int ac, char *av[])
{
 800379c:	b510      	push	{r4, lr}
	static int adc_started = 0;
	int val;
    printf("CDS(ADC)...\t");
 800379e:	4811      	ldr	r0, [pc, #68]	; (80037e4 <cds_fn+0x48>)
 80037a0:	f002 f9b2 	bl	8005b08 <iprintf>
//	if(!adc_started)
	{
		HAL_ADC_Start(&hadc1);
 80037a4:	4810      	ldr	r0, [pc, #64]	; (80037e8 <cds_fn+0x4c>)
 80037a6:	f7fc fef9 	bl	800059c <HAL_ADC_Start>
		adc_started = 1;
	}
    HAL_ADC_PollForConversion(&hadc1,1000);
 80037aa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80037ae:	480e      	ldr	r0, [pc, #56]	; (80037e8 <cds_fn+0x4c>)
 80037b0:	f7fc fd8a 	bl	80002c8 <HAL_ADC_PollForConversion>
      val = HAL_ADC_GetValue(&hadc1);
 80037b4:	480c      	ldr	r0, [pc, #48]	; (80037e8 <cds_fn+0x4c>)
 80037b6:	f7fc fe33 	bl	8000420 <HAL_ADC_GetValue>
    if(val < 1000) buz_fn(0,0);
 80037ba:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
      val = HAL_ADC_GetValue(&hadc1);
 80037be:	4604      	mov	r4, r0
    if(val < 1000) buz_fn(0,0);
 80037c0:	da03      	bge.n	80037ca <cds_fn+0x2e>
 80037c2:	2100      	movs	r1, #0
 80037c4:	4608      	mov	r0, r1
 80037c6:	f7ff ffcf 	bl	8003768 <buz_fn>
    printf("adc val = %d\n",val);
 80037ca:	4621      	mov	r1, r4
 80037cc:	4807      	ldr	r0, [pc, #28]	; (80037ec <cds_fn+0x50>)
 80037ce:	f002 f99b 	bl	8005b08 <iprintf>
    CLCD_printf(0,0,"ADC VAL= %04d  ",val);
 80037d2:	2100      	movs	r1, #0
 80037d4:	4623      	mov	r3, r4
 80037d6:	4a06      	ldr	r2, [pc, #24]	; (80037f0 <cds_fn+0x54>)
}
 80037d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    CLCD_printf(0,0,"ADC VAL= %04d  ",val);
 80037dc:	4608      	mov	r0, r1
 80037de:	f000 b89f 	b.w	8003920 <CLCD_printf>
 80037e2:	bf00      	nop
 80037e4:	08006b5b 	.word	0x08006b5b
 80037e8:	200043b4 	.word	0x200043b4
 80037ec:	08006b68 	.word	0x08006b68
 80037f0:	08006b76 	.word	0x08006b76

080037f4 <CLCD_cmd>:
#define E_PULSE   E_HIGH; delay_us(1); E_LOW; delay_us(9)

//extern void delay_us();
extern void(*polling_fn)();
void CLCD_cmd(uint8_t cmd)
{
 80037f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	RS_LOW;// RS = 0
 80037f8:	4d16      	ldr	r5, [pc, #88]	; (8003854 <CLCD_cmd+0x60>)
//	HAL_Delay(10);

	GPIOC->ODR = (GPIOC->ODR & ~(0xF << 5)) | ((cmd & 0xf0) << 1);
	E_PULSE;
 80037fa:	4e17      	ldr	r6, [pc, #92]	; (8003858 <CLCD_cmd+0x64>)
	RS_LOW;// RS = 0
 80037fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003800:	612b      	str	r3, [r5, #16]
	GPIOC->ODR = (GPIOC->ODR & ~(0xF << 5)) | ((cmd & 0xf0) << 1);
 8003802:	68ea      	ldr	r2, [r5, #12]
 8003804:	0043      	lsls	r3, r0, #1
 8003806:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 800380a:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 800380e:	4313      	orrs	r3, r2
	E_PULSE;
 8003810:	f44f 5880 	mov.w	r8, #4096	; 0x1000
	GPIOC->ODR = (GPIOC->ODR & ~(0xF << 5)) | ((cmd & 0xf0) << 1);
 8003814:	60eb      	str	r3, [r5, #12]
	E_PULSE;
 8003816:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
{
 800381a:	4604      	mov	r4, r0
	E_PULSE;
 800381c:	f8c6 8010 	str.w	r8, [r6, #16]
 8003820:	2001      	movs	r0, #1
 8003822:	f7fc fd3d 	bl	80002a0 <HAL_Delay>
 8003826:	6137      	str	r7, [r6, #16]
 8003828:	2001      	movs	r0, #1
 800382a:	f7fc fd39 	bl	80002a0 <HAL_Delay>
	GPIOC->ODR = (GPIOC->ODR & ~(0xF << 5)) | ((cmd & 0xf) << 5);
 800382e:	68eb      	ldr	r3, [r5, #12]
 8003830:	0164      	lsls	r4, r4, #5
 8003832:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 8003836:	f404 74f0 	and.w	r4, r4, #480	; 0x1e0
 800383a:	431c      	orrs	r4, r3
 800383c:	60ec      	str	r4, [r5, #12]
	E_PULSE;
 800383e:	2001      	movs	r0, #1
 8003840:	f8c6 8010 	str.w	r8, [r6, #16]
 8003844:	f7fc fd2c 	bl	80002a0 <HAL_Delay>
 8003848:	6137      	str	r7, [r6, #16]
 800384a:	2001      	movs	r0, #1
//	HAL_Delay(10);
}
 800384c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	E_PULSE;
 8003850:	f7fc bd26 	b.w	80002a0 <HAL_Delay>
 8003854:	40011000 	.word	0x40011000
 8003858:	40010800 	.word	0x40010800

0800385c <CLCD_cmd_high_nibble>:

void CLCD_cmd_high_nibble(uint8_t cmd)
{
	RS_LOW;// RS = 0
 800385c:	4b0d      	ldr	r3, [pc, #52]	; (8003894 <CLCD_cmd_high_nibble+0x38>)
 800385e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
{
 8003862:	b510      	push	{r4, lr}
	RS_LOW;// RS = 0
 8003864:	611a      	str	r2, [r3, #16]
//	HAL_Delay(10);

	GPIOC->ODR = (GPIOC->ODR & ~(0xF << 5)) | ((cmd & 0xf0) << 1);
 8003866:	68da      	ldr	r2, [r3, #12]
	E_PULSE;
 8003868:	4c0b      	ldr	r4, [pc, #44]	; (8003898 <CLCD_cmd_high_nibble+0x3c>)
	GPIOC->ODR = (GPIOC->ODR & ~(0xF << 5)) | ((cmd & 0xf0) << 1);
 800386a:	0040      	lsls	r0, r0, #1
 800386c:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 8003870:	f400 70f0 	and.w	r0, r0, #480	; 0x1e0
 8003874:	4310      	orrs	r0, r2
 8003876:	60d8      	str	r0, [r3, #12]
	E_PULSE;
 8003878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800387c:	6123      	str	r3, [r4, #16]
 800387e:	2001      	movs	r0, #1
 8003880:	f7fc fd0e 	bl	80002a0 <HAL_Delay>
 8003884:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003888:	6123      	str	r3, [r4, #16]
 800388a:	2001      	movs	r0, #1
//	HAL_Delay(10);
}
 800388c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	E_PULSE;
 8003890:	f7fc bd06 	b.w	80002a0 <HAL_Delay>
 8003894:	40011000 	.word	0x40011000
 8003898:	40010800 	.word	0x40010800

0800389c <CLCD_data>:

void CLCD_data(uint8_t data)
{
 800389c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	RS_HIGH; // RS = 1
 80038a0:	4d18      	ldr	r5, [pc, #96]	; (8003904 <CLCD_data+0x68>)
	HAL_Delay(1);

	GPIOC->ODR = (GPIOC->ODR & ~(0xF << 5)) | ((data & 0xf0) << 1);
	E_PULSE;
 80038a2:	4e19      	ldr	r6, [pc, #100]	; (8003908 <CLCD_data+0x6c>)
	RS_HIGH; // RS = 1
 80038a4:	f44f 7300 	mov.w	r3, #512	; 0x200
{
 80038a8:	4604      	mov	r4, r0
	RS_HIGH; // RS = 1
 80038aa:	612b      	str	r3, [r5, #16]
	HAL_Delay(1);
 80038ac:	2001      	movs	r0, #1
 80038ae:	f7fc fcf7 	bl	80002a0 <HAL_Delay>
	GPIOC->ODR = (GPIOC->ODR & ~(0xF << 5)) | ((data & 0xf0) << 1);
 80038b2:	68ea      	ldr	r2, [r5, #12]
 80038b4:	0063      	lsls	r3, r4, #1
 80038b6:	f422 72f0 	bic.w	r2, r2, #480	; 0x1e0
 80038ba:	f403 73f0 	and.w	r3, r3, #480	; 0x1e0
 80038be:	4313      	orrs	r3, r2
	E_PULSE;
 80038c0:	f44f 5880 	mov.w	r8, #4096	; 0x1000
	GPIOC->ODR = (GPIOC->ODR & ~(0xF << 5)) | ((data & 0xf0) << 1);
 80038c4:	60eb      	str	r3, [r5, #12]
	E_PULSE;
 80038c6:	f04f 5780 	mov.w	r7, #268435456	; 0x10000000
 80038ca:	f8c6 8010 	str.w	r8, [r6, #16]
 80038ce:	2001      	movs	r0, #1
 80038d0:	f7fc fce6 	bl	80002a0 <HAL_Delay>
 80038d4:	6137      	str	r7, [r6, #16]
 80038d6:	2001      	movs	r0, #1
 80038d8:	f7fc fce2 	bl	80002a0 <HAL_Delay>

	GPIOC->ODR = (GPIOC->ODR & ~(0xF << 5)) | ((data & 0xf) << 5);
 80038dc:	68eb      	ldr	r3, [r5, #12]
 80038de:	0164      	lsls	r4, r4, #5
 80038e0:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80038e4:	f404 74f0 	and.w	r4, r4, #480	; 0x1e0
 80038e8:	431c      	orrs	r4, r3
 80038ea:	60ec      	str	r4, [r5, #12]
	E_PULSE;
 80038ec:	2001      	movs	r0, #1
 80038ee:	f8c6 8010 	str.w	r8, [r6, #16]
 80038f2:	f7fc fcd5 	bl	80002a0 <HAL_Delay>
 80038f6:	6137      	str	r7, [r6, #16]
 80038f8:	2001      	movs	r0, #1
//	HAL_Delay(1);
}
 80038fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	E_PULSE;
 80038fe:	f7fc bccf 	b.w	80002a0 <HAL_Delay>
 8003902:	bf00      	nop
 8003904:	40011000 	.word	0x40011000
 8003908:	40010800 	.word	0x40010800

0800390c <CLCD_puts>:
void CLCD_puts(uint8_t *str)
{
 800390c:	b510      	push	{r4, lr}
 800390e:	1e44      	subs	r4, r0, #1
	while(*str) {
 8003910:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8003914:	b900      	cbnz	r0, 8003918 <CLCD_puts+0xc>
		CLCD_data(*str++);
	}
}
 8003916:	bd10      	pop	{r4, pc}
		CLCD_data(*str++);
 8003918:	f7ff ffc0 	bl	800389c <CLCD_data>
 800391c:	e7f8      	b.n	8003910 <CLCD_puts+0x4>
	...

08003920 <CLCD_printf>:

#include <stdarg.h>

static char buf[80];
void CLCD_printf(uint8_t x, uint8_t y, uint8_t *str,...)
{
 8003920:	b40c      	push	{r2, r3}
 8003922:	b573      	push	{r0, r1, r4, r5, r6, lr}
	va_list argp;
	va_start(argp,str);
	vsprintf(buf,str,argp);
 8003924:	4e0b      	ldr	r6, [pc, #44]	; (8003954 <CLCD_printf+0x34>)
{
 8003926:	aa06      	add	r2, sp, #24
 8003928:	4604      	mov	r4, r0
 800392a:	460d      	mov	r5, r1
	vsprintf(buf,str,argp);
 800392c:	4630      	mov	r0, r6
{
 800392e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(argp,str);
 8003932:	9201      	str	r2, [sp, #4]
	vsprintf(buf,str,argp);
 8003934:	f002 fa08 	bl	8005d48 <vsiprintf>
	CLCD_cmd(0x80 + 0x40*y + x);
 8003938:	1ca8      	adds	r0, r5, #2
 800393a:	eb04 1080 	add.w	r0, r4, r0, lsl #6
 800393e:	b2c0      	uxtb	r0, r0
 8003940:	f7ff ff58 	bl	80037f4 <CLCD_cmd>
//	HAL_Delay(10);
	CLCD_puts(buf);
 8003944:	4630      	mov	r0, r6
 8003946:	f7ff ffe1 	bl	800390c <CLCD_puts>
	va_end(argp);
}
 800394a:	b002      	add	sp, #8
 800394c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003950:	b002      	add	sp, #8
 8003952:	4770      	bx	lr
 8003954:	200000f0 	.word	0x200000f0

08003958 <CLCD_init>:
void CLCD_init()
{
 8003958:	b508      	push	{r3, lr}

	CLCD_cmd_high_nibble(0x30);
 800395a:	2030      	movs	r0, #48	; 0x30
 800395c:	f7ff ff7e 	bl	800385c <CLCD_cmd_high_nibble>
	CLCD_cmd_high_nibble(0x30);
 8003960:	2030      	movs	r0, #48	; 0x30
 8003962:	f7ff ff7b 	bl	800385c <CLCD_cmd_high_nibble>
	CLCD_cmd_high_nibble(0x30);
 8003966:	2030      	movs	r0, #48	; 0x30
 8003968:	f7ff ff78 	bl	800385c <CLCD_cmd_high_nibble>
	CLCD_cmd_high_nibble(0x20);
 800396c:	2020      	movs	r0, #32
 800396e:	f7ff ff75 	bl	800385c <CLCD_cmd_high_nibble>
	CLCD_cmd(BIT4_LINE2_DOT58);
 8003972:	2028      	movs	r0, #40	; 0x28
 8003974:	f7ff ff3e 	bl	80037f4 <CLCD_cmd>
	CLCD_cmd(DISPON_CUROFF_BLKOFF);
 8003978:	200c      	movs	r0, #12
 800397a:	f7ff ff3b 	bl	80037f4 <CLCD_cmd>
	CLCD_cmd(INC_NOSHIFT);
 800397e:	2006      	movs	r0, #6
 8003980:	f7ff ff38 	bl	80037f4 <CLCD_cmd>
	CLCD_cmd(DISPCLEAR);
 8003984:	2001      	movs	r0, #1
 8003986:	f7ff ff35 	bl	80037f4 <CLCD_cmd>

	HAL_Delay(2);
 800398a:	2002      	movs	r0, #2
 800398c:	f7fc fc88 	bl	80002a0 <HAL_Delay>
	CLCD_cmd(CUR1LINE);
 8003990:	2080      	movs	r0, #128	; 0x80
 8003992:	f7ff ff2f 	bl	80037f4 <CLCD_cmd>
	HAL_Delay(2);
 8003996:	2002      	movs	r0, #2
 8003998:	f7fc fc82 	bl	80002a0 <HAL_Delay>
	CLCD_puts("Hi~ holic~");
 800399c:	4805      	ldr	r0, [pc, #20]	; (80039b4 <CLCD_init+0x5c>)
 800399e:	f7ff ffb5 	bl	800390c <CLCD_puts>
	HAL_Delay(2);
 80039a2:	2002      	movs	r0, #2
 80039a4:	f7fc fc7c 	bl	80002a0 <HAL_Delay>
	CLCD_cmd(CUR2LINE);
}
 80039a8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	CLCD_cmd(CUR2LINE);
 80039ac:	20c0      	movs	r0, #192	; 0xc0
 80039ae:	f7ff bf21 	b.w	80037f4 <CLCD_cmd>
 80039b2:	bf00      	nop
 80039b4:	08006b86 	.word	0x08006b86

080039b8 <clcd_fn>:

void clcd_fn(int ac, char *av[])
{
 80039b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int i;
	char buf[16];
    printf("CLCD...\n");
 80039ba:	4812      	ldr	r0, [pc, #72]	; (8003a04 <clcd_fn+0x4c>)
 80039bc:	4d12      	ldr	r5, [pc, #72]	; (8003a08 <clcd_fn+0x50>)
	CLCD_init();
	CLCD_printf(0,0,"Welcome to JKIT");
	for( i = 0 ; i < 4 ; i ++)
	{
		sprintf(buf,"CLCD test..%c","-/-\\"[i%4]);
 80039be:	4e13      	ldr	r6, [pc, #76]	; (8003a0c <clcd_fn+0x54>)
    printf("CLCD...\n");
 80039c0:	f002 f928 	bl	8005c14 <puts>
	CLCD_init();
 80039c4:	f7ff ffc8 	bl	8003958 <CLCD_init>
	CLCD_printf(0,0,"Welcome to JKIT");
 80039c8:	2100      	movs	r1, #0
 80039ca:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <clcd_fn+0x58>)
 80039cc:	4608      	mov	r0, r1
 80039ce:	f7ff ffa7 	bl	8003920 <CLCD_printf>
	for( i = 0 ; i < 4 ; i ++)
 80039d2:	2400      	movs	r4, #0
		sprintf(buf,"CLCD test..%c","-/-\\"[i%4]);
 80039d4:	f815 2b01 	ldrb.w	r2, [r5], #1
 80039d8:	4631      	mov	r1, r6
 80039da:	4668      	mov	r0, sp
 80039dc:	f002 f932 	bl	8005c44 <siprintf>
		CLCD_printf(0,1,buf);
 80039e0:	466a      	mov	r2, sp
 80039e2:	2101      	movs	r1, #1
 80039e4:	2000      	movs	r0, #0
 80039e6:	f7ff ff9b 	bl	8003920 <CLCD_printf>
	for( i = 0 ; i < 4 ; i ++)
 80039ea:	3401      	adds	r4, #1
		HAL_Delay(200);
 80039ec:	20c8      	movs	r0, #200	; 0xc8
 80039ee:	f7fc fc57 	bl	80002a0 <HAL_Delay>
	for( i = 0 ; i < 4 ; i ++)
 80039f2:	2c04      	cmp	r4, #4
 80039f4:	d1ee      	bne.n	80039d4 <clcd_fn+0x1c>
	}
	CLCD_printf(0,1,"CLCD test done");
 80039f6:	4a07      	ldr	r2, [pc, #28]	; (8003a14 <clcd_fn+0x5c>)
 80039f8:	2101      	movs	r1, #1
 80039fa:	2000      	movs	r0, #0
 80039fc:	f7ff ff90 	bl	8003920 <CLCD_printf>
}
 8003a00:	b004      	add	sp, #16
 8003a02:	bd70      	pop	{r4, r5, r6, pc}
 8003a04:	08006b91 	.word	0x08006b91
 8003a08:	08006ba9 	.word	0x08006ba9
 8003a0c:	08006bae 	.word	0x08006bae
 8003a10:	08006b99 	.word	0x08006b99
 8003a14:	08006bbc 	.word	0x08006bbc

08003a18 <help>:
		{"all",  run_all,    "Run all the function"},
		{"help", help,        ""}
};

void help(int ac, char *av[])
{
 8003a18:	b570      	push	{r4, r5, r6, lr}
	int i;
	printf("CMDS\n");
 8003a1a:	4808      	ldr	r0, [pc, #32]	; (8003a3c <help+0x24>)
 8003a1c:	4d08      	ldr	r5, [pc, #32]	; (8003a40 <help+0x28>)
	for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
	{
		printf("[%s] %s\n",cmd_tbl[i].cmd,cmd_tbl[i].help);
 8003a1e:	4e09      	ldr	r6, [pc, #36]	; (8003a44 <help+0x2c>)
	printf("CMDS\n");
 8003a20:	f002 f8f8 	bl	8005c14 <puts>
	for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
 8003a24:	2400      	movs	r4, #0
		printf("[%s] %s\n",cmd_tbl[i].cmd,cmd_tbl[i].help);
 8003a26:	68aa      	ldr	r2, [r5, #8]
 8003a28:	f855 1b0c 	ldr.w	r1, [r5], #12
 8003a2c:	4630      	mov	r0, r6
	for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
 8003a2e:	3401      	adds	r4, #1
		printf("[%s] %s\n",cmd_tbl[i].cmd,cmd_tbl[i].help);
 8003a30:	f002 f86a 	bl	8005b08 <iprintf>
	for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
 8003a34:	2c0c      	cmp	r4, #12
 8003a36:	d1f6      	bne.n	8003a26 <help+0xe>
	}
}
 8003a38:	bd70      	pop	{r4, r5, r6, pc}
 8003a3a:	bf00      	nop
 8003a3c:	08006bcb 	.word	0x08006bcb
 8003a40:	08006ca4 	.word	0x08006ca4
 8003a44:	08006bd0 	.word	0x08006bd0

08003a48 <exec_cmd>:
#include "string.h"

int exec_cmd(uint8_t *cmd, int ac,char *av[])
{
 8003a48:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int i;
	for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
	{
		if(!strcmp(cmd, cmd_tbl[i].cmd))
 8003a4c:	4e0e      	ldr	r6, [pc, #56]	; (8003a88 <exec_cmd+0x40>)
{
 8003a4e:	4607      	mov	r7, r0
 8003a50:	4688      	mov	r8, r1
 8003a52:	4691      	mov	r9, r2
	for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
 8003a54:	2500      	movs	r5, #0
		if(!strcmp(cmd, cmd_tbl[i].cmd))
 8003a56:	f04f 0b0c 	mov.w	fp, #12
 8003a5a:	fb0b fa05 	mul.w	sl, fp, r5
 8003a5e:	4638      	mov	r0, r7
 8003a60:	f85a 1006 	ldr.w	r1, [sl, r6]
 8003a64:	f7fc fb74 	bl	8000150 <strcmp>
 8003a68:	4604      	mov	r4, r0
 8003a6a:	b938      	cbnz	r0, 8003a7c <exec_cmd+0x34>
		{
			cmd_tbl[i].fn(ac, av);
 8003a6c:	4456      	add	r6, sl
 8003a6e:	4649      	mov	r1, r9
 8003a70:	6873      	ldr	r3, [r6, #4]
 8003a72:	4640      	mov	r0, r8
 8003a74:	4798      	blx	r3
			return 0;
		}
	}
	return -1;
}
 8003a76:	4620      	mov	r0, r4
 8003a78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for( i = 0 ; i < sizeof(cmd_tbl) / sizeof(cmd_tbl[0]) ; i ++)
 8003a7c:	3501      	adds	r5, #1
 8003a7e:	2d0c      	cmp	r5, #12
 8003a80:	d1eb      	bne.n	8003a5a <exec_cmd+0x12>
	return -1;
 8003a82:	f04f 34ff 	mov.w	r4, #4294967295
 8003a86:	e7f6      	b.n	8003a76 <exec_cmd+0x2e>
 8003a88:	08006ca4 	.word	0x08006ca4

08003a8c <get_args>:

extern void my_putchar(char c);
int get_args(char *buf, char *av[])
{
 8003a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
        int     num, start, end;
        start = end = num = 0;
 8003a90:	2500      	movs	r5, #0
{
 8003a92:	4606      	mov	r6, r0
 8003a94:	460f      	mov	r7, r1
 8003a96:	4680      	mov	r8, r0
        start = end = num = 0;
 8003a98:	462a      	mov	r2, r5
 8003a9a:	462c      	mov	r4, r5
                if(buf[end] != ' ' && buf[end] != '\t' ) {
                        end ++;
                }
                else
                {
                        buf[end] = 0;
 8003a9c:	46a9      	mov	r9, r5
                if(buf[end] == '\0' || buf[end] == '\n' || buf[end] == '\r')
 8003a9e:	4641      	mov	r1, r8
 8003aa0:	f818 3b01 	ldrb.w	r3, [r8], #1
 8003aa4:	b12b      	cbz	r3, 8003ab2 <get_args+0x26>
 8003aa6:	2b0a      	cmp	r3, #10
 8003aa8:	d001      	beq.n	8003aae <get_args+0x22>
 8003aaa:	2b0d      	cmp	r3, #13
 8003aac:	d10c      	bne.n	8003ac8 <get_args+0x3c>
                        if(buf[end]) buf[end] = '\0';
 8003aae:	2300      	movs	r3, #0
 8003ab0:	700b      	strb	r3, [r1, #0]
                        if(start != end)
 8003ab2:	42aa      	cmp	r2, r5
 8003ab4:	d005      	beq.n	8003ac2 <get_args+0x36>
                                strcpy(av[num],buf+start);
 8003ab6:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8003aba:	18b1      	adds	r1, r6, r2
 8003abc:	f002 f925 	bl	8005d0a <strcpy>
                                num ++;
 8003ac0:	3401      	adds	r4, #1
                        end ++;
                        start = end ;
                }
        }
        return 0;
}
 8003ac2:	4620      	mov	r0, r4
 8003ac4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if(buf[end] != ' ' && buf[end] != '\t' ) {
 8003ac8:	2b20      	cmp	r3, #32
 8003aca:	f105 0501 	add.w	r5, r5, #1
 8003ace:	d001      	beq.n	8003ad4 <get_args+0x48>
 8003ad0:	2b09      	cmp	r3, #9
 8003ad2:	d1e4      	bne.n	8003a9e <get_args+0x12>
                        buf[end] = 0;
 8003ad4:	f808 9c01 	strb.w	r9, [r8, #-1]
                        strcpy(av[num],buf+start);
 8003ad8:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 8003adc:	18b1      	adds	r1, r6, r2
 8003ade:	f002 f914 	bl	8005d0a <strcpy>
                        num ++;
 8003ae2:	3401      	adds	r4, #1
                        start = end ;
 8003ae4:	462a      	mov	r2, r5
 8003ae6:	e7da      	b.n	8003a9e <get_args+0x12>

08003ae8 <do_cmd>:
const char *prompt="jkit";
char *version="nucleo64";
static char cmd_buf[32]; //,old_buf[64];
static int idx = 0;
int do_cmd(char ch)
{
 8003ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}

        char buf[64];
        int ac,i;
        if(ch == '\n' || ch == '\r')
 8003aec:	280a      	cmp	r0, #10
 8003aee:	4d35      	ldr	r5, [pc, #212]	; (8003bc4 <do_cmd+0xdc>)
{
 8003af0:	b090      	sub	sp, #64	; 0x40
 8003af2:	4604      	mov	r4, r0
        if(ch == '\n' || ch == '\r')
 8003af4:	d001      	beq.n	8003afa <do_cmd+0x12>
 8003af6:	280d      	cmp	r0, #13
 8003af8:	d14d      	bne.n	8003b96 <do_cmd+0xae>
        {
                 my_putchar('\n');
                 cmd_buf[idx] = '\0';
 8003afa:	4f33      	ldr	r7, [pc, #204]	; (8003bc8 <do_cmd+0xe0>)
                 {
                         strcpy(cmd_buf,old_buf);
                 }
#endif
                 strcpy(buf,cmd_buf);
                 for( i = 0 ; i < 6 ; i ++) av[i] = &avbuf[i][0];
 8003afc:	4c33      	ldr	r4, [pc, #204]	; (8003bcc <do_cmd+0xe4>)
 8003afe:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8003bdc <do_cmd+0xf4>
 8003b02:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8003be0 <do_cmd+0xf8>
                 my_putchar('\n');
 8003b06:	200a      	movs	r0, #10
 8003b08:	f001 f892 	bl	8004c30 <my_putchar>
                 cmd_buf[idx] = '\0';
 8003b0c:	f8d5 8000 	ldr.w	r8, [r5]
                 strcpy(buf,cmd_buf);
 8003b10:	4639      	mov	r1, r7
                 cmd_buf[idx] = '\0';
 8003b12:	2600      	movs	r6, #0
                 strcpy(buf,cmd_buf);
 8003b14:	4668      	mov	r0, sp
                 cmd_buf[idx] = '\0';
 8003b16:	f807 6008 	strb.w	r6, [r7, r8]
                 strcpy(buf,cmd_buf);
 8003b1a:	f002 f8f6 	bl	8005d0a <strcpy>
                 for( i = 0 ; i < 6 ; i ++) av[i] = &avbuf[i][0];
 8003b1e:	4b2c      	ldr	r3, [pc, #176]	; (8003bd0 <do_cmd+0xe8>)
 8003b20:	6023      	str	r3, [r4, #0]
 8003b22:	f103 020a 	add.w	r2, r3, #10
 8003b26:	6062      	str	r2, [r4, #4]
 8003b28:	f103 0214 	add.w	r2, r3, #20
 8003b2c:	60a2      	str	r2, [r4, #8]
 8003b2e:	f103 021e 	add.w	r2, r3, #30
 8003b32:	60e2      	str	r2, [r4, #12]
                 ac = get_args(cmd_buf, av);
 8003b34:	4621      	mov	r1, r4
                 for( i = 0 ; i < 6 ; i ++) av[i] = &avbuf[i][0];
 8003b36:	f103 0228 	add.w	r2, r3, #40	; 0x28
                 ac = get_args(cmd_buf, av);
 8003b3a:	4638      	mov	r0, r7
                 for( i = 0 ; i < 6 ; i ++) av[i] = &avbuf[i][0];
 8003b3c:	3332      	adds	r3, #50	; 0x32
 8003b3e:	6163      	str	r3, [r4, #20]
 8003b40:	6122      	str	r2, [r4, #16]
                 ac = get_args(cmd_buf, av);
 8003b42:	f7ff ffa3 	bl	8003a8c <get_args>
 8003b46:	4f23      	ldr	r7, [pc, #140]	; (8003bd4 <do_cmd+0xec>)
 8003b48:	4601      	mov	r1, r0
                 if(idx == 0 || !ac) {
 8003b4a:	4633      	mov	r3, r6
 8003b4c:	f1b8 0f00 	cmp.w	r8, #0
 8003b50:	d000      	beq.n	8003b54 <do_cmd+0x6c>
 8003b52:	b978      	cbnz	r0, 8003b74 <do_cmd+0x8c>
                         idx = 0;
                         printf("%s-%s> ",prompt,version); fflush(stdout);
 8003b54:	f8da 2000 	ldr.w	r2, [sl]
 8003b58:	f8d9 1000 	ldr.w	r1, [r9]
 8003b5c:	481e      	ldr	r0, [pc, #120]	; (8003bd8 <do_cmd+0xf0>)
                         idx = 0;
 8003b5e:	602b      	str	r3, [r5, #0]
                         printf("%s-%s> ",prompt,version); fflush(stdout);
 8003b60:	f001 ffd2 	bl	8005b08 <iprintf>
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6898      	ldr	r0, [r3, #8]
 8003b68:	f001 fdee 	bl	8005748 <fflush>
                 cmd_buf[idx++] = ch;   my_putchar(ch);
        }

        return 0;

}
 8003b6c:	2000      	movs	r0, #0
 8003b6e:	b010      	add	sp, #64	; 0x40
 8003b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                 exec_cmd(av[0],ac, av);
 8003b74:	4622      	mov	r2, r4
 8003b76:	6820      	ldr	r0, [r4, #0]
 8003b78:	f7ff ff66 	bl	8003a48 <exec_cmd>
                 printf("%s-%s> ",prompt,version); fflush(stdout);
 8003b7c:	f8da 2000 	ldr.w	r2, [sl]
 8003b80:	f8d9 1000 	ldr.w	r1, [r9]
 8003b84:	4814      	ldr	r0, [pc, #80]	; (8003bd8 <do_cmd+0xf0>)
 8003b86:	f001 ffbf 	bl	8005b08 <iprintf>
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	6898      	ldr	r0, [r3, #8]
 8003b8e:	f001 fddb 	bl	8005748 <fflush>
                 idx = 0;
 8003b92:	602e      	str	r6, [r5, #0]
 8003b94:	e7ea      	b.n	8003b6c <do_cmd+0x84>
        else if(ch == '\b')
 8003b96:	2808      	cmp	r0, #8
 8003b98:	682b      	ldr	r3, [r5, #0]
 8003b9a:	d10c      	bne.n	8003bb6 <do_cmd+0xce>
                 if(idx > 0) { idx --; my_putchar('\b'); my_putchar(' '); my_putchar('\b'); return 0;}
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	dde5      	ble.n	8003b6c <do_cmd+0x84>
 8003ba0:	3b01      	subs	r3, #1
 8003ba2:	602b      	str	r3, [r5, #0]
 8003ba4:	f001 f844 	bl	8004c30 <my_putchar>
 8003ba8:	2020      	movs	r0, #32
 8003baa:	f001 f841 	bl	8004c30 <my_putchar>
 8003bae:	4620      	mov	r0, r4
                 cmd_buf[idx++] = ch;   my_putchar(ch);
 8003bb0:	f001 f83e 	bl	8004c30 <my_putchar>
 8003bb4:	e7da      	b.n	8003b6c <do_cmd+0x84>
        else if(idx < 63) {
 8003bb6:	2b3e      	cmp	r3, #62	; 0x3e
 8003bb8:	dcd8      	bgt.n	8003b6c <do_cmd+0x84>
                 cmd_buf[idx++] = ch;   my_putchar(ch);
 8003bba:	1c5a      	adds	r2, r3, #1
 8003bbc:	602a      	str	r2, [r5, #0]
 8003bbe:	4a02      	ldr	r2, [pc, #8]	; (8003bc8 <do_cmd+0xe0>)
 8003bc0:	54d0      	strb	r0, [r2, r3]
 8003bc2:	e7f5      	b.n	8003bb0 <do_cmd+0xc8>
 8003bc4:	20000160 	.word	0x20000160
 8003bc8:	20000140 	.word	0x20000140
 8003bcc:	20000008 	.word	0x20000008
 8003bd0:	20000190 	.word	0x20000190
 8003bd4:	20000044 	.word	0x20000044
 8003bd8:	08006bd9 	.word	0x08006bd9
 8003bdc:	20000024 	.word	0x20000024
 8003be0:	20000020 	.word	0x20000020

08003be4 <print_dir>:
    xprintf("rc=%u FR_%s\n", (UINT)rc, str);
}

static int f_num = 0;
void print_dir()
{
 8003be4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    FRESULT res;
    char *ptr, *ptr2;
    long p1, p2, p3;
    unsigned int s1, s2, cnt;
//printf("In print_dir\n\r");
    res = f_opendir(&Dir, "/"); //ptr);
 8003be8:	4938      	ldr	r1, [pc, #224]	; (8003ccc <print_dir+0xe8>)
 8003bea:	4839      	ldr	r0, [pc, #228]	; (8003cd0 <print_dir+0xec>)
{
 8003bec:	b08b      	sub	sp, #44	; 0x2c
    res = f_opendir(&Dir, "/"); //ptr);
 8003bee:	f7ff fd0f 	bl	8003610 <f_opendir>
//    printf("Result = "); put_rc(res);
                if (res) { put_rc(res); return; }
 8003bf2:	4601      	mov	r1, r0
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	d153      	bne.n	8003ca0 <print_dir+0xbc>
                p1 = s1 = s2 = 0;
                for(;;) {
                    res = f_readdir(&Dir, &Finfo);
 8003bf8:	4c36      	ldr	r4, [pc, #216]	; (8003cd4 <print_dir+0xf0>)
 8003bfa:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8003cd0 <print_dir+0xec>
                    if (Finfo.fattrib & AM_DIR) {
                        s2++;
                    } else {
                        s1++; p1 += Finfo.fsize;
                    }
                    f_num ++;
 8003bfe:	4e36      	ldr	r6, [pc, #216]	; (8003cd8 <print_dir+0xf4>)
                    res = f_readdir(&Dir, &Finfo);
 8003c00:	4934      	ldr	r1, [pc, #208]	; (8003cd4 <print_dir+0xf0>)
 8003c02:	4648      	mov	r0, r9
 8003c04:	f7ff fd5b 	bl	80036be <f_readdir>
                    if ((res != FR_OK) || !Finfo.fname[0]) return;
 8003c08:	2800      	cmp	r0, #0
 8003c0a:	d15c      	bne.n	8003cc6 <print_dir+0xe2>
 8003c0c:	7a63      	ldrb	r3, [r4, #9]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d059      	beq.n	8003cc6 <print_dir+0xe2>
                    if (Finfo.fattrib & AM_DIR) {
 8003c12:	7a20      	ldrb	r0, [r4, #8]
                    f_num ++;
 8003c14:	6833      	ldr	r3, [r6, #0]
                            (Finfo.fattrib & AM_RDO) ? 'R' : '-',
                            (Finfo.fattrib & AM_HID) ? 'H' : '-',
                            (Finfo.fattrib & AM_SYS) ? 'S' : '-',
                            (Finfo.fattrib & AM_ARC) ? 'A' : '-',
                            (Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
                            (Finfo.ftime >> 11), (Finfo.ftime >> 5) & 63,
 8003c16:	88e5      	ldrh	r5, [r4, #6]
                    xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %-12s  %s\n",
 8003c18:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8003ce8 <print_dir+0x104>
 8003c1c:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8003c20:	f010 0f10 	tst.w	r0, #16
 8003c24:	bf14      	ite	ne
 8003c26:	2144      	movne	r1, #68	; 0x44
 8003c28:	212d      	moveq	r1, #45	; 0x2d
 8003c2a:	f010 0f01 	tst.w	r0, #1
                    f_num ++;
 8003c2e:	f103 0301 	add.w	r3, r3, #1
                    xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %-12s  %s\n",
 8003c32:	bf14      	ite	ne
 8003c34:	2252      	movne	r2, #82	; 0x52
 8003c36:	222d      	moveq	r2, #45	; 0x2d
 8003c38:	f010 0f02 	tst.w	r0, #2
                    f_num ++;
 8003c3c:	6033      	str	r3, [r6, #0]
                    xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %-12s  %s\n",
 8003c3e:	bf14      	ite	ne
 8003c40:	2348      	movne	r3, #72	; 0x48
 8003c42:	232d      	moveq	r3, #45	; 0x2d
 8003c44:	f010 0f04 	tst.w	r0, #4
 8003c48:	bf14      	ite	ne
 8003c4a:	f04f 0c53 	movne.w	ip, #83	; 0x53
 8003c4e:	f04f 0c2d 	moveq.w	ip, #45	; 0x2d
 8003c52:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8003cec <print_dir+0x108>
 8003c56:	f8cd 8020 	str.w	r8, [sp, #32]
 8003c5a:	f010 0f20 	tst.w	r0, #32
                            (Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
 8003c5e:	88a0      	ldrh	r0, [r4, #4]
                    xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %-12s  %s\n",
 8003c60:	6827      	ldr	r7, [r4, #0]
 8003c62:	9707      	str	r7, [sp, #28]
 8003c64:	f3c5 1845 	ubfx	r8, r5, #5, #6
 8003c68:	ea4f 25d5 	mov.w	r5, r5, lsr #11
 8003c6c:	9505      	str	r5, [sp, #20]
 8003c6e:	f000 051f 	and.w	r5, r0, #31
 8003c72:	9504      	str	r5, [sp, #16]
 8003c74:	f3c0 1543 	ubfx	r5, r0, #5, #4
                            (Finfo.fdate >> 9) + 1980, (Finfo.fdate >> 5) & 15, Finfo.fdate & 31,
 8003c78:	ea4f 2050 	mov.w	r0, r0, lsr #9
                    xprintf("%c%c%c%c%c %u/%02u/%02u %02u:%02u %9lu  %-12s  %s\n",
 8003c7c:	bf14      	ite	ne
 8003c7e:	f04f 0e41 	movne.w	lr, #65	; 0x41
 8003c82:	f04f 0e2d 	moveq.w	lr, #45	; 0x2d
 8003c86:	f200 70bc 	addw	r0, r0, #1980	; 0x7bc
 8003c8a:	e9cd e001 	strd	lr, r0, [sp, #4]
 8003c8e:	f8cd 8018 	str.w	r8, [sp, #24]
 8003c92:	9503      	str	r5, [sp, #12]
 8003c94:	f8cd c000 	str.w	ip, [sp]
 8003c98:	4810      	ldr	r0, [pc, #64]	; (8003cdc <print_dir+0xf8>)
 8003c9a:	f001 ff35 	bl	8005b08 <iprintf>
                for(;;) {
 8003c9e:	e7af      	b.n	8003c00 <print_dir+0x1c>
    const char *str =
 8003ca0:	4a0f      	ldr	r2, [pc, #60]	; (8003ce0 <print_dir+0xfc>)
    for (i = 0; i != rc && *str; i++) {
 8003ca2:	2300      	movs	r3, #0
        while (*str++) ;
 8003ca4:	f812 0b01 	ldrb.w	r0, [r2], #1
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	d1fb      	bne.n	8003ca4 <print_dir+0xc0>
 8003cac:	3301      	adds	r3, #1
 8003cae:	b2db      	uxtb	r3, r3
    for (i = 0; i != rc && *str; i++) {
 8003cb0:	4299      	cmp	r1, r3
 8003cb2:	d002      	beq.n	8003cba <print_dir+0xd6>
 8003cb4:	7810      	ldrb	r0, [r2, #0]
 8003cb6:	2800      	cmp	r0, #0
 8003cb8:	d1f4      	bne.n	8003ca4 <print_dir+0xc0>
    xprintf("rc=%u FR_%s\n", (UINT)rc, str);
 8003cba:	480a      	ldr	r0, [pc, #40]	; (8003ce4 <print_dir+0x100>)
                if (res == FR_OK)
                    xprintf(", %10lu bytes free\n", p1 * fs->csize * 512);
                else
                    put_rc(res);

}
 8003cbc:	b00b      	add	sp, #44	; 0x2c
 8003cbe:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    xprintf("rc=%u FR_%s\n", (UINT)rc, str);
 8003cc2:	f001 bf21 	b.w	8005b08 <iprintf>
}
 8003cc6:	b00b      	add	sp, #44	; 0x2c
 8003cc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ccc:	08006d34 	.word	0x08006d34
 8003cd0:	2000121c 	.word	0x2000121c
 8003cd4:	20001200 	.word	0x20001200
 8003cd8:	20000164 	.word	0x20000164
 8003cdc:	08006d43 	.word	0x08006d43
 8003ce0:	080069e0 	.word	0x080069e0
 8003ce4:	08006d36 	.word	0x08006d36
 8003ce8:	08006b67 	.word	0x08006b67
 8003cec:	20001209 	.word	0x20001209

08003cf0 <fatfs_test>:

static int mount_flag = 0;
void fatfs_test(void const * argument)
{
 8003cf0:	b570      	push	{r4, r5, r6, lr}

  int ret;
  int written,wb;
  uint32_t prev,cur,s,e;
  if(mount_flag == 0)
 8003cf2:	4d11      	ldr	r5, [pc, #68]	; (8003d38 <fatfs_test+0x48>)
 8003cf4:	682a      	ldr	r2, [r5, #0]
 8003cf6:	b94a      	cbnz	r2, 8003d0c <fatfs_test+0x1c>
  {
	  ret = f_mount(&FatFs,"0:", 1);
 8003cf8:	4910      	ldr	r1, [pc, #64]	; (8003d3c <fatfs_test+0x4c>)
 8003cfa:	4811      	ldr	r0, [pc, #68]	; (8003d40 <fatfs_test+0x50>)
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f7ff fc4f 	bl	80035a0 <f_mount>
 8003d02:	4604      	mov	r4, r0
	  printf("FATFS mount res = %d\n",ret);
 8003d04:	4601      	mov	r1, r0
 8003d06:	480f      	ldr	r0, [pc, #60]	; (8003d44 <fatfs_test+0x54>)
 8003d08:	f001 fefe 	bl	8005b08 <iprintf>
  }
  if(!ret) {
 8003d0c:	b96c      	cbnz	r4, 8003d2a <fatfs_test+0x3a>
	  mount_flag = 1;
 8003d0e:	2601      	movs	r6, #1
 8003d10:	602e      	str	r6, [r5, #0]
	  f_num = 0;
 8003d12:	4d0d      	ldr	r5, [pc, #52]	; (8003d48 <fatfs_test+0x58>)
 8003d14:	602c      	str	r4, [r5, #0]
	  print_dir();
 8003d16:	f7ff ff65 	bl	8003be4 <print_dir>
	  CLCD_printf(0,1,"FATOK #  = %05d",f_num);
 8003d1a:	682b      	ldr	r3, [r5, #0]
 8003d1c:	4a0b      	ldr	r2, [pc, #44]	; (8003d4c <fatfs_test+0x5c>)
 8003d1e:	4631      	mov	r1, r6
 8003d20:	4620      	mov	r0, r4
  else
  {
	  CLCD_printf(0,1,"FAT NOT OK     ");
  }
  return;
}
 8003d22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  CLCD_printf(0,1,"FATOK #  = %05d",f_num);
 8003d26:	f7ff bdfb 	b.w	8003920 <CLCD_printf>
}
 8003d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	  CLCD_printf(0,1,"FAT NOT OK     ");
 8003d2e:	4a08      	ldr	r2, [pc, #32]	; (8003d50 <fatfs_test+0x60>)
 8003d30:	2101      	movs	r1, #1
 8003d32:	2000      	movs	r0, #0
 8003d34:	f7ff bdf4 	b.w	8003920 <CLCD_printf>
 8003d38:	20000168 	.word	0x20000168
 8003d3c:	08006d76 	.word	0x08006d76
 8003d40:	200001d0 	.word	0x200001d0
 8003d44:	08006d79 	.word	0x08006d79
 8003d48:	20000164 	.word	0x20000164
 8003d4c:	08006d8f 	.word	0x08006d8f
 8003d50:	08006d9f 	.word	0x08006d9f

08003d54 <SPI_TxBuffer>:
}

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <SPI_TxBuffer+0x18>)
{
 8003d56:	460a      	mov	r2, r1
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003d58:	6819      	ldr	r1, [r3, #0]
 8003d5a:	688b      	ldr	r3, [r1, #8]
 8003d5c:	079b      	lsls	r3, r3, #30
 8003d5e:	d5fc      	bpl.n	8003d5a <SPI_TxBuffer+0x6>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8003d60:	4601      	mov	r1, r0
 8003d62:	2364      	movs	r3, #100	; 0x64
 8003d64:	4801      	ldr	r0, [pc, #4]	; (8003d6c <SPI_TxBuffer+0x18>)
 8003d66:	f7fd bfd7 	b.w	8001d18 <HAL_SPI_Transmit>
 8003d6a:	bf00      	nop
 8003d6c:	20004444 	.word	0x20004444

08003d70 <SPI_TxByte>:
{
 8003d70:	b507      	push	{r0, r1, r2, lr}
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003d72:	4b08      	ldr	r3, [pc, #32]	; (8003d94 <SPI_TxByte+0x24>)
{
 8003d74:	f88d 0007 	strb.w	r0, [sp, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003d78:	681a      	ldr	r2, [r3, #0]
 8003d7a:	6893      	ldr	r3, [r2, #8]
 8003d7c:	079b      	lsls	r3, r3, #30
 8003d7e:	d5fc      	bpl.n	8003d7a <SPI_TxByte+0xa>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8003d80:	2364      	movs	r3, #100	; 0x64
 8003d82:	2201      	movs	r2, #1
 8003d84:	f10d 0107 	add.w	r1, sp, #7
 8003d88:	4802      	ldr	r0, [pc, #8]	; (8003d94 <SPI_TxByte+0x24>)
 8003d8a:	f7fd ffc5 	bl	8001d18 <HAL_SPI_Transmit>
}
 8003d8e:	b003      	add	sp, #12
 8003d90:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d94:	20004444 	.word	0x20004444

08003d98 <SELECT>:
{
 8003d98:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8003d9a:	4805      	ldr	r0, [pc, #20]	; (8003db0 <SELECT+0x18>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	2102      	movs	r1, #2
 8003da0:	f7fc fea4 	bl	8000aec <HAL_GPIO_WritePin>
}
 8003da4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1);
 8003da8:	2001      	movs	r0, #1
 8003daa:	f7fc ba79 	b.w	80002a0 <HAL_Delay>
 8003dae:	bf00      	nop
 8003db0:	40010800 	.word	0x40010800

08003db4 <DESELECT>:
{
 8003db4:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8003db6:	4805      	ldr	r0, [pc, #20]	; (8003dcc <DESELECT+0x18>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	2102      	movs	r1, #2
 8003dbc:	f7fc fe96 	bl	8000aec <HAL_GPIO_WritePin>
}
 8003dc0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	HAL_Delay(1);
 8003dc4:	2001      	movs	r0, #1
 8003dc6:	f7fc ba6b 	b.w	80002a0 <HAL_Delay>
 8003dca:	bf00      	nop
 8003dcc:	40010800 	.word	0x40010800

08003dd0 <SPI_RxByte>:
}

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8003dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t dummy, data;
	dummy = 0xFF;
 8003dd2:	23ff      	movs	r3, #255	; 0xff
 8003dd4:	f88d 300e 	strb.w	r3, [sp, #14]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8003dd8:	4b09      	ldr	r3, [pc, #36]	; (8003e00 <SPI_RxByte+0x30>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	6893      	ldr	r3, [r2, #8]
 8003dde:	079b      	lsls	r3, r3, #30
 8003de0:	d5fc      	bpl.n	8003ddc <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8003de2:	2364      	movs	r3, #100	; 0x64
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	f10d 020f 	add.w	r2, sp, #15
 8003dea:	2301      	movs	r3, #1
 8003dec:	f10d 010e 	add.w	r1, sp, #14
 8003df0:	4803      	ldr	r0, [pc, #12]	; (8003e00 <SPI_RxByte+0x30>)
 8003df2:	f7fe f83e 	bl	8001e72 <HAL_SPI_TransmitReceive>

	return data;
}
 8003df6:	f89d 000f 	ldrb.w	r0, [sp, #15]
 8003dfa:	b005      	add	sp, #20
 8003dfc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e00:	20004444 	.word	0x20004444

08003e04 <SD_PowerOn>:
	return res;
}

/* power on */
static void SD_PowerOn(void)
{
 8003e04:	b513      	push	{r0, r1, r4, lr}
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;

	/* transmit bytes to wake up */
	DESELECT();
 8003e06:	f7ff ffd5 	bl	8003db4 <DESELECT>
 8003e0a:	240a      	movs	r4, #10
	for(int i = 0; i < 10; i++)
	{
		SPI_TxByte(0xFF);
 8003e0c:	20ff      	movs	r0, #255	; 0xff
 8003e0e:	f7ff ffaf 	bl	8003d70 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8003e12:	3c01      	subs	r4, #1
 8003e14:	d1fa      	bne.n	8003e0c <SD_PowerOn+0x8>
	}

	/* slave select */
	SELECT();
 8003e16:	f7ff ffbf 	bl	8003d98 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8003e1a:	2340      	movs	r3, #64	; 0x40
 8003e1c:	9300      	str	r3, [sp, #0]
	args[2] = 0;
	args[3] = 0;
	args[4] = 0;
	args[5] = 0x95;		/* CRC */

	SPI_TxBuffer(args, sizeof(args));
 8003e1e:	2106      	movs	r1, #6
	args[4] = 0;
 8003e20:	f44f 4315 	mov.w	r3, #38144	; 0x9500
	SPI_TxBuffer(args, sizeof(args));
 8003e24:	4668      	mov	r0, sp
	args[4] = 0;
 8003e26:	f8ad 3004 	strh.w	r3, [sp, #4]
	SPI_TxBuffer(args, sizeof(args));
 8003e2a:	f7ff ff93 	bl	8003d54 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8003e2e:	f44f 5400 	mov.w	r4, #8192	; 0x2000
 8003e32:	f7ff ffcd 	bl	8003dd0 <SPI_RxByte>
 8003e36:	2801      	cmp	r0, #1
 8003e38:	d001      	beq.n	8003e3e <SD_PowerOn+0x3a>
 8003e3a:	3c01      	subs	r4, #1
 8003e3c:	d1f9      	bne.n	8003e32 <SD_PowerOn+0x2e>
	{
		cnt--;
	}

	DESELECT();
 8003e3e:	f7ff ffb9 	bl	8003db4 <DESELECT>
	SPI_TxByte(0XFF);
 8003e42:	20ff      	movs	r0, #255	; 0xff
 8003e44:	f7ff ff94 	bl	8003d70 <SPI_TxByte>

	PowerFlag = 1;
 8003e48:	4b02      	ldr	r3, [pc, #8]	; (8003e54 <SD_PowerOn+0x50>)
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	701a      	strb	r2, [r3, #0]
}
 8003e4e:	b002      	add	sp, #8
 8003e50:	bd10      	pop	{r4, pc}
 8003e52:	bf00      	nop
 8003e54:	2000016d 	.word	0x2000016d

08003e58 <SD_ReadyWait>:
{
 8003e58:	b510      	push	{r4, lr}
	Timer2 = 500;
 8003e5a:	4c06      	ldr	r4, [pc, #24]	; (8003e74 <SD_ReadyWait+0x1c>)
 8003e5c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003e60:	8022      	strh	r2, [r4, #0]
		res = SPI_RxByte();
 8003e62:	f7ff ffb5 	bl	8003dd0 <SPI_RxByte>
	} while ((res != 0xFF) && Timer2);
 8003e66:	28ff      	cmp	r0, #255	; 0xff
 8003e68:	d003      	beq.n	8003e72 <SD_ReadyWait+0x1a>
 8003e6a:	8823      	ldrh	r3, [r4, #0]
 8003e6c:	b29b      	uxth	r3, r3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d1f7      	bne.n	8003e62 <SD_ReadyWait+0xa>
}
 8003e72:	bd10      	pop	{r4, pc}
 8003e74:	20002240 	.word	0x20002240

08003e78 <SD_TxDataBlock>:
}

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8003e78:	b570      	push	{r4, r5, r6, lr}
 8003e7a:	4606      	mov	r6, r0
 8003e7c:	460d      	mov	r5, r1
	uint8_t resp;
	uint8_t i = 0;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8003e7e:	f7ff ffeb 	bl	8003e58 <SD_ReadyWait>
 8003e82:	28ff      	cmp	r0, #255	; 0xff
{
 8003e84:	f04f 0400 	mov.w	r4, #0
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8003e88:	d123      	bne.n	8003ed2 <SD_TxDataBlock+0x5a>

	/* transmit token */
	SPI_TxByte(token);
 8003e8a:	4628      	mov	r0, r5
 8003e8c:	f7ff ff70 	bl	8003d70 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8003e90:	2dfd      	cmp	r5, #253	; 0xfd
 8003e92:	d018      	beq.n	8003ec6 <SD_TxDataBlock+0x4e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8003e94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003e98:	4630      	mov	r0, r6
 8003e9a:	f7ff ff5b 	bl	8003d54 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8003e9e:	f7ff ff97 	bl	8003dd0 <SPI_RxByte>
		SPI_RxByte();
 8003ea2:	f7ff ff95 	bl	8003dd0 <SPI_RxByte>
 8003ea6:	2541      	movs	r5, #65	; 0x41

		/* receive response */
		while (i <= 64)
		{
			resp = SPI_RxByte();
 8003ea8:	f7ff ff92 	bl	8003dd0 <SPI_RxByte>

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 8003eac:	f000 031f 	and.w	r3, r0, #31
 8003eb0:	2b05      	cmp	r3, #5
			resp = SPI_RxByte();
 8003eb2:	4604      	mov	r4, r0
			if ((resp & 0x1F) == 0x05) break;
 8003eb4:	d003      	beq.n	8003ebe <SD_TxDataBlock+0x46>
		while (i <= 64)
 8003eb6:	3d01      	subs	r5, #1
 8003eb8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8003ebc:	d1f4      	bne.n	8003ea8 <SD_TxDataBlock+0x30>
			i++;
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8003ebe:	f7ff ff87 	bl	8003dd0 <SPI_RxByte>
 8003ec2:	2800      	cmp	r0, #0
 8003ec4:	d0fb      	beq.n	8003ebe <SD_TxDataBlock+0x46>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8003ec6:	f004 041f 	and.w	r4, r4, #31
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8003eca:	1f63      	subs	r3, r4, #5
 8003ecc:	4258      	negs	r0, r3
 8003ece:	4158      	adcs	r0, r3

	return FALSE;
}
 8003ed0:	bd70      	pop	{r4, r5, r6, pc}
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	e7fc      	b.n	8003ed0 <SD_TxDataBlock+0x58>

08003ed6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8003ed6:	b538      	push	{r3, r4, r5, lr}
 8003ed8:	4604      	mov	r4, r0
 8003eda:	460d      	mov	r5, r1
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003edc:	f7ff ffbc 	bl	8003e58 <SD_ReadyWait>
 8003ee0:	28ff      	cmp	r0, #255	; 0xff
 8003ee2:	d128      	bne.n	8003f36 <SD_SendCmd+0x60>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8003ee4:	4620      	mov	r0, r4
 8003ee6:	f7ff ff43 	bl	8003d70 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8003eea:	0e28      	lsrs	r0, r5, #24
 8003eec:	f7ff ff40 	bl	8003d70 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8003ef0:	f3c5 4007 	ubfx	r0, r5, #16, #8
 8003ef4:	f7ff ff3c 	bl	8003d70 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8003ef8:	f3c5 2007 	ubfx	r0, r5, #8, #8
 8003efc:	f7ff ff38 	bl	8003d70 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 8003f00:	b2e8      	uxtb	r0, r5
 8003f02:	f7ff ff35 	bl	8003d70 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8003f06:	2c40      	cmp	r4, #64	; 0x40
 8003f08:	d013      	beq.n	8003f32 <SD_SendCmd+0x5c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
	else crc = 1;
 8003f0a:	2c48      	cmp	r4, #72	; 0x48
 8003f0c:	bf0c      	ite	eq
 8003f0e:	2087      	moveq	r0, #135	; 0x87
 8003f10:	2001      	movne	r0, #1

	/* transmit CRC */
	SPI_TxByte(crc);
 8003f12:	f7ff ff2d 	bl	8003d70 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 8003f16:	2c4c      	cmp	r4, #76	; 0x4c
 8003f18:	d101      	bne.n	8003f1e <SD_SendCmd+0x48>
 8003f1a:	f7ff ff59 	bl	8003dd0 <SPI_RxByte>
	else crc = 1;
 8003f1e:	240a      	movs	r4, #10

	/* receive response */
	uint8_t n = 10;
	do {
		res = SPI_RxByte();
 8003f20:	f7ff ff56 	bl	8003dd0 <SPI_RxByte>
	} while ((res & 0x80) && --n);
 8003f24:	0603      	lsls	r3, r0, #24
 8003f26:	d503      	bpl.n	8003f30 <SD_SendCmd+0x5a>
 8003f28:	3c01      	subs	r4, #1
 8003f2a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8003f2e:	d1f7      	bne.n	8003f20 <SD_SendCmd+0x4a>

	return res;
}
 8003f30:	bd38      	pop	{r3, r4, r5, pc}
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8003f32:	2095      	movs	r0, #149	; 0x95
 8003f34:	e7ed      	b.n	8003f12 <SD_SendCmd+0x3c>
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 8003f36:	20ff      	movs	r0, #255	; 0xff
 8003f38:	e7fa      	b.n	8003f30 <SD_SendCmd+0x5a>
	...

08003f3c <SD_RxDataBlock>:
{
 8003f3c:	b570      	push	{r4, r5, r6, lr}
	Timer1 = 200;
 8003f3e:	4d10      	ldr	r5, [pc, #64]	; (8003f80 <SD_RxDataBlock+0x44>)
 8003f40:	22c8      	movs	r2, #200	; 0xc8
{
 8003f42:	4604      	mov	r4, r0
 8003f44:	460e      	mov	r6, r1
	Timer1 = 200;
 8003f46:	802a      	strh	r2, [r5, #0]
		token = SPI_RxByte();
 8003f48:	f7ff ff42 	bl	8003dd0 <SPI_RxByte>
	} while((token == 0xFF) && Timer1);
 8003f4c:	28ff      	cmp	r0, #255	; 0xff
 8003f4e:	d104      	bne.n	8003f5a <SD_RxDataBlock+0x1e>
 8003f50:	8828      	ldrh	r0, [r5, #0]
 8003f52:	b280      	uxth	r0, r0
 8003f54:	2800      	cmp	r0, #0
 8003f56:	d1f7      	bne.n	8003f48 <SD_RxDataBlock+0xc>
}
 8003f58:	bd70      	pop	{r4, r5, r6, pc}
	if(token != 0xFE) return FALSE;
 8003f5a:	28fe      	cmp	r0, #254	; 0xfe
 8003f5c:	d10d      	bne.n	8003f7a <SD_RxDataBlock+0x3e>
 8003f5e:	1e65      	subs	r5, r4, #1
 8003f60:	4434      	add	r4, r6
	*buff = SPI_RxByte();
 8003f62:	f7ff ff35 	bl	8003dd0 <SPI_RxByte>
 8003f66:	f805 0f01 	strb.w	r0, [r5, #1]!
	} while(len--);
 8003f6a:	42a5      	cmp	r5, r4
 8003f6c:	d1f9      	bne.n	8003f62 <SD_RxDataBlock+0x26>
	SPI_RxByte();
 8003f6e:	f7ff ff2f 	bl	8003dd0 <SPI_RxByte>
	SPI_RxByte();
 8003f72:	f7ff ff2d 	bl	8003dd0 <SPI_RxByte>
 8003f76:	2001      	movs	r0, #1
 8003f78:	e7ee      	b.n	8003f58 <SD_RxDataBlock+0x1c>
	if(token != 0xFE) return FALSE;
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	e7ec      	b.n	8003f58 <SD_RxDataBlock+0x1c>
 8003f7e:	bf00      	nop
 8003f80:	20002242 	.word	0x20002242

08003f84 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8003f84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 8003f88:	2800      	cmp	r0, #0
 8003f8a:	f040 80a0 	bne.w	80040ce <SD_disk_initialize+0x14a>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8003f8e:	4b51      	ldr	r3, [pc, #324]	; (80040d4 <SD_disk_initialize+0x150>)
 8003f90:	781e      	ldrb	r6, [r3, #0]
 8003f92:	f016 0602 	ands.w	r6, r6, #2
 8003f96:	461f      	mov	r7, r3
 8003f98:	d004      	beq.n	8003fa4 <SD_disk_initialize+0x20>
 8003f9a:	7818      	ldrb	r0, [r3, #0]
	{
		/* Initialization failed */
		SD_PowerOff();
	}

	return Stat;
 8003f9c:	b2c0      	uxtb	r0, r0
}
 8003f9e:	b002      	add	sp, #8
 8003fa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	SD_PowerOn();
 8003fa4:	f7ff ff2e 	bl	8003e04 <SD_PowerOn>
	SELECT();
 8003fa8:	f7ff fef6 	bl	8003d98 <SELECT>
	if (SD_SendCmd(CMD0, 0) == 1)
 8003fac:	4631      	mov	r1, r6
 8003fae:	2040      	movs	r0, #64	; 0x40
 8003fb0:	f7ff ff91 	bl	8003ed6 <SD_SendCmd>
 8003fb4:	2801      	cmp	r0, #1
 8003fb6:	4604      	mov	r4, r0
 8003fb8:	d17b      	bne.n	80040b2 <SD_disk_initialize+0x12e>
		Timer1 = 1000;
 8003fba:	4d47      	ldr	r5, [pc, #284]	; (80040d8 <SD_disk_initialize+0x154>)
 8003fbc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003fc0:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8003fc4:	2048      	movs	r0, #72	; 0x48
		Timer1 = 1000;
 8003fc6:	802b      	strh	r3, [r5, #0]
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8003fc8:	f7ff ff85 	bl	8003ed6 <SD_SendCmd>
 8003fcc:	2801      	cmp	r0, #1
 8003fce:	d14c      	bne.n	800406a <SD_disk_initialize+0xe6>
 8003fd0:	ae01      	add	r6, sp, #4
 8003fd2:	46b0      	mov	r8, r6
 8003fd4:	2404      	movs	r4, #4
				ocr[n] = SPI_RxByte();
 8003fd6:	f7ff fefb 	bl	8003dd0 <SPI_RxByte>
 8003fda:	3c01      	subs	r4, #1
			for (n = 0; n < 4; n++)
 8003fdc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
				ocr[n] = SPI_RxByte();
 8003fe0:	f808 0b01 	strb.w	r0, [r8], #1
			for (n = 0; n < 4; n++)
 8003fe4:	d1f7      	bne.n	8003fd6 <SD_disk_initialize+0x52>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8003fe6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d161      	bne.n	80040b2 <SD_disk_initialize+0x12e>
 8003fee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8003ff2:	2baa      	cmp	r3, #170	; 0xaa
 8003ff4:	d15d      	bne.n	80040b2 <SD_disk_initialize+0x12e>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8003ff6:	2100      	movs	r1, #0
 8003ff8:	2077      	movs	r0, #119	; 0x77
 8003ffa:	f7ff ff6c 	bl	8003ed6 <SD_SendCmd>
 8003ffe:	2801      	cmp	r0, #1
 8004000:	d92b      	bls.n	800405a <SD_disk_initialize+0xd6>
				} while (Timer1);
 8004002:	882b      	ldrh	r3, [r5, #0]
 8004004:	b29b      	uxth	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f5      	bne.n	8003ff6 <SD_disk_initialize+0x72>
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 800400a:	882b      	ldrh	r3, [r5, #0]
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d04f      	beq.n	80040b2 <SD_disk_initialize+0x12e>
 8004012:	2100      	movs	r1, #0
 8004014:	207a      	movs	r0, #122	; 0x7a
 8004016:	f7ff ff5e 	bl	8003ed6 <SD_SendCmd>
 800401a:	2800      	cmp	r0, #0
 800401c:	d149      	bne.n	80040b2 <SD_disk_initialize+0x12e>
 800401e:	2404      	movs	r4, #4
						ocr[n] = SPI_RxByte();
 8004020:	f7ff fed6 	bl	8003dd0 <SPI_RxByte>
 8004024:	3c01      	subs	r4, #1
					for (n = 0; n < 4; n++)
 8004026:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
						ocr[n] = SPI_RxByte();
 800402a:	f806 0b01 	strb.w	r0, [r6], #1
					for (n = 0; n < 4; n++)
 800402e:	d1f7      	bne.n	8004020 <SD_disk_initialize+0x9c>
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8004030:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004034:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004038:	bf14      	ite	ne
 800403a:	240c      	movne	r4, #12
 800403c:	2404      	moveq	r4, #4
	CardType = type;
 800403e:	4b27      	ldr	r3, [pc, #156]	; (80040dc <SD_disk_initialize+0x158>)
 8004040:	701c      	strb	r4, [r3, #0]
	DESELECT();
 8004042:	f7ff feb7 	bl	8003db4 <DESELECT>
	SPI_RxByte();
 8004046:	f7ff fec3 	bl	8003dd0 <SPI_RxByte>
	if (type)
 800404a:	2c00      	cmp	r4, #0
 800404c:	d03c      	beq.n	80040c8 <SD_disk_initialize+0x144>
		Stat &= ~STA_NOINIT;
 800404e:	783b      	ldrb	r3, [r7, #0]
 8004050:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004054:	703b      	strb	r3, [r7, #0]
	return Stat;
 8004056:	7838      	ldrb	r0, [r7, #0]
 8004058:	e7a0      	b.n	8003f9c <SD_disk_initialize+0x18>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 800405a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800405e:	2069      	movs	r0, #105	; 0x69
 8004060:	f7ff ff39 	bl	8003ed6 <SD_SendCmd>
 8004064:	2800      	cmp	r0, #0
 8004066:	d1cc      	bne.n	8004002 <SD_disk_initialize+0x7e>
 8004068:	e7cf      	b.n	800400a <SD_disk_initialize+0x86>
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800406a:	4631      	mov	r1, r6
 800406c:	2077      	movs	r0, #119	; 0x77
 800406e:	f7ff ff32 	bl	8003ed6 <SD_SendCmd>
 8004072:	2801      	cmp	r0, #1
 8004074:	d806      	bhi.n	8004084 <SD_disk_initialize+0x100>
 8004076:	4631      	mov	r1, r6
 8004078:	2069      	movs	r0, #105	; 0x69
 800407a:	f7ff ff2c 	bl	8003ed6 <SD_SendCmd>
 800407e:	2801      	cmp	r0, #1
 8004080:	bf98      	it	ls
 8004082:	2402      	movls	r4, #2
				if (type == CT_SD1)
 8004084:	2c02      	cmp	r4, #2
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8004086:	f04f 0100 	mov.w	r1, #0
				if (type == CT_SD1)
 800408a:	d11b      	bne.n	80040c4 <SD_disk_initialize+0x140>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 800408c:	2077      	movs	r0, #119	; 0x77
 800408e:	f7ff ff22 	bl	8003ed6 <SD_SendCmd>
 8004092:	2801      	cmp	r0, #1
 8004094:	d90f      	bls.n	80040b6 <SD_disk_initialize+0x132>
			} while (Timer1);
 8004096:	882b      	ldrh	r3, [r5, #0]
 8004098:	b29b      	uxth	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f2      	bne.n	8004084 <SD_disk_initialize+0x100>
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 800409e:	882b      	ldrh	r3, [r5, #0]
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	b133      	cbz	r3, 80040b2 <SD_disk_initialize+0x12e>
 80040a4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80040a8:	2050      	movs	r0, #80	; 0x50
 80040aa:	f7ff ff14 	bl	8003ed6 <SD_SendCmd>
 80040ae:	2800      	cmp	r0, #0
 80040b0:	d0c5      	beq.n	800403e <SD_disk_initialize+0xba>
 80040b2:	2400      	movs	r4, #0
 80040b4:	e7c3      	b.n	800403e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 80040b6:	2100      	movs	r1, #0
 80040b8:	2069      	movs	r0, #105	; 0x69
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 80040ba:	f7ff ff0c 	bl	8003ed6 <SD_SendCmd>
 80040be:	2800      	cmp	r0, #0
 80040c0:	d1e9      	bne.n	8004096 <SD_disk_initialize+0x112>
 80040c2:	e7ec      	b.n	800409e <SD_disk_initialize+0x11a>
 80040c4:	2041      	movs	r0, #65	; 0x41
 80040c6:	e7f8      	b.n	80040ba <SD_disk_initialize+0x136>
	PowerFlag = 0;
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <SD_disk_initialize+0x15c>)
 80040ca:	701c      	strb	r4, [r3, #0]
}
 80040cc:	e7c3      	b.n	8004056 <SD_disk_initialize+0xd2>
	if(drv) return STA_NOINIT;
 80040ce:	2001      	movs	r0, #1
 80040d0:	e765      	b.n	8003f9e <SD_disk_initialize+0x1a>
 80040d2:	bf00      	nop
 80040d4:	20000028 	.word	0x20000028
 80040d8:	20002242 	.word	0x20002242
 80040dc:	2000016c 	.word	0x2000016c
 80040e0:	2000016d 	.word	0x2000016d

080040e4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
	if (drv) return STA_NOINIT;
 80040e4:	b918      	cbnz	r0, 80040ee <SD_disk_status+0xa>
	return Stat;
 80040e6:	4b03      	ldr	r3, [pc, #12]	; (80040f4 <SD_disk_status+0x10>)
 80040e8:	7818      	ldrb	r0, [r3, #0]
 80040ea:	b2c0      	uxtb	r0, r0
 80040ec:	4770      	bx	lr
	if (drv) return STA_NOINIT;
 80040ee:	2001      	movs	r0, #1
}
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	20000028 	.word	0x20000028

080040f8 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	460e      	mov	r6, r1
 80040fc:	4615      	mov	r5, r2
 80040fe:	461c      	mov	r4, r3
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8004100:	2800      	cmp	r0, #0
 8004102:	d137      	bne.n	8004174 <SD_disk_read+0x7c>
 8004104:	2b00      	cmp	r3, #0
 8004106:	d035      	beq.n	8004174 <SD_disk_read+0x7c>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004108:	4b1c      	ldr	r3, [pc, #112]	; (800417c <SD_disk_read+0x84>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	07da      	lsls	r2, r3, #31
 800410e:	d433      	bmi.n	8004178 <SD_disk_read+0x80>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8004110:	4b1b      	ldr	r3, [pc, #108]	; (8004180 <SD_disk_read+0x88>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	075b      	lsls	r3, r3, #29
 8004116:	bf58      	it	pl
 8004118:	026d      	lslpl	r5, r5, #9

	SELECT();
 800411a:	f7ff fe3d 	bl	8003d98 <SELECT>

	if (count == 1)
 800411e:	2c01      	cmp	r4, #1
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8004120:	4629      	mov	r1, r5
	if (count == 1)
 8004122:	d113      	bne.n	800414c <SD_disk_read+0x54>
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8004124:	2051      	movs	r0, #81	; 0x51
 8004126:	f7ff fed6 	bl	8003ed6 <SD_SendCmd>
 800412a:	b938      	cbnz	r0, 800413c <SD_disk_read+0x44>
 800412c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004130:	4630      	mov	r0, r6
 8004132:	f7ff ff03 	bl	8003f3c <SD_RxDataBlock>
 8004136:	fab0 f480 	clz	r4, r0
 800413a:	0964      	lsrs	r4, r4, #5
			SD_SendCmd(CMD12, 0);
		}
	}

	/* Idle */
	DESELECT();
 800413c:	f7ff fe3a 	bl	8003db4 <DESELECT>
	SPI_RxByte();
 8004140:	f7ff fe46 	bl	8003dd0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8004144:	1e20      	subs	r0, r4, #0
 8004146:	bf18      	it	ne
 8004148:	2001      	movne	r0, #1
}
 800414a:	bd70      	pop	{r4, r5, r6, pc}
		if (SD_SendCmd(CMD18, sector) == 0)
 800414c:	2052      	movs	r0, #82	; 0x52
 800414e:	f7ff fec2 	bl	8003ed6 <SD_SendCmd>
 8004152:	2800      	cmp	r0, #0
 8004154:	d1f2      	bne.n	800413c <SD_disk_read+0x44>
				if (!SD_RxDataBlock(buff, 512)) break;
 8004156:	f44f 7100 	mov.w	r1, #512	; 0x200
 800415a:	4630      	mov	r0, r6
 800415c:	f7ff feee 	bl	8003f3c <SD_RxDataBlock>
 8004160:	b118      	cbz	r0, 800416a <SD_disk_read+0x72>
			} while (--count);
 8004162:	3c01      	subs	r4, #1
				buff += 512;
 8004164:	f506 7600 	add.w	r6, r6, #512	; 0x200
			} while (--count);
 8004168:	d1f5      	bne.n	8004156 <SD_disk_read+0x5e>
			SD_SendCmd(CMD12, 0);
 800416a:	2100      	movs	r1, #0
 800416c:	204c      	movs	r0, #76	; 0x4c
 800416e:	f7ff feb2 	bl	8003ed6 <SD_SendCmd>
 8004172:	e7e3      	b.n	800413c <SD_disk_read+0x44>
	if (pdrv || !count) return RES_PARERR;
 8004174:	2004      	movs	r0, #4
 8004176:	e7e8      	b.n	800414a <SD_disk_read+0x52>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004178:	2003      	movs	r0, #3
 800417a:	e7e6      	b.n	800414a <SD_disk_read+0x52>
 800417c:	20000028 	.word	0x20000028
 8004180:	2000016c 	.word	0x2000016c

08004184 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8004184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004186:	460d      	mov	r5, r1
 8004188:	4616      	mov	r6, r2
 800418a:	461c      	mov	r4, r3
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 800418c:	2800      	cmp	r0, #0
 800418e:	d147      	bne.n	8004220 <SD_disk_write+0x9c>
 8004190:	2b00      	cmp	r3, #0
 8004192:	d045      	beq.n	8004220 <SD_disk_write+0x9c>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004194:	4b25      	ldr	r3, [pc, #148]	; (800422c <SD_disk_write+0xa8>)
 8004196:	781a      	ldrb	r2, [r3, #0]
 8004198:	07d0      	lsls	r0, r2, #31
 800419a:	d443      	bmi.n	8004224 <SD_disk_write+0xa0>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 800419c:	781b      	ldrb	r3, [r3, #0]
 800419e:	0759      	lsls	r1, r3, #29
 80041a0:	d442      	bmi.n	8004228 <SD_disk_write+0xa4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 80041a2:	4f23      	ldr	r7, [pc, #140]	; (8004230 <SD_disk_write+0xac>)
 80041a4:	783a      	ldrb	r2, [r7, #0]
 80041a6:	0752      	lsls	r2, r2, #29
 80041a8:	bf58      	it	pl
 80041aa:	0276      	lslpl	r6, r6, #9

	SELECT();
 80041ac:	f7ff fdf4 	bl	8003d98 <SELECT>

	if (count == 1)
 80041b0:	2c01      	cmp	r4, #1
 80041b2:	d113      	bne.n	80041dc <SD_disk_write+0x58>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 80041b4:	4631      	mov	r1, r6
 80041b6:	2058      	movs	r0, #88	; 0x58
 80041b8:	f7ff fe8d 	bl	8003ed6 <SD_SendCmd>
 80041bc:	bb70      	cbnz	r0, 800421c <SD_disk_write+0x98>
 80041be:	21fe      	movs	r1, #254	; 0xfe
 80041c0:	4628      	mov	r0, r5
 80041c2:	f7ff fe59 	bl	8003e78 <SD_TxDataBlock>
 80041c6:	fab0 f480 	clz	r4, r0
 80041ca:	0964      	lsrs	r4, r4, #5
			}
		}
	}

	/* Idle */
	DESELECT();
 80041cc:	f7ff fdf2 	bl	8003db4 <DESELECT>
	SPI_RxByte();
 80041d0:	f7ff fdfe 	bl	8003dd0 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 80041d4:	1e20      	subs	r0, r4, #0
 80041d6:	bf18      	it	ne
 80041d8:	2001      	movne	r0, #1
}
 80041da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (CardType & CT_SD1)
 80041dc:	783b      	ldrb	r3, [r7, #0]
 80041de:	079b      	lsls	r3, r3, #30
 80041e0:	d507      	bpl.n	80041f2 <SD_disk_write+0x6e>
			SD_SendCmd(CMD55, 0);
 80041e2:	2100      	movs	r1, #0
 80041e4:	2077      	movs	r0, #119	; 0x77
 80041e6:	f7ff fe76 	bl	8003ed6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 80041ea:	4621      	mov	r1, r4
 80041ec:	2057      	movs	r0, #87	; 0x57
 80041ee:	f7ff fe72 	bl	8003ed6 <SD_SendCmd>
		if (SD_SendCmd(CMD25, sector) == 0)
 80041f2:	4631      	mov	r1, r6
 80041f4:	2059      	movs	r0, #89	; 0x59
 80041f6:	f7ff fe6e 	bl	8003ed6 <SD_SendCmd>
 80041fa:	2800      	cmp	r0, #0
 80041fc:	d1e6      	bne.n	80041cc <SD_disk_write+0x48>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 80041fe:	21fc      	movs	r1, #252	; 0xfc
 8004200:	4628      	mov	r0, r5
 8004202:	f7ff fe39 	bl	8003e78 <SD_TxDataBlock>
 8004206:	b118      	cbz	r0, 8004210 <SD_disk_write+0x8c>
			} while (--count);
 8004208:	3c01      	subs	r4, #1
				buff += 512;
 800420a:	f505 7500 	add.w	r5, r5, #512	; 0x200
			} while (--count);
 800420e:	d1f6      	bne.n	80041fe <SD_disk_write+0x7a>
			if(!SD_TxDataBlock(0, 0xFD))
 8004210:	21fd      	movs	r1, #253	; 0xfd
 8004212:	2000      	movs	r0, #0
 8004214:	f7ff fe30 	bl	8003e78 <SD_TxDataBlock>
 8004218:	2800      	cmp	r0, #0
 800421a:	d1d7      	bne.n	80041cc <SD_disk_write+0x48>
				count = 1;
 800421c:	2401      	movs	r4, #1
 800421e:	e7d5      	b.n	80041cc <SD_disk_write+0x48>
	if (pdrv || !count) return RES_PARERR;
 8004220:	2004      	movs	r0, #4
 8004222:	e7da      	b.n	80041da <SD_disk_write+0x56>
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8004224:	2003      	movs	r0, #3
 8004226:	e7d8      	b.n	80041da <SD_disk_write+0x56>
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8004228:	2002      	movs	r0, #2
 800422a:	e7d6      	b.n	80041da <SD_disk_write+0x56>
 800422c:	20000028 	.word	0x20000028
 8004230:	2000016c 	.word	0x2000016c

08004234 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8004234:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004236:	460e      	mov	r6, r1
 8004238:	4615      	mov	r5, r2
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 800423a:	4604      	mov	r4, r0
 800423c:	2800      	cmp	r0, #0
 800423e:	f040 8092 	bne.w	8004366 <SD_disk_ioctl+0x132>
	res = RES_ERROR;

	if (ctrl == CTRL_POWER)
 8004242:	2905      	cmp	r1, #5
 8004244:	d113      	bne.n	800426e <SD_disk_ioctl+0x3a>
	{
		switch (*ptr)
 8004246:	7813      	ldrb	r3, [r2, #0]
 8004248:	2b01      	cmp	r3, #1
 800424a:	d009      	beq.n	8004260 <SD_disk_ioctl+0x2c>
 800424c:	2b02      	cmp	r3, #2
 800424e:	d00a      	beq.n	8004266 <SD_disk_ioctl+0x32>
 8004250:	2b00      	cmp	r3, #0
 8004252:	f040 8088 	bne.w	8004366 <SD_disk_ioctl+0x132>
	PowerFlag = 0;
 8004256:	4b46      	ldr	r3, [pc, #280]	; (8004370 <SD_disk_ioctl+0x13c>)
 8004258:	7018      	strb	r0, [r3, #0]
		DESELECT();
		SPI_RxByte();
	}

	return res;
}
 800425a:	4620      	mov	r0, r4
 800425c:	b004      	add	sp, #16
 800425e:	bd70      	pop	{r4, r5, r6, pc}
			SD_PowerOn();		/* Power On */
 8004260:	f7ff fdd0 	bl	8003e04 <SD_PowerOn>
			break;
 8004264:	e7f9      	b.n	800425a <SD_disk_ioctl+0x26>
	return PowerFlag;
 8004266:	4b42      	ldr	r3, [pc, #264]	; (8004370 <SD_disk_ioctl+0x13c>)
			*(ptr + 1) = SD_CheckPower();
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	7053      	strb	r3, [r2, #1]
			break;
 800426c:	e7f5      	b.n	800425a <SD_disk_ioctl+0x26>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800426e:	4b41      	ldr	r3, [pc, #260]	; (8004374 <SD_disk_ioctl+0x140>)
 8004270:	7818      	ldrb	r0, [r3, #0]
 8004272:	f010 0401 	ands.w	r4, r0, #1
 8004276:	d178      	bne.n	800436a <SD_disk_ioctl+0x136>
		SELECT();
 8004278:	f7ff fd8e 	bl	8003d98 <SELECT>
		switch (ctrl)
 800427c:	2e0d      	cmp	r6, #13
 800427e:	d868      	bhi.n	8004352 <SD_disk_ioctl+0x11e>
 8004280:	e8df f006 	tbb	[pc, r6]
 8004284:	6746074a 	.word	0x6746074a
 8004288:	67676767 	.word	0x67676767
 800428c:	51676767 	.word	0x51676767
 8004290:	625f      	.short	0x625f
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8004292:	2100      	movs	r1, #0
 8004294:	2049      	movs	r0, #73	; 0x49
 8004296:	f7ff fe1e 	bl	8003ed6 <SD_SendCmd>
 800429a:	4604      	mov	r4, r0
 800429c:	b128      	cbz	r0, 80042aa <SD_disk_ioctl+0x76>
	res = RES_ERROR;
 800429e:	2401      	movs	r4, #1
		DESELECT();
 80042a0:	f7ff fd88 	bl	8003db4 <DESELECT>
		SPI_RxByte();
 80042a4:	f7ff fd94 	bl	8003dd0 <SPI_RxByte>
 80042a8:	e7d7      	b.n	800425a <SD_disk_ioctl+0x26>
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80042aa:	2110      	movs	r1, #16
 80042ac:	4668      	mov	r0, sp
 80042ae:	f7ff fe45 	bl	8003f3c <SD_RxDataBlock>
 80042b2:	2800      	cmp	r0, #0
 80042b4:	d0f3      	beq.n	800429e <SD_disk_ioctl+0x6a>
				if ((csd[0] >> 6) == 1)
 80042b6:	f89d 1000 	ldrb.w	r1, [sp]
 80042ba:	f89d 3009 	ldrb.w	r3, [sp, #9]
 80042be:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80042c2:	0989      	lsrs	r1, r1, #6
 80042c4:	2901      	cmp	r1, #1
 80042c6:	d106      	bne.n	80042d6 <SD_disk_ioctl+0xa2>
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80042c8:	3301      	adds	r3, #1
 80042ca:	eb03 2202 	add.w	r2, r3, r2, lsl #8
					*(DWORD*) buff = (DWORD) csize << 10;
 80042ce:	b292      	uxth	r2, r2
 80042d0:	0292      	lsls	r2, r2, #10
 80042d2:	602a      	str	r2, [r5, #0]
 80042d4:	e7e4      	b.n	80042a0 <SD_disk_ioctl+0x6c>
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80042d6:	f89d 1007 	ldrb.w	r1, [sp, #7]
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80042da:	f89d 000a 	ldrb.w	r0, [sp, #10]
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 80042de:	0992      	lsrs	r2, r2, #6
 80042e0:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80042e4:	f89d 1006 	ldrb.w	r1, [sp, #6]
 80042e8:	0289      	lsls	r1, r1, #10
 80042ea:	f401 6140 	and.w	r1, r1, #3072	; 0xc00
 80042ee:	3201      	adds	r2, #1
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 80042f0:	440a      	add	r2, r1
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80042f2:	f89d 1005 	ldrb.w	r1, [sp, #5]
 80042f6:	005b      	lsls	r3, r3, #1
 80042f8:	f001 010f 	and.w	r1, r1, #15
 80042fc:	eb01 11d0 	add.w	r1, r1, r0, lsr #7
 8004300:	f003 0306 	and.w	r3, r3, #6
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8004304:	440b      	add	r3, r1
 8004306:	3b07      	subs	r3, #7
 8004308:	fa02 f303 	lsl.w	r3, r2, r3
 800430c:	602b      	str	r3, [r5, #0]
 800430e:	e7c7      	b.n	80042a0 <SD_disk_ioctl+0x6c>
			*(WORD*) buff = 512;
 8004310:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004314:	802b      	strh	r3, [r5, #0]
			break;
 8004316:	e7c3      	b.n	80042a0 <SD_disk_ioctl+0x6c>
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8004318:	f7ff fd9e 	bl	8003e58 <SD_ReadyWait>
	res = RES_ERROR;
 800431c:	f1b0 04ff 	subs.w	r4, r0, #255	; 0xff
 8004320:	bf18      	it	ne
 8004322:	2401      	movne	r4, #1
 8004324:	e7bc      	b.n	80042a0 <SD_disk_ioctl+0x6c>
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004326:	2100      	movs	r1, #0
 8004328:	2049      	movs	r0, #73	; 0x49
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 800432a:	f7ff fdd4 	bl	8003ed6 <SD_SendCmd>
 800432e:	2800      	cmp	r0, #0
 8004330:	d1b5      	bne.n	800429e <SD_disk_ioctl+0x6a>
 8004332:	2110      	movs	r1, #16
 8004334:	4628      	mov	r0, r5
 8004336:	f7ff fe01 	bl	8003f3c <SD_RxDataBlock>
	res = RES_ERROR;
 800433a:	fab0 f480 	clz	r4, r0
 800433e:	0964      	lsrs	r4, r4, #5
 8004340:	e7ae      	b.n	80042a0 <SD_disk_ioctl+0x6c>
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8004342:	2100      	movs	r1, #0
 8004344:	204a      	movs	r0, #74	; 0x4a
 8004346:	e7f0      	b.n	800432a <SD_disk_ioctl+0xf6>
			if (SD_SendCmd(CMD58, 0) == 0)
 8004348:	2100      	movs	r1, #0
 800434a:	207a      	movs	r0, #122	; 0x7a
 800434c:	f7ff fdc3 	bl	8003ed6 <SD_SendCmd>
 8004350:	b108      	cbz	r0, 8004356 <SD_disk_ioctl+0x122>
		SELECT();
 8004352:	2404      	movs	r4, #4
 8004354:	e7a4      	b.n	80042a0 <SD_disk_ioctl+0x6c>
 8004356:	1d2c      	adds	r4, r5, #4
					*ptr++ = SPI_RxByte();
 8004358:	f7ff fd3a 	bl	8003dd0 <SPI_RxByte>
 800435c:	f805 0b01 	strb.w	r0, [r5], #1
				for (n = 0; n < 4; n++)
 8004360:	42ac      	cmp	r4, r5
 8004362:	d1f9      	bne.n	8004358 <SD_disk_ioctl+0x124>
 8004364:	e7f5      	b.n	8004352 <SD_disk_ioctl+0x11e>
		switch (*ptr)
 8004366:	2404      	movs	r4, #4
 8004368:	e777      	b.n	800425a <SD_disk_ioctl+0x26>
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 800436a:	2403      	movs	r4, #3
 800436c:	e775      	b.n	800425a <SD_disk_ioctl+0x26>
 800436e:	bf00      	nop
 8004370:	2000016d 	.word	0x2000016d
 8004374:	20000028 	.word	0x20000028

08004378 <fnd_fn>:
//
#define FND_SEL3_Pin LED7_Pin
#define FND_SEL3_GPIO_Port LED7_GPIO_Port

void fnd_fn(int ac, char *av[])
{
 8004378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		  static int fnd_sel = 0;
          int i;
          printf("FND...\n");
 800437c:	482b      	ldr	r0, [pc, #172]	; (800442c <fnd_fn+0xb4>)
          for(fnd_sel = 0 ; fnd_sel < 4 ; fnd_sel ++)
 800437e:	4e2c      	ldr	r6, [pc, #176]	; (8004430 <fnd_fn+0xb8>)
                  FND_SEL1_GPIO_Port->BRR  = FND_SEL1_Pin;
                  FND_SEL2_GPIO_Port->BSRR  = FND_SEL2_Pin;
                  FND_SEL3_GPIO_Port->BRR  = FND_SEL3_Pin;
                  break;
          	  case 3 :
                  FND_SEL0_GPIO_Port->BRR  = FND_SEL0_Pin;
 8004380:	4c2c      	ldr	r4, [pc, #176]	; (8004434 <fnd_fn+0xbc>)
                  FND_SEL1_GPIO_Port->BRR  = FND_SEL1_Pin;
                  FND_SEL2_GPIO_Port->BRR  = FND_SEL2_Pin;
 8004382:	4d2d      	ldr	r5, [pc, #180]	; (8004438 <fnd_fn+0xc0>)
                  FND_SEL3_GPIO_Port->BSRR  = FND_SEL3_Pin;
                  break;
          	  }
          	  for( i = 0 ; i < 8 ; i ++)
          	  {
                  GPIOB->ODR = (1 << i) << 0; // PB0~PB7
 8004384:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 800443c <fnd_fn+0xc4>
          printf("FND...\n");
 8004388:	f001 fc44 	bl	8005c14 <puts>
          for(fnd_sel = 0 ; fnd_sel < 4 ; fnd_sel ++)
 800438c:	2300      	movs	r3, #0
 800438e:	6033      	str	r3, [r6, #0]
 8004390:	6833      	ldr	r3, [r6, #0]
 8004392:	2b03      	cmp	r3, #3
 8004394:	dd0e      	ble.n	80043b4 <fnd_fn+0x3c>
                  HAL_Delay(50);
          	  }
          }
          FND_SEL0_GPIO_Port->BRR  = FND_SEL0_Pin;
 8004396:	4b27      	ldr	r3, [pc, #156]	; (8004434 <fnd_fn+0xbc>)
 8004398:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800439c:	615a      	str	r2, [r3, #20]
          FND_SEL1_GPIO_Port->BRR  = FND_SEL1_Pin;
 800439e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043a2:	615a      	str	r2, [r3, #20]
          FND_SEL2_GPIO_Port->BRR  = FND_SEL2_Pin;
 80043a4:	2210      	movs	r2, #16
 80043a6:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
          FND_SEL3_GPIO_Port->BRR  = FND_SEL3_Pin;
 80043aa:	2208      	movs	r2, #8
 80043ac:	f8c3 2814 	str.w	r2, [r3, #2068]	; 0x814
  }
 80043b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        	  switch(fnd_sel)
 80043b4:	2b03      	cmp	r3, #3
 80043b6:	d80d      	bhi.n	80043d4 <fnd_fn+0x5c>
 80043b8:	e8df f003 	tbb	[pc, r3]
 80043bc:	2d241d02 	.word	0x2d241d02
                  FND_SEL0_GPIO_Port->BSRR = FND_SEL0_Pin;
 80043c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043c4:	6123      	str	r3, [r4, #16]
                  FND_SEL1_GPIO_Port->BRR  = FND_SEL1_Pin;
 80043c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043ca:	6163      	str	r3, [r4, #20]
                  FND_SEL2_GPIO_Port->BRR  = FND_SEL2_Pin;
 80043cc:	2310      	movs	r3, #16
 80043ce:	616b      	str	r3, [r5, #20]
                  FND_SEL3_GPIO_Port->BRR  = FND_SEL3_Pin;
 80043d0:	2308      	movs	r3, #8
 80043d2:	616b      	str	r3, [r5, #20]
{
 80043d4:	2700      	movs	r7, #0
                  GPIOB->ODR = (1 << i) << 0; // PB0~PB7
 80043d6:	f04f 0901 	mov.w	r9, #1
 80043da:	fa09 f307 	lsl.w	r3, r9, r7
 80043de:	f8c8 300c 	str.w	r3, [r8, #12]
                  HAL_Delay(50);
 80043e2:	2032      	movs	r0, #50	; 0x32
          	  for( i = 0 ; i < 8 ; i ++)
 80043e4:	3701      	adds	r7, #1
                  HAL_Delay(50);
 80043e6:	f7fb ff5b 	bl	80002a0 <HAL_Delay>
          	  for( i = 0 ; i < 8 ; i ++)
 80043ea:	2f08      	cmp	r7, #8
 80043ec:	d1f5      	bne.n	80043da <fnd_fn+0x62>
          for(fnd_sel = 0 ; fnd_sel < 4 ; fnd_sel ++)
 80043ee:	6833      	ldr	r3, [r6, #0]
 80043f0:	3301      	adds	r3, #1
 80043f2:	6033      	str	r3, [r6, #0]
 80043f4:	e7cc      	b.n	8004390 <fnd_fn+0x18>
                  FND_SEL0_GPIO_Port->BRR  = FND_SEL0_Pin;
 80043f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043fa:	6163      	str	r3, [r4, #20]
                  FND_SEL1_GPIO_Port->BSRR  = FND_SEL1_Pin;
 80043fc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004400:	6123      	str	r3, [r4, #16]
                  FND_SEL2_GPIO_Port->BRR  = FND_SEL2_Pin;
 8004402:	e7e3      	b.n	80043cc <fnd_fn+0x54>
                  FND_SEL0_GPIO_Port->BRR  = FND_SEL0_Pin;
 8004404:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004408:	6163      	str	r3, [r4, #20]
                  FND_SEL1_GPIO_Port->BRR  = FND_SEL1_Pin;
 800440a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800440e:	6163      	str	r3, [r4, #20]
                  FND_SEL2_GPIO_Port->BSRR  = FND_SEL2_Pin;
 8004410:	2310      	movs	r3, #16
 8004412:	612b      	str	r3, [r5, #16]
                  FND_SEL3_GPIO_Port->BRR  = FND_SEL3_Pin;
 8004414:	e7dc      	b.n	80043d0 <fnd_fn+0x58>
                  FND_SEL0_GPIO_Port->BRR  = FND_SEL0_Pin;
 8004416:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800441a:	6163      	str	r3, [r4, #20]
                  FND_SEL1_GPIO_Port->BRR  = FND_SEL1_Pin;
 800441c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004420:	6163      	str	r3, [r4, #20]
                  FND_SEL2_GPIO_Port->BRR  = FND_SEL2_Pin;
 8004422:	2310      	movs	r3, #16
 8004424:	616b      	str	r3, [r5, #20]
                  FND_SEL3_GPIO_Port->BSRR  = FND_SEL3_Pin;
 8004426:	2308      	movs	r3, #8
 8004428:	612b      	str	r3, [r5, #16]
                  break;
 800442a:	e7d3      	b.n	80043d4 <fnd_fn+0x5c>
 800442c:	08006daf 	.word	0x08006daf
 8004430:	20000170 	.word	0x20000170
 8004434:	40010800 	.word	0x40010800
 8004438:	40011000 	.word	0x40011000
 800443c:	40010c00 	.word	0x40010c00

08004440 <motor_fn>:
 */

#include "main.h"

void motor_fn(int ac, char *av[])
{
 8004440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
       {1,1,0,0}, //
       {0,1,1,0}, //
       {0,0,1,1}, //
     };

     printf("MOTOR...\n");
 8004444:	481c      	ldr	r0, [pc, #112]	; (80044b8 <motor_fn+0x78>)
     for( j = 0 ; j < 50 ; j ++)
     {
		 for( i = 0 ; i < 4 ; i ++)
		 {
		  AIN1_GPIO_Port->BSRR = AIN1_Pin << (16 * !phase[i][0]);
		  AIN2_GPIO_Port->BSRR = AIN2_Pin << (16 * !phase[i][2]);
 8004446:	4f1d      	ldr	r7, [pc, #116]	; (80044bc <motor_fn+0x7c>)
		  AIN1_GPIO_Port->BSRR = AIN1_Pin << (16 * !phase[i][0]);
 8004448:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80044c8 <motor_fn+0x88>
     printf("MOTOR...\n");
 800444c:	f001 fbe2 	bl	8005c14 <puts>
 8004450:	2632      	movs	r6, #50	; 0x32
 8004452:	46b9      	mov	r9, r7
		 for( i = 0 ; i < 4 ; i ++)
 8004454:	4c1a      	ldr	r4, [pc, #104]	; (80044c0 <motor_fn+0x80>)
 8004456:	2500      	movs	r5, #0
		  AIN1_GPIO_Port->BSRR = AIN1_Pin << (16 * !phase[i][0]);
 8004458:	6823      	ldr	r3, [r4, #0]
 800445a:	2b00      	cmp	r3, #0
 800445c:	bf0c      	ite	eq
 800445e:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 8004462:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 8004466:	f8c8 3010 	str.w	r3, [r8, #16]
		  AIN2_GPIO_Port->BSRR = AIN2_Pin << (16 * !phase[i][2]);
 800446a:	68a3      	ldr	r3, [r4, #8]
 800446c:	2b00      	cmp	r3, #0
 800446e:	bf0c      	ite	eq
 8004470:	f04f 5300 	moveq.w	r3, #536870912	; 0x20000000
 8004474:	f44f 5300 	movne.w	r3, #8192	; 0x2000
 8004478:	613b      	str	r3, [r7, #16]
		  if(dir == 0)
		  {
		   BIN1_GPIO_Port->BSRR = BIN1_Pin << (16 * !phase[i][1]);
 800447a:	6863      	ldr	r3, [r4, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	4b11      	ldr	r3, [pc, #68]	; (80044c4 <motor_fn+0x84>)
 8004480:	bf0c      	ite	eq
 8004482:	f04f 6280 	moveq.w	r2, #67108864	; 0x4000000
 8004486:	f44f 6280 	movne.w	r2, #1024	; 0x400
 800448a:	611a      	str	r2, [r3, #16]
		   BIN2_GPIO_Port->BSRR = BIN2_Pin << (16 * !phase[i][3]);
 800448c:	68e3      	ldr	r3, [r4, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	bf0c      	ite	eq
 8004492:	f04f 5380 	moveq.w	r3, #268435456	; 0x10000000
 8004496:	f44f 5380 	movne.w	r3, #4096	; 0x1000
 800449a:	f8c9 3010 	str.w	r3, [r9, #16]
		  else
		  {
		   BIN1_GPIO_Port->BSRR = BIN1_Pin << (16 * !phase[i][3]);
		   BIN2_GPIO_Port->BSRR = BIN2_Pin << (16 * !phase[i][1]);
		  }
		  HAL_Delay(10);
 800449e:	200a      	movs	r0, #10
		 for( i = 0 ; i < 4 ; i ++)
 80044a0:	3501      	adds	r5, #1
		  HAL_Delay(10);
 80044a2:	f7fb fefd 	bl	80002a0 <HAL_Delay>
		 for( i = 0 ; i < 4 ; i ++)
 80044a6:	2d04      	cmp	r5, #4
 80044a8:	f104 0410 	add.w	r4, r4, #16
 80044ac:	d1d4      	bne.n	8004458 <motor_fn+0x18>
     for( j = 0 ; j < 50 ; j ++)
 80044ae:	3e01      	subs	r6, #1
 80044b0:	d1d0      	bne.n	8004454 <motor_fn+0x14>
		 }
    }
}
 80044b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044b6:	bf00      	nop
 80044b8:	08006db6 	.word	0x08006db6
 80044bc:	40011000 	.word	0x40011000
 80044c0:	08006dc0 	.word	0x08006dc0
 80044c4:	40010c00 	.word	0x40010c00
 80044c8:	40010800 	.word	0x40010800

080044cc <led_fn>:
 */

#include "main.h"

void led_fn(int ac, char *av[])
{
 80044cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t led;
    int i;
    printf("LED...\n");
 80044ce:	4813      	ldr	r0, [pc, #76]	; (800451c <led_fn+0x50>)
    led = 1;
    for( i = 0 ; i < 8 ; i ++, led <<= 1)
    {
            GPIOB->ODR = (GPIOB->ODR & ~(0xf << 12)) | ((led & 0xf) << 12);
 80044d0:	4d13      	ldr	r5, [pc, #76]	; (8004520 <led_fn+0x54>)
            GPIOC->ODR = (GPIOC->ODR & ~(0xf << 0 )) | ((led & 0xf0) >> 4);
 80044d2:	4c14      	ldr	r4, [pc, #80]	; (8004524 <led_fn+0x58>)
    printf("LED...\n");
 80044d4:	f001 fb9e 	bl	8005c14 <puts>
 80044d8:	2708      	movs	r7, #8
    led = 1;
 80044da:	2601      	movs	r6, #1
            GPIOB->ODR = (GPIOB->ODR & ~(0xf << 12)) | ((led & 0xf) << 12);
 80044dc:	68ea      	ldr	r2, [r5, #12]
 80044de:	0333      	lsls	r3, r6, #12
 80044e0:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80044e4:	b29b      	uxth	r3, r3
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60eb      	str	r3, [r5, #12]
            GPIOC->ODR = (GPIOC->ODR & ~(0xf << 0 )) | ((led & 0xf0) >> 4);
 80044ea:	68e2      	ldr	r2, [r4, #12]
 80044ec:	f3c6 1303 	ubfx	r3, r6, #4, #4
 80044f0:	f022 020f 	bic.w	r2, r2, #15
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60e3      	str	r3, [r4, #12]
            HAL_Delay(300);
 80044f8:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80044fc:	f7fb fed0 	bl	80002a0 <HAL_Delay>
    for( i = 0 ; i < 8 ; i ++, led <<= 1)
 8004500:	3f01      	subs	r7, #1
 8004502:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8004506:	d1e9      	bne.n	80044dc <led_fn+0x10>
    }
    led = 0;
    GPIOB->ODR = (GPIOB->ODR & ~(0xf << 12)) | ((led & 0xf) << 12);
 8004508:	68eb      	ldr	r3, [r5, #12]
 800450a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800450e:	60eb      	str	r3, [r5, #12]
    GPIOC->ODR = (GPIOC->ODR & ~(0xf << 0 )) | ((led & 0xf0) >> 4);
 8004510:	68e3      	ldr	r3, [r4, #12]
 8004512:	f023 030f 	bic.w	r3, r3, #15
 8004516:	60e3      	str	r3, [r4, #12]
}
 8004518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800451a:	bf00      	nop
 800451c:	08006e00 	.word	0x08006e00
 8004520:	40010c00 	.word	0x40010c00
 8004524:	40011000 	.word	0x40011000

08004528 <switch_fn>:


void switch_fn(int ac, char *av[])
{
 8004528:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800452c:	4606      	mov	r6, r0
	uint32_t prev,flag = 0;
    printf("SW...\n");
 800452e:	4823      	ldr	r0, [pc, #140]	; (80045bc <switch_fn+0x94>)
	prev = HAL_GetTick();
	while(1)
	{
		 if(!(SW2_GPIO_Port->IDR & SW2_Pin))
 8004530:	f8df 8090 	ldr.w	r8, [pc, #144]	; 80045c4 <switch_fn+0x9c>
		 {
			 printf("SW2 pushed\n");
 8004534:	f8df a090 	ldr.w	sl, [pc, #144]	; 80045c8 <switch_fn+0xa0>
{
 8004538:	460f      	mov	r7, r1
    printf("SW...\n");
 800453a:	f001 fb6b 	bl	8005c14 <puts>
	prev = HAL_GetTick();
 800453e:	f7fb fea9 	bl	8000294 <HAL_GetTick>
	uint32_t prev,flag = 0;
 8004542:	2500      	movs	r5, #0
	prev = HAL_GetTick();
 8004544:	4604      	mov	r4, r0
 8004546:	46c1      	mov	r9, r8
		 if(!(SW2_GPIO_Port->IDR & SW2_Pin))
 8004548:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800454c:	06d8      	lsls	r0, r3, #27
 800454e:	d40c      	bmi.n	800456a <switch_fn+0x42>
			 printf("SW2 pushed\n");
 8004550:	4650      	mov	r0, sl
 8004552:	f001 fb5f 	bl	8005c14 <puts>
			 while(!(SW2_GPIO_Port->IDR & SW2_Pin))
			 { if(HAL_GetTick() - prev >= 5000) return;}
 8004556:	f241 3b87 	movw	fp, #4999	; 0x1387
			 while(!(SW2_GPIO_Port->IDR & SW2_Pin))
 800455a:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800455e:	06d9      	lsls	r1, r3, #27
 8004560:	d51c      	bpl.n	800459c <switch_fn+0x74>
			 prev = HAL_GetTick();
 8004562:	f7fb fe97 	bl	8000294 <HAL_GetTick>
			 flag ++;
 8004566:	3501      	adds	r5, #1
			 prev = HAL_GetTick();
 8004568:	4604      	mov	r4, r0
		 }
		 if(!(SW1_GPIO_Port->IDR & SW1_Pin))
 800456a:	f8df b060 	ldr.w	fp, [pc, #96]	; 80045cc <switch_fn+0xa4>
 800456e:	f8db 3008 	ldr.w	r3, [fp, #8]
 8004572:	075a      	lsls	r2, r3, #29
 8004574:	d40a      	bmi.n	800458c <switch_fn+0x64>
		 {
				 printf("SW1 pushed\n");
 8004576:	4812      	ldr	r0, [pc, #72]	; (80045c0 <switch_fn+0x98>)
 8004578:	f001 fb4c 	bl	8005c14 <puts>
				 while(!(SW1_GPIO_Port->IDR & SW1_Pin))
 800457c:	f8db 2008 	ldr.w	r2, [fp, #8]
 8004580:	0753      	lsls	r3, r2, #29
 8004582:	d512      	bpl.n	80045aa <switch_fn+0x82>
				 {
					 if(HAL_GetTick() - prev >= 5000) return;
				 }
				 prev = HAL_GetTick();
 8004584:	f7fb fe86 	bl	8000294 <HAL_GetTick>
				 flag ++;
 8004588:	3501      	adds	r5, #1
				 prev = HAL_GetTick();
 800458a:	4604      	mov	r4, r0
		 }
		 if(flag >= 2)
 800458c:	2d01      	cmp	r5, #1
 800458e:	d9db      	bls.n	8004548 <switch_fn+0x20>
		 {
			 buz_fn(ac,av);
 8004590:	4639      	mov	r1, r7
 8004592:	4630      	mov	r0, r6
			 return;
		 }

	}
}
 8004594:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			 buz_fn(ac,av);
 8004598:	f7ff b8e6 	b.w	8003768 <buz_fn>
			 { if(HAL_GetTick() - prev >= 5000) return;}
 800459c:	f7fb fe7a 	bl	8000294 <HAL_GetTick>
 80045a0:	1b00      	subs	r0, r0, r4
 80045a2:	4558      	cmp	r0, fp
 80045a4:	d9d9      	bls.n	800455a <switch_fn+0x32>
}
 80045a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
					 if(HAL_GetTick() - prev >= 5000) return;
 80045aa:	f7fb fe73 	bl	8000294 <HAL_GetTick>
 80045ae:	f241 3387 	movw	r3, #4999	; 0x1387
 80045b2:	1b00      	subs	r0, r0, r4
 80045b4:	4298      	cmp	r0, r3
 80045b6:	d9e1      	bls.n	800457c <switch_fn+0x54>
 80045b8:	e7f5      	b.n	80045a6 <switch_fn+0x7e>
 80045ba:	bf00      	nop
 80045bc:	08006e07 	.word	0x08006e07
 80045c0:	08006e18 	.word	0x08006e18
 80045c4:	40010800 	.word	0x40010800
 80045c8:	08006e0d 	.word	0x08006e0d
 80045cc:	40011400 	.word	0x40011400

080045d0 <fatfs_fn>:
{

}

void fatfs_fn(int ac, char *av[])
{
 80045d0:	b508      	push	{r3, lr}
    printf("Micro SD...\n");
 80045d2:	4804      	ldr	r0, [pc, #16]	; (80045e4 <fatfs_fn+0x14>)
 80045d4:	f001 fb1e 	bl	8005c14 <puts>
	fatfs_test(0);
}
 80045d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	fatfs_test(0);
 80045dc:	2000      	movs	r0, #0
 80045de:	f7ff bb87 	b.w	8003cf0 <fatfs_test>
 80045e2:	bf00      	nop
 80045e4:	08006e23 	.word	0x08006e23

080045e8 <run_all>:

extern void MX_SPI2_Init(void);

void run_all(int ac, char *av[])
{
 80045e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045ec:	4604      	mov	r4, r0
 80045ee:	460d      	mov	r5, r1
	led_fn(ac,av);
 80045f0:	f7ff ff6c 	bl	80044cc <led_fn>
	fnd_fn(ac,av);
 80045f4:	4629      	mov	r1, r5
 80045f6:	4620      	mov	r0, r4
 80045f8:	f7ff febe 	bl	8004378 <fnd_fn>
	buz_fn(ac,av);
 80045fc:	4629      	mov	r1, r5
 80045fe:	4620      	mov	r0, r4
 8004600:	f7ff f8b2 	bl	8003768 <buz_fn>
	motor_fn(ac,av);
 8004604:	4629      	mov	r1, r5
 8004606:	4620      	mov	r0, r4
 8004608:	f7ff ff1a 	bl	8004440 <motor_fn>
	fatfs_test(0);
 800460c:	2000      	movs	r0, #0
 800460e:	f7ff fb6f 	bl	8003cf0 <fatfs_test>
	clcd_fn(ac,av);
 8004612:	4629      	mov	r1, r5
 8004614:	4620      	mov	r0, r4
 8004616:	f7ff f9cf 	bl	80039b8 <clcd_fn>

	// wating for next TFT LCD Test!
	while (SW2_GPIO_Port->IDR & SW2_Pin)	;
 800461a:	4b26      	ldr	r3, [pc, #152]	; (80046b4 <run_all+0xcc>)
 800461c:	461e      	mov	r6, r3
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	06d0      	lsls	r0, r2, #27
 8004622:	d4fc      	bmi.n	800461e <run_all+0x36>
    MX_SPI2_Init();
 8004624:	f000 fd30 	bl	8005088 <MX_SPI2_Init>

	tft_fn(ac,av);
 8004628:	4629      	mov	r1, r5
 800462a:	4620      	mov	r0, r4
 800462c:	f000 f9d4 	bl	80049d8 <tft_fn>
					goto out;
				}
			}

		}
		if(!(SW1_GPIO_Port->IDR & SW1_Pin))
 8004630:	f8df 9084 	ldr.w	r9, [pc, #132]	; 80046b8 <run_all+0xd0>
				if(HAL_GetTick() - prev > 3000)
 8004634:	f640 38b8 	movw	r8, #3000	; 0xbb8
		if(!(SW2_GPIO_Port->IDR & SW2_Pin))
 8004638:	68b3      	ldr	r3, [r6, #8]
 800463a:	06d9      	lsls	r1, r3, #27
 800463c:	d514      	bpl.n	8004668 <run_all+0x80>
		if(!(SW1_GPIO_Port->IDR & SW1_Pin))
 800463e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004642:	075a      	lsls	r2, r3, #29
 8004644:	d4f8      	bmi.n	8004638 <run_all+0x50>
		{
			cds_fn(ac,av);
 8004646:	4629      	mov	r1, r5
 8004648:	4620      	mov	r0, r4
 800464a:	f7ff f8a7 	bl	800379c <cds_fn>
			prev = HAL_GetTick();
 800464e:	f7fb fe21 	bl	8000294 <HAL_GetTick>
 8004652:	4607      	mov	r7, r0
			while(!(SW1_GPIO_Port->IDR & SW1_Pin))
 8004654:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8004658:	0758      	lsls	r0, r3, #29
 800465a:	d4ed      	bmi.n	8004638 <run_all+0x50>
			{
				if(HAL_GetTick() - prev > 3000)
 800465c:	f7fb fe1a 	bl	8000294 <HAL_GetTick>
 8004660:	1bc0      	subs	r0, r0, r7
 8004662:	4540      	cmp	r0, r8
 8004664:	d9f6      	bls.n	8004654 <run_all+0x6c>
 8004666:	e00e      	b.n	8004686 <run_all+0x9e>
			temp_fn(ac,av);
 8004668:	4629      	mov	r1, r5
 800466a:	4620      	mov	r0, r4
 800466c:	f000 f82a 	bl	80046c4 <temp_fn>
			prev = HAL_GetTick();
 8004670:	f7fb fe10 	bl	8000294 <HAL_GetTick>
 8004674:	4607      	mov	r7, r0
			while(!(SW2_GPIO_Port->IDR & SW2_Pin))
 8004676:	68b3      	ldr	r3, [r6, #8]
 8004678:	06db      	lsls	r3, r3, #27
 800467a:	d4e0      	bmi.n	800463e <run_all+0x56>
				if(HAL_GetTick() - prev > 3000)
 800467c:	f7fb fe0a 	bl	8000294 <HAL_GetTick>
 8004680:	1bc0      	subs	r0, r0, r7
 8004682:	4540      	cmp	r0, r8
 8004684:	d9f7      	bls.n	8004676 <run_all+0x8e>
			}

		}
	}
out:;
	while(!(SW2_GPIO_Port->IDR & SW2_Pin) || !(SW1_GPIO_Port->IDR & SW1_Pin));
 8004686:	4a0c      	ldr	r2, [pc, #48]	; (80046b8 <run_all+0xd0>)
 8004688:	68b3      	ldr	r3, [r6, #8]
 800468a:	06d9      	lsls	r1, r3, #27
 800468c:	d5fc      	bpl.n	8004688 <run_all+0xa0>
 800468e:	6893      	ldr	r3, [r2, #8]
 8004690:	075b      	lsls	r3, r3, #29
 8004692:	d5f9      	bpl.n	8004688 <run_all+0xa0>
	CLCD_printf(0,0,"                ");
 8004694:	2100      	movs	r1, #0
 8004696:	4a09      	ldr	r2, [pc, #36]	; (80046bc <run_all+0xd4>)
 8004698:	4608      	mov	r0, r1
 800469a:	f7ff f941 	bl	8003920 <CLCD_printf>
	CLCD_printf(0,1," Test Loop exit ");
 800469e:	4a08      	ldr	r2, [pc, #32]	; (80046c0 <run_all+0xd8>)
 80046a0:	2101      	movs	r1, #1
 80046a2:	2000      	movs	r0, #0
 80046a4:	f7ff f93c 	bl	8003920 <CLCD_printf>
	HAL_Delay(1000);
}
 80046a8:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	HAL_Delay(1000);
 80046ac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046b0:	f7fb bdf6 	b.w	80002a0 <HAL_Delay>
 80046b4:	40010800 	.word	0x40010800
 80046b8:	40011400 	.word	0x40011400
 80046bc:	08006e2f 	.word	0x08006e2f
 80046c0:	08006e40 	.word	0x08006e40

080046c4 <temp_fn>:

#include "main.h"

extern I2C_HandleTypeDef hi2c1;
void temp_fn(int ac, char *av[])
{
 80046c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    uint8_t buf[2];
    printf("Temperature...\t");
 80046c6:	4814      	ldr	r0, [pc, #80]	; (8004718 <temp_fn+0x54>)
 80046c8:	f001 fa1e 	bl	8005b08 <iprintf>
    HAL_I2C_Master_Receive(&hi2c1,0x4c<<1, buf,2,1000);
 80046cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80046d0:	aa03      	add	r2, sp, #12
 80046d2:	9300      	str	r3, [sp, #0]
 80046d4:	2198      	movs	r1, #152	; 0x98
 80046d6:	2302      	movs	r3, #2
 80046d8:	4810      	ldr	r0, [pc, #64]	; (800471c <temp_fn+0x58>)
 80046da:	f7fc fb51 	bl	8000d80 <HAL_I2C_Master_Receive>
    printf("Temp=%d.%c\n",buf[0],buf[1]&0x80?'5':'0');
 80046de:	f99d 300d 	ldrsb.w	r3, [sp, #13]
 80046e2:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80046e6:	480e      	ldr	r0, [pc, #56]	; (8004720 <temp_fn+0x5c>)
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	bfb4      	ite	lt
 80046ec:	2235      	movlt	r2, #53	; 0x35
 80046ee:	2230      	movge	r2, #48	; 0x30
 80046f0:	f001 fa0a 	bl	8005b08 <iprintf>
    CLCD_printf(0,1,"TEMP VAL=%02d.%c  ",buf[0],buf[1]&0x80?'5':'0');
 80046f4:	f99d 300d 	ldrsb.w	r3, [sp, #13]
 80046f8:	4a0a      	ldr	r2, [pc, #40]	; (8004724 <temp_fn+0x60>)
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	bfb4      	ite	lt
 80046fe:	2335      	movlt	r3, #53	; 0x35
 8004700:	2330      	movge	r3, #48	; 0x30
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	2101      	movs	r1, #1
 8004706:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800470a:	2000      	movs	r0, #0
 800470c:	f7ff f908 	bl	8003920 <CLCD_printf>
}
 8004710:	b005      	add	sp, #20
 8004712:	f85d fb04 	ldr.w	pc, [sp], #4
 8004716:	bf00      	nop
 8004718:	08006e51 	.word	0x08006e51
 800471c:	20004360 	.word	0x20004360
 8004720:	08006e61 	.word	0x08006e61
 8004724:	08006e6d 	.word	0x08006e6d

08004728 <HSPI_WRITE>:
extern SPI_HandleTypeDef hspi2;

#define HSPI_TFTLCD &hspi2
#define TFT_SPI_TIMEOUT 100
void HSPI_WRITE(uint8_t data)
{
 8004728:	b513      	push	{r0, r1, r4, lr}
	while(!__HAL_SPI_GET_FLAG(HSPI_TFTLCD, SPI_FLAG_TXE));
 800472a:	4c0a      	ldr	r4, [pc, #40]	; (8004754 <HSPI_WRITE+0x2c>)
{
 800472c:	f88d 0007 	strb.w	r0, [sp, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_TFTLCD, SPI_FLAG_TXE));
 8004730:	6822      	ldr	r2, [r4, #0]
 8004732:	6893      	ldr	r3, [r2, #8]
 8004734:	0799      	lsls	r1, r3, #30
 8004736:	d5fc      	bpl.n	8004732 <HSPI_WRITE+0xa>
	HAL_SPI_Transmit(HSPI_TFTLCD, &data, 1, TFT_SPI_TIMEOUT);
 8004738:	2201      	movs	r2, #1
 800473a:	4806      	ldr	r0, [pc, #24]	; (8004754 <HSPI_WRITE+0x2c>)
 800473c:	2364      	movs	r3, #100	; 0x64
 800473e:	f10d 0107 	add.w	r1, sp, #7
 8004742:	f7fd fae9 	bl	8001d18 <HAL_SPI_Transmit>
	while(!__HAL_SPI_GET_FLAG(HSPI_TFTLCD, SPI_FLAG_TXE));
 8004746:	6822      	ldr	r2, [r4, #0]
 8004748:	6893      	ldr	r3, [r2, #8]
 800474a:	079b      	lsls	r3, r3, #30
 800474c:	d5fc      	bpl.n	8004748 <HSPI_WRITE+0x20>
//	printf("SPI2=%02x\n",data&0xff);
}
 800474e:	b002      	add	sp, #8
 8004750:	bd10      	pop	{r4, pc}
 8004752:	bf00      	nop
 8004754:	200042c4 	.word	0x200042c4

08004758 <_writeCommand16>:
void _writeCommand16(uint16_t command) {
 8004758:	b538      	push	{r3, r4, r5, lr}
    SPI_DC_LOW();
 800475a:	4b09      	ldr	r3, [pc, #36]	; (8004780 <_writeCommand16+0x28>)
    SPI_CS_LOW();
 800475c:	4d09      	ldr	r5, [pc, #36]	; (8004784 <_writeCommand16+0x2c>)
    SPI_DC_LOW();
 800475e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004762:	611a      	str	r2, [r3, #16]
    SPI_CS_LOW();
 8004764:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004768:	612b      	str	r3, [r5, #16]
void _writeCommand16(uint16_t command) {
 800476a:	4604      	mov	r4, r0

# ifdef HSPI_WRITE16
        HSPI_WRITE16(command);
#else
        HSPI_WRITE(command >> 8);
 800476c:	0a00      	lsrs	r0, r0, #8
 800476e:	f7ff ffdb 	bl	8004728 <HSPI_WRITE>
        HSPI_WRITE(0x00ff & command);
 8004772:	b2e0      	uxtb	r0, r4
 8004774:	f7ff ffd8 	bl	8004728 <HSPI_WRITE>
#endif

    SPI_CS_HIGH();
 8004778:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800477c:	612b      	str	r3, [r5, #16]
}
 800477e:	bd38      	pop	{r3, r4, r5, pc}
 8004780:	40011000 	.word	0x40011000
 8004784:	40010c00 	.word	0x40010c00

08004788 <_writeData16>:

void _writeData16(uint16_t data) {
 8004788:	b538      	push	{r3, r4, r5, lr}
    SPI_DC_HIGH();
 800478a:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <_writeData16+0x28>)
    SPI_CS_LOW();
 800478c:	4d09      	ldr	r5, [pc, #36]	; (80047b4 <_writeData16+0x2c>)
    SPI_DC_HIGH();
 800478e:	2202      	movs	r2, #2
 8004790:	611a      	str	r2, [r3, #16]
    SPI_CS_LOW();
 8004792:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004796:	612b      	str	r3, [r5, #16]
void _writeData16(uint16_t data) {
 8004798:	4604      	mov	r4, r0

# ifdef HSPI_WRITE16
        HSPI_WRITE16(data);
#else
        HSPI_WRITE(data >> 8);
 800479a:	0a00      	lsrs	r0, r0, #8
 800479c:	f7ff ffc4 	bl	8004728 <HSPI_WRITE>
        HSPI_WRITE(0x00ff & data);
 80047a0:	b2e0      	uxtb	r0, r4
 80047a2:	f7ff ffc1 	bl	8004728 <HSPI_WRITE>
#endif
    SPI_CS_HIGH();
 80047a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047aa:	612b      	str	r3, [r5, #16]
}
 80047ac:	bd38      	pop	{r3, r4, r5, pc}
 80047ae:	bf00      	nop
 80047b0:	40011000 	.word	0x40011000
 80047b4:	40010c00 	.word	0x40010c00

080047b8 <_writeRegister>:

static void _writeRegister(uint16_t reg, uint16_t data) {
 80047b8:	b510      	push	{r4, lr}
 80047ba:	460c      	mov	r4, r1
    _writeCommand16(reg);
 80047bc:	f7ff ffcc 	bl	8004758 <_writeCommand16>
    _writeData16(data);
 80047c0:	4620      	mov	r0, r4
}
 80047c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _writeData16(data);
 80047c6:	f7ff bfdf 	b.w	8004788 <_writeData16>
	...

080047cc <setOrientation>:
{
	_blState = flag;
}
void setOrientation(uint8_t orientation) {

    _orientation = orientation % 4;
 80047cc:	4b08      	ldr	r3, [pc, #32]	; (80047f0 <setOrientation+0x24>)
 80047ce:	f000 0203 	and.w	r2, r0, #3

    switch (_orientation) {
 80047d2:	f010 0f01 	tst.w	r0, #1
    _orientation = orientation % 4;
 80047d6:	601a      	str	r2, [r3, #0]
    switch (_orientation) {
 80047d8:	4a06      	ldr	r2, [pc, #24]	; (80047f4 <setOrientation+0x28>)
 80047da:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <setOrientation+0x2c>)
    case 0:
        _maxX = ILI9225_LCD_WIDTH;
 80047dc:	bf0b      	itete	eq
 80047de:	21b0      	moveq	r1, #176	; 0xb0
        _maxY = ILI9225_LCD_HEIGHT;
        break;
    case 1:
        _maxX = ILI9225_LCD_HEIGHT;
 80047e0:	21dc      	movne	r1, #220	; 0xdc
        _maxX = ILI9225_LCD_WIDTH;
 80047e2:	6011      	streq	r1, [r2, #0]
        _maxX = ILI9225_LCD_HEIGHT;
 80047e4:	6011      	strne	r1, [r2, #0]
        _maxY = ILI9225_LCD_HEIGHT;
 80047e6:	bf0c      	ite	eq
 80047e8:	22dc      	moveq	r2, #220	; 0xdc
        _maxY = ILI9225_LCD_WIDTH;
 80047ea:	22b0      	movne	r2, #176	; 0xb0
 80047ec:	601a      	str	r2, [r3, #0]
    case 3:
        _maxX = ILI9225_LCD_HEIGHT;
        _maxY = ILI9225_LCD_WIDTH;
        break;
    }
}
 80047ee:	4770      	bx	lr
 80047f0:	2000017c 	.word	0x2000017c
 80047f4:	20000174 	.word	0x20000174
 80047f8:	20000178 	.word	0x20000178

080047fc <__setWindow>:
            _swap(&x1, &y1);
            break;
    }
}
#define DB_PRINT printf
void __setWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,int  mode) {
 80047fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

//    DB_PRINT( "setWindows( x0=%d, y0=%d, x1=%d, y1=%d, mode=%d", x0,y0,x1,y1,mode );

    // clip to TFT-Dimensions
    x0 = min( x0, (uint16_t) (_maxX-1) );
 8004800:	4c33      	ldr	r4, [pc, #204]	; (80048d0 <__setWindow+0xd4>)
void __setWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1,int  mode) {
 8004802:	f8dd 8018 	ldr.w	r8, [sp, #24]
    x0 = min( x0, (uint16_t) (_maxX-1) );
 8004806:	6824      	ldr	r4, [r4, #0]
 8004808:	3c01      	subs	r4, #1
 800480a:	b2a4      	uxth	r4, r4
 800480c:	42a0      	cmp	r0, r4
 800480e:	bf28      	it	cs
 8004810:	4620      	movcs	r0, r4
    x1 = min( x1, (uint16_t) (_maxX-1) );
 8004812:	4294      	cmp	r4, r2
 8004814:	bf28      	it	cs
 8004816:	4614      	movcs	r4, r2
    y0 = min( y0, (uint16_t) (_maxY-1) );
 8004818:	4a2e      	ldr	r2, [pc, #184]	; (80048d4 <__setWindow+0xd8>)
 800481a:	6815      	ldr	r5, [r2, #0]
 800481c:	3d01      	subs	r5, #1
 800481e:	b2ad      	uxth	r5, r5
 8004820:	42a9      	cmp	r1, r5
 8004822:	bf28      	it	cs
 8004824:	4629      	movcs	r1, r5
    y1 = min( y1, (uint16_t) (_maxY-1) );
 8004826:	429d      	cmp	r5, r3
 8004828:	bf28      	it	cs
 800482a:	461d      	movcs	r5, r3
    _orientCoordinates(x0, y0);
    _orientCoordinates(x1, y1);

    if (x1<x0) _swap(&x0, &x1);
 800482c:	42a0      	cmp	r0, r4
 800482e:	bf88      	it	hi
 8004830:	4603      	movhi	r3, r0
    x0 = min( x0, (uint16_t) (_maxX-1) );
 8004832:	4606      	mov	r6, r0
    if (x1<x0) _swap(&x0, &x1);
 8004834:	bf84      	itt	hi
 8004836:	4626      	movhi	r6, r4
 8004838:	461c      	movhi	r4, r3
    if (y1<y0) _swap(&y0, &y1);
 800483a:	42a9      	cmp	r1, r5
 800483c:	bf88      	it	hi
 800483e:	460b      	movhi	r3, r1
    y0 = min( y0, (uint16_t) (_maxY-1) );
 8004840:	460f      	mov	r7, r1
    if (y1<y0) _swap(&y0, &y1);
 8004842:	bf84      	itt	hi
 8004844:	462f      	movhi	r7, r5
 8004846:	461d      	movhi	r5, r3

    startWrite();
    // autoincrement mode
    if ( _orientation > 0 ) mode = modeTab[_orientation-1][mode];
 8004848:	4b23      	ldr	r3, [pc, #140]	; (80048d8 <__setWindow+0xdc>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	2a00      	cmp	r2, #0
 800484e:	bfc2      	ittt	gt
 8004850:	f102 32ff 	addgt.w	r2, r2, #4294967295
 8004854:	4b21      	ldrgt	r3, [pc, #132]	; (80048dc <__setWindow+0xe0>)
 8004856:	eb08 02c2 	addgt.w	r2, r8, r2, lsl #3
    _writeRegister(ILI9225_ENTRY_MODE, 0x1000 | ( mode<<3) );
 800485a:	f04f 0003 	mov.w	r0, #3
    if ( _orientation > 0 ) mode = modeTab[_orientation-1][mode];
 800485e:	bfc8      	it	gt
 8004860:	f853 8022 	ldrgt.w	r8, [r3, r2, lsl #2]
    _writeRegister(ILI9225_ENTRY_MODE, 0x1000 | ( mode<<3) );
 8004864:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8004868:	f441 5180 	orr.w	r1, r1, #4096	; 0x1000
 800486c:	b289      	uxth	r1, r1
 800486e:	f7ff ffa3 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_HORIZONTAL_WINDOW_ADDR1,x1);
 8004872:	4621      	mov	r1, r4
 8004874:	2036      	movs	r0, #54	; 0x36
 8004876:	f7ff ff9f 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_HORIZONTAL_WINDOW_ADDR2,x0);
 800487a:	4631      	mov	r1, r6
 800487c:	2037      	movs	r0, #55	; 0x37
 800487e:	f7ff ff9b 	bl	80047b8 <_writeRegister>

    _writeRegister(ILI9225_VERTICAL_WINDOW_ADDR1,y1);
 8004882:	4629      	mov	r1, r5
 8004884:	2038      	movs	r0, #56	; 0x38
 8004886:	f7ff ff97 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_VERTICAL_WINDOW_ADDR2,y0);
 800488a:	4639      	mov	r1, r7
 800488c:	2039      	movs	r0, #57	; 0x39
 800488e:	f7ff ff93 	bl	80047b8 <_writeRegister>
//    DB_PRINT( "gedreht: x0=%d, y0=%d, x1=%d, y1=%d, mode=%d", x0,y0,x1,y1,mode );
    // starting position within window and increment/decrement direction
    switch ( mode>>1 ) {
 8004892:	ea4f 0368 	mov.w	r3, r8, asr #1
 8004896:	2b03      	cmp	r3, #3
 8004898:	d80b      	bhi.n	80048b2 <__setWindow+0xb6>
 800489a:	e8df f003 	tbb	[pc, r3]
 800489e:	0f02      	.short	0x0f02
 80048a0:	1711      	.short	0x1711
        case 0:
            _writeRegister(ILI9225_RAM_ADDR_SET1,x1);
 80048a2:	4621      	mov	r1, r4
            _writeRegister(ILI9225_RAM_ADDR_SET2,y1);
            break;
        case 1:
            _writeRegister(ILI9225_RAM_ADDR_SET1,x0);
 80048a4:	2020      	movs	r0, #32
 80048a6:	f7ff ff87 	bl	80047b8 <_writeRegister>
            _writeRegister(ILI9225_RAM_ADDR_SET2,y1);
 80048aa:	4629      	mov	r1, r5
            _writeRegister(ILI9225_RAM_ADDR_SET1,x1);
            _writeRegister(ILI9225_RAM_ADDR_SET2,y0);
            break;
        case 3:
            _writeRegister(ILI9225_RAM_ADDR_SET1,x0);
            _writeRegister(ILI9225_RAM_ADDR_SET2,y0);
 80048ac:	2021      	movs	r0, #33	; 0x21
 80048ae:	f7ff ff83 	bl	80047b8 <_writeRegister>
    //_writeRegister(ILI9225_RAM_ADDR_SET2,y0);

    //_writeCommand(0x00, 0x22);

    endWrite();
}
 80048b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _writeCommand16( ILI9225_GRAM_DATA_REG );
 80048b6:	2022      	movs	r0, #34	; 0x22
 80048b8:	f7ff bf4e 	b.w	8004758 <_writeCommand16>
            _writeRegister(ILI9225_RAM_ADDR_SET1,x0);
 80048bc:	4631      	mov	r1, r6
 80048be:	e7f1      	b.n	80048a4 <__setWindow+0xa8>
            _writeRegister(ILI9225_RAM_ADDR_SET1,x1);
 80048c0:	4621      	mov	r1, r4
            _writeRegister(ILI9225_RAM_ADDR_SET1,x0);
 80048c2:	2020      	movs	r0, #32
 80048c4:	f7ff ff78 	bl	80047b8 <_writeRegister>
            _writeRegister(ILI9225_RAM_ADDR_SET2,y0);
 80048c8:	4639      	mov	r1, r7
 80048ca:	e7ef      	b.n	80048ac <__setWindow+0xb0>
            _writeRegister(ILI9225_RAM_ADDR_SET1,x0);
 80048cc:	4631      	mov	r1, r6
 80048ce:	e7f8      	b.n	80048c2 <__setWindow+0xc6>
 80048d0:	20000174 	.word	0x20000174
 80048d4:	20000178 	.word	0x20000178
 80048d8:	2000017c 	.word	0x2000017c
 80048dc:	08006e8c 	.word	0x08006e8c

080048e0 <_setWindow>:
void _setWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80048e0:	b513      	push	{r0, r1, r4, lr}
    __setWindow( x0, y0, x1, y1, TopDown_L2R ); // default for drawing characters
 80048e2:	2407      	movs	r4, #7
 80048e4:	9400      	str	r4, [sp, #0]
 80048e6:	f7ff ff89 	bl	80047fc <__setWindow>
}
 80048ea:	b002      	add	sp, #8
 80048ec:	bd10      	pop	{r4, pc}

080048ee <_resetWindow>:


void _resetWindow() {
 80048ee:	b508      	push	{r3, lr}
    _writeRegister(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF);
 80048f0:	21af      	movs	r1, #175	; 0xaf
 80048f2:	2036      	movs	r0, #54	; 0x36
 80048f4:	f7ff ff60 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000);
 80048f8:	2100      	movs	r1, #0
 80048fa:	2037      	movs	r0, #55	; 0x37
 80048fc:	f7ff ff5c 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB);
 8004900:	21db      	movs	r1, #219	; 0xdb
 8004902:	2038      	movs	r0, #56	; 0x38
 8004904:	f7ff ff58 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000);

}
 8004908:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _writeRegister(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000);
 800490c:	2100      	movs	r1, #0
 800490e:	2039      	movs	r0, #57	; 0x39
 8004910:	f7ff bf52 	b.w	80047b8 <_writeRegister>

08004914 <fillRectangle>:
void fillRectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t color) {
 8004914:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004918:	4607      	mov	r7, r0
 800491a:	4688      	mov	r8, r1
 800491c:	4615      	mov	r5, r2
 800491e:	461c      	mov	r4, r3
 8004920:	f8bd 6018 	ldrh.w	r6, [sp, #24]

    _setWindow(x1, y1, x2, y2);

    startWrite();
    for (uint16_t t=(y2 - y1 + 1) * (x2 - x1 + 1); t > 0; t--)
 8004924:	eba4 0408 	sub.w	r4, r4, r8
 8004928:	1bed      	subs	r5, r5, r7
    _setWindow(x1, y1, x2, y2);
 800492a:	f7ff ffd9 	bl	80048e0 <_setWindow>
    for (uint16_t t=(y2 - y1 + 1) * (x2 - x1 + 1); t > 0; t--)
 800492e:	3401      	adds	r4, #1
 8004930:	3501      	adds	r5, #1
 8004932:	fb14 f405 	smulbb	r4, r4, r5
 8004936:	b2a4      	uxth	r4, r4
 8004938:	b91c      	cbnz	r4, 8004942 <fillRectangle+0x2e>
        _writeData16(color);
    endWrite();
    _resetWindow();
}
 800493a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    _resetWindow();
 800493e:	f7ff bfd6 	b.w	80048ee <_resetWindow>
        _writeData16(color);
 8004942:	4630      	mov	r0, r6
 8004944:	f7ff ff20 	bl	8004788 <_writeData16>
    for (uint16_t t=(y2 - y1 + 1) * (x2 - x1 + 1); t > 0; t--)
 8004948:	3c01      	subs	r4, #1
 800494a:	e7f4      	b.n	8004936 <fillRectangle+0x22>

0800494c <clear>:

void clear() {
    uint8_t old = _orientation;
 800494c:	4b0d      	ldr	r3, [pc, #52]	; (8004984 <clear+0x38>)
void clear() {
 800494e:	b513      	push	{r0, r1, r4, lr}
    setOrientation(0);
 8004950:	2000      	movs	r0, #0
    uint8_t old = _orientation;
 8004952:	781c      	ldrb	r4, [r3, #0]
    setOrientation(0);
 8004954:	f7ff ff3a 	bl	80047cc <setOrientation>
    fillRectangle(0, 0, _maxX - 1, _maxY - 1, COLOR_BLACK);
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <clear+0x3c>)
 800495a:	4a0c      	ldr	r2, [pc, #48]	; (800498c <clear+0x40>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6812      	ldr	r2, [r2, #0]
 8004960:	2100      	movs	r1, #0
 8004962:	3b01      	subs	r3, #1
 8004964:	3a01      	subs	r2, #1
 8004966:	4608      	mov	r0, r1
 8004968:	9100      	str	r1, [sp, #0]
 800496a:	b29b      	uxth	r3, r3
 800496c:	b292      	uxth	r2, r2
 800496e:	f7ff ffd1 	bl	8004914 <fillRectangle>
    setOrientation(old);
 8004972:	4620      	mov	r0, r4
 8004974:	f7ff ff2a 	bl	80047cc <setOrientation>
    delay(10);
 8004978:	200a      	movs	r0, #10
}
 800497a:	b002      	add	sp, #8
 800497c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    delay(10);
 8004980:	f7fb bc8e 	b.w	80002a0 <HAL_Delay>
 8004984:	2000017c 	.word	0x2000017c
 8004988:	20000178 	.word	0x20000178
 800498c:	20000174 	.word	0x20000174

08004990 <fill>:

void fill(uint16_t color)
{
    uint8_t old = _orientation;
 8004990:	4b0e      	ldr	r3, [pc, #56]	; (80049cc <fill+0x3c>)
{
 8004992:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004994:	4604      	mov	r4, r0
    setOrientation(0);
 8004996:	2000      	movs	r0, #0
    uint8_t old = _orientation;
 8004998:	781d      	ldrb	r5, [r3, #0]
    setOrientation(0);
 800499a:	f7ff ff17 	bl	80047cc <setOrientation>
    fillRectangle(0, 0, _maxX - 1, _maxY - 1, color);
 800499e:	4b0c      	ldr	r3, [pc, #48]	; (80049d0 <fill+0x40>)
 80049a0:	4a0c      	ldr	r2, [pc, #48]	; (80049d4 <fill+0x44>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	9400      	str	r4, [sp, #0]
 80049a8:	2100      	movs	r1, #0
 80049aa:	3b01      	subs	r3, #1
 80049ac:	3a01      	subs	r2, #1
 80049ae:	4608      	mov	r0, r1
 80049b0:	b29b      	uxth	r3, r3
 80049b2:	b292      	uxth	r2, r2
 80049b4:	f7ff ffae 	bl	8004914 <fillRectangle>
    setOrientation(old);
 80049b8:	4628      	mov	r0, r5
 80049ba:	f7ff ff07 	bl	80047cc <setOrientation>
    delay(10);
 80049be:	200a      	movs	r0, #10
}
 80049c0:	b003      	add	sp, #12
 80049c2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    delay(10);
 80049c6:	f7fb bc6b 	b.w	80002a0 <HAL_Delay>
 80049ca:	bf00      	nop
 80049cc:	2000017c 	.word	0x2000017c
 80049d0:	20000178 	.word	0x20000178
 80049d4:	20000174 	.word	0x20000174

080049d8 <tft_fn>:
{
 80049d8:	b570      	push	{r4, r5, r6, lr}
	LED_GPIO_Port->BSRR = LED_Pin;
 80049da:	4c7a      	ldr	r4, [pc, #488]	; (8004bc4 <tft_fn+0x1ec>)
    printf("TFT LCD...\n");
 80049dc:	487a      	ldr	r0, [pc, #488]	; (8004bc8 <tft_fn+0x1f0>)
	LED_GPIO_Port->BSRR = LED_Pin;
 80049de:	2501      	movs	r5, #1
{
	static int init_flag = 0;
//	if(init_flag == 0)
	{
		init_flag = 1;
		RST_GPIO_Port->BSRR = RST_Pin; // HIGH
 80049e0:	2604      	movs	r6, #4
    printf("TFT LCD...\n");
 80049e2:	f001 f917 	bl	8005c14 <puts>
	LED_GPIO_Port->BSRR = LED_Pin;
 80049e6:	6125      	str	r5, [r4, #16]
		HAL_Delay(1);
 80049e8:	4628      	mov	r0, r5
		RST_GPIO_Port->BSRR = RST_Pin; // HIGH
 80049ea:	6126      	str	r6, [r4, #16]
		HAL_Delay(1);
 80049ec:	f7fb fc58 	bl	80002a0 <HAL_Delay>
		RST_GPIO_Port->BSRR = RST_Pin << 16; // LOW
 80049f0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80049f4:	6123      	str	r3, [r4, #16]
		HAL_Delay(10);
 80049f6:	200a      	movs	r0, #10
 80049f8:	f7fb fc52 	bl	80002a0 <HAL_Delay>
		RST_GPIO_Port->BSRR = RST_Pin; // HIGH
 80049fc:	6126      	str	r6, [r4, #16]
		HAL_Delay(50);
 80049fe:	2032      	movs	r0, #50	; 0x32
 8004a00:	f7fb fc4e 	bl	80002a0 <HAL_Delay>
	}

/* Set SS bit and direction output from S528 to S1 */
    startWrite();
    _writeRegister(ILI9225_POWER_CTRL1, 0x0000); // Set SAP,DSTB,STB
 8004a04:	2100      	movs	r1, #0
 8004a06:	2010      	movs	r0, #16
 8004a08:	f7ff fed6 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_POWER_CTRL2, 0x0000); // Set APON,PON,AON,VCI1EN,VC
 8004a0c:	2100      	movs	r1, #0
 8004a0e:	2011      	movs	r0, #17
 8004a10:	f7ff fed2 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_POWER_CTRL3, 0x0000); // Set BT,DC1,DC2,DC3
 8004a14:	2100      	movs	r1, #0
 8004a16:	2012      	movs	r0, #18
 8004a18:	f7ff fece 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_POWER_CTRL4, 0x0000); // Set GVDD
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	2013      	movs	r0, #19
 8004a20:	f7ff feca 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_POWER_CTRL5, 0x0000); // Set VCOMH/VCOML voltage
 8004a24:	2100      	movs	r1, #0
 8004a26:	2014      	movs	r0, #20
 8004a28:	f7ff fec6 	bl	80047b8 <_writeRegister>
    endWrite();
    delay(40);
 8004a2c:	2028      	movs	r0, #40	; 0x28
 8004a2e:	f7fb fc37 	bl	80002a0 <HAL_Delay>

    // Power-on sequence
    startWrite();
    _writeRegister(ILI9225_POWER_CTRL2, 0x0018); // Set APON,PON,AON,VCI1EN,VC
 8004a32:	2118      	movs	r1, #24
 8004a34:	2011      	movs	r0, #17
 8004a36:	f7ff febf 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_POWER_CTRL3, 0x6121); // Set BT,DC1,DC2,DC3
 8004a3a:	f246 1121 	movw	r1, #24865	; 0x6121
 8004a3e:	2012      	movs	r0, #18
 8004a40:	f7ff feba 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_POWER_CTRL4, 0x006F); // Set GVDD   /*007F 0088 */
 8004a44:	216f      	movs	r1, #111	; 0x6f
 8004a46:	2013      	movs	r0, #19
 8004a48:	f7ff feb6 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_POWER_CTRL5, 0x495F); // Set VCOMH/VCOML voltage
 8004a4c:	f644 115f 	movw	r1, #18783	; 0x495f
 8004a50:	2014      	movs	r0, #20
 8004a52:	f7ff feb1 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_POWER_CTRL1, 0x0800); // Set SAP,DSTB,STB
 8004a56:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004a5a:	2010      	movs	r0, #16
 8004a5c:	f7ff feac 	bl	80047b8 <_writeRegister>
    endWrite();
    delay(10);
 8004a60:	200a      	movs	r0, #10
 8004a62:	f7fb fc1d 	bl	80002a0 <HAL_Delay>
    startWrite();
    _writeRegister(ILI9225_POWER_CTRL2, 0x103B); // Set APON,PON,AON,VCI1EN,VC
 8004a66:	f241 013b 	movw	r1, #4155	; 0x103b
 8004a6a:	2011      	movs	r0, #17
 8004a6c:	f7ff fea4 	bl	80047b8 <_writeRegister>
    endWrite();
    delay(50);
 8004a70:	2032      	movs	r0, #50	; 0x32
 8004a72:	f7fb fc15 	bl	80002a0 <HAL_Delay>

    startWrite();
    _writeRegister(ILI9225_DRIVER_OUTPUT_CTRL, 0x011C); // set the display line number and display direction
 8004a76:	4628      	mov	r0, r5
 8004a78:	f44f 718e 	mov.w	r1, #284	; 0x11c
 8004a7c:	f7ff fe9c 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_LCD_AC_DRIVING_CTRL, 0x0100); // set 1 line inversion
 8004a80:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004a84:	2002      	movs	r0, #2
 8004a86:	f7ff fe97 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_ENTRY_MODE, 0x1038); // set GRAM write direction and BGR=1.
 8004a8a:	f241 0138 	movw	r1, #4152	; 0x1038
 8004a8e:	2003      	movs	r0, #3
 8004a90:	f7ff fe92 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_DISP_CTRL1, 0x0000); // Display off
 8004a94:	2100      	movs	r1, #0
 8004a96:	2007      	movs	r0, #7
 8004a98:	f7ff fe8e 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_BLANK_PERIOD_CTRL1, 0x0808); // set the back porch and front porch
 8004a9c:	f640 0108 	movw	r1, #2056	; 0x808
 8004aa0:	2008      	movs	r0, #8
 8004aa2:	f7ff fe89 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_FRAME_CYCLE_CTRL, 0x1100); // set the clocks number per line
 8004aa6:	f44f 5188 	mov.w	r1, #4352	; 0x1100
 8004aaa:	200b      	movs	r0, #11
 8004aac:	f7ff fe84 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_INTERFACE_CTRL, 0x0000); // CPU interface
 8004ab0:	2100      	movs	r1, #0
 8004ab2:	200c      	movs	r0, #12
 8004ab4:	f7ff fe80 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_OSC_CTRL, 0x0D01); // Set Osc  /*0e01*/
 8004ab8:	f640 5101 	movw	r1, #3329	; 0xd01
 8004abc:	200f      	movs	r0, #15
 8004abe:	f7ff fe7b 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_VCI_RECYCLING, 0x0020); // Set VCI recycling
 8004ac2:	2120      	movs	r1, #32
 8004ac4:	2015      	movs	r0, #21
 8004ac6:	f7ff fe77 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_RAM_ADDR_SET1, 0x0000); // RAM Address
 8004aca:	2100      	movs	r1, #0
 8004acc:	2020      	movs	r0, #32
 8004ace:	f7ff fe73 	bl	80047b8 <_writeRegister>
    _writeRegister(ILI9225_RAM_ADDR_SET2, 0x0000); // RAM Address
 8004ad2:	2100      	movs	r1, #0
 8004ad4:	2021      	movs	r0, #33	; 0x21
 8004ad6:	f7ff fe6f 	bl	80047b8 <_writeRegister>

    /* Set GRAM area */
     _writeRegister(ILI9225_GATE_SCAN_CTRL, 0x0000);
 8004ada:	2100      	movs	r1, #0
 8004adc:	2030      	movs	r0, #48	; 0x30
 8004ade:	f7ff fe6b 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_VERTICAL_SCROLL_CTRL1, 0x00DB);
 8004ae2:	21db      	movs	r1, #219	; 0xdb
 8004ae4:	2031      	movs	r0, #49	; 0x31
 8004ae6:	f7ff fe67 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000);
 8004aea:	2100      	movs	r1, #0
 8004aec:	2032      	movs	r0, #50	; 0x32
 8004aee:	f7ff fe63 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000);
 8004af2:	2100      	movs	r1, #0
 8004af4:	2033      	movs	r0, #51	; 0x33
 8004af6:	f7ff fe5f 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_PARTIAL_DRIVING_POS1, 0x00DB);
 8004afa:	21db      	movs	r1, #219	; 0xdb
 8004afc:	2034      	movs	r0, #52	; 0x34
 8004afe:	f7ff fe5b 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_PARTIAL_DRIVING_POS2, 0x0000);
 8004b02:	2100      	movs	r1, #0
 8004b04:	2035      	movs	r0, #53	; 0x35
 8004b06:	f7ff fe57 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF);
 8004b0a:	21af      	movs	r1, #175	; 0xaf
 8004b0c:	2036      	movs	r0, #54	; 0x36
 8004b0e:	f7ff fe53 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000);
 8004b12:	2100      	movs	r1, #0
 8004b14:	2037      	movs	r0, #55	; 0x37
 8004b16:	f7ff fe4f 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB);
 8004b1a:	21db      	movs	r1, #219	; 0xdb
 8004b1c:	2038      	movs	r0, #56	; 0x38
 8004b1e:	f7ff fe4b 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000);
 8004b22:	2100      	movs	r1, #0
 8004b24:	2039      	movs	r0, #57	; 0x39
 8004b26:	f7ff fe47 	bl	80047b8 <_writeRegister>

     /* Set GAMMA curve */
     _writeRegister(ILI9225_GAMMA_CTRL1, 0x0000);
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	2050      	movs	r0, #80	; 0x50
 8004b2e:	f7ff fe43 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL2, 0x0808);
 8004b32:	f640 0108 	movw	r1, #2056	; 0x808
 8004b36:	2051      	movs	r0, #81	; 0x51
 8004b38:	f7ff fe3e 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL3, 0x080A);
 8004b3c:	f640 010a 	movw	r1, #2058	; 0x80a
 8004b40:	2052      	movs	r0, #82	; 0x52
 8004b42:	f7ff fe39 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL4, 0x000A);
 8004b46:	210a      	movs	r1, #10
 8004b48:	2053      	movs	r0, #83	; 0x53
 8004b4a:	f7ff fe35 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL5, 0x0A08);
 8004b4e:	f640 2108 	movw	r1, #2568	; 0xa08
 8004b52:	2054      	movs	r0, #84	; 0x54
 8004b54:	f7ff fe30 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL6, 0x0808);
 8004b58:	f640 0108 	movw	r1, #2056	; 0x808
 8004b5c:	2055      	movs	r0, #85	; 0x55
 8004b5e:	f7ff fe2b 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL7, 0x0000);
 8004b62:	2100      	movs	r1, #0
 8004b64:	2056      	movs	r0, #86	; 0x56
 8004b66:	f7ff fe27 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL8, 0x0A00);
 8004b6a:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8004b6e:	2057      	movs	r0, #87	; 0x57
 8004b70:	f7ff fe22 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL9, 0x0710);
 8004b74:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8004b78:	2058      	movs	r0, #88	; 0x58
 8004b7a:	f7ff fe1d 	bl	80047b8 <_writeRegister>
     _writeRegister(ILI9225_GAMMA_CTRL10, 0x0710);
 8004b7e:	f44f 61e2 	mov.w	r1, #1808	; 0x710
 8004b82:	2059      	movs	r0, #89	; 0x59
 8004b84:	f7ff fe18 	bl	80047b8 <_writeRegister>

     _writeRegister(ILI9225_DISP_CTRL1, 0x0012);
 8004b88:	2112      	movs	r1, #18
 8004b8a:	2007      	movs	r0, #7
 8004b8c:	f7ff fe14 	bl	80047b8 <_writeRegister>
     endWrite();
     delay(50);
 8004b90:	2032      	movs	r0, #50	; 0x32
 8004b92:	f7fb fb85 	bl	80002a0 <HAL_Delay>
     startWrite();
     _writeRegister(ILI9225_DISP_CTRL1, 0x1017);
 8004b96:	f241 0117 	movw	r1, #4119	; 0x1017
 8004b9a:	2007      	movs	r0, #7
 8004b9c:	f7ff fe0c 	bl	80047b8 <_writeRegister>
     endWrite();

#define true 1 // by isjeon
     // Turn on backlight
      setBacklight(true);
      setOrientation(0);
 8004ba0:	2000      	movs	r0, #0
 8004ba2:	f7ff fe13 	bl	80047cc <setOrientation>
#define COLOR_GREEN          0x07E0      /*   0, 255,   0 */
#define COLOR_RED            0xF800      /* 255,   0,   0 */

      setBackgroundColor( COLOR_BLACK  );

      clear();
 8004ba6:	f7ff fed1 	bl	800494c <clear>


      fill(COLOR_RED);
 8004baa:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8004bae:	f7ff feef 	bl	8004990 <fill>
      fill(COLOR_GREEN);
 8004bb2:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8004bb6:	f7ff feeb 	bl	8004990 <fill>
      fill(COLOR_BLUE);
 8004bba:	201f      	movs	r0, #31
 8004bbc:	f7ff fee8 	bl	8004990 <fill>
}
 8004bc0:	bd70      	pop	{r4, r5, r6, pc}
 8004bc2:	bf00      	nop
 8004bc4:	40011000 	.word	0x40011000
 8004bc8:	08006e80 	.word	0x08006e80

08004bcc <insert_uart_Q>:
__IO uint32_t rx_flag3, rx_char3;


uart_rx_queue_t stdin_uart;
int insert_uart_Q(uart_rx_queue_t *Q, uint8_t ch)
{
 8004bcc:	b510      	push	{r4, lr}
	if((Q->wr + 1) % UART_Q_SZ == Q->rd)
 8004bce:	7c02      	ldrb	r2, [r0, #16]
 8004bd0:	7c44      	ldrb	r4, [r0, #17]
 8004bd2:	1c53      	adds	r3, r2, #1
 8004bd4:	f003 030f 	and.w	r3, r3, #15
 8004bd8:	42a3      	cmp	r3, r4
	{
		return -1; // Full
	}
	Q->data[Q->wr] = ch;
 8004bda:	bf1b      	ittet	ne
 8004bdc:	5481      	strbne	r1, [r0, r2]
	Q->wr = (Q->wr + 1) % UART_Q_SZ;
 8004bde:	7403      	strbne	r3, [r0, #16]
		return -1; // Full
 8004be0:	f04f 30ff 	moveq.w	r0, #4294967295
	return 0;
 8004be4:	2000      	movne	r0, #0
}
 8004be6:	bd10      	pop	{r4, pc}

08004be8 <delete_uart_Q>:

int delete_uart_Q(uart_rx_queue_t *Q)
{
	int ch;
	if(Q->wr == Q->rd) return -1;
 8004be8:	7c43      	ldrb	r3, [r0, #17]
 8004bea:	7c01      	ldrb	r1, [r0, #16]
 8004bec:	4299      	cmp	r1, r3
{
 8004bee:	4602      	mov	r2, r0
	ch = Q->data[Q->rd];
 8004bf0:	bf1f      	itttt	ne
 8004bf2:	5cc0      	ldrbne	r0, [r0, r3]
	Q->rd = (Q->rd + 1) % UART_Q_SZ;
 8004bf4:	3301      	addne	r3, #1
 8004bf6:	f003 030f 	andne.w	r3, r3, #15
 8004bfa:	7453      	strbne	r3, [r2, #17]
	if(Q->wr == Q->rd) return -1;
 8004bfc:	bf08      	it	eq
 8004bfe:	f04f 30ff 	moveq.w	r0, #4294967295
	return ch;
}
 8004c02:	4770      	bx	lr

08004c04 <is_available>:

int is_available(uart_rx_queue_t *Q)
{
	return (Q->wr != Q->rd);
 8004c04:	7c02      	ldrb	r2, [r0, #16]
 8004c06:	7c40      	ldrb	r0, [r0, #17]
}
 8004c08:	1a10      	subs	r0, r2, r0
 8004c0a:	bf18      	it	ne
 8004c0c:	2001      	movne	r0, #1
 8004c0e:	4770      	bx	lr

08004c10 <uart_rx_ready_IT>:

void uart_rx_ready_IT(UART_HandleTypeDef *huart,uint8_t *buf)
{
	 HAL_UART_Receive_IT(huart, buf , 1);
 8004c10:	2201      	movs	r2, #1
 8004c12:	f7fd bdbe 	b.w	8002792 <HAL_UART_Receive_IT>
	...

08004c18 <_write>:
}

#include <stdio.h>
int _write(int file, char *data, int len)
{
 8004c18:	b510      	push	{r4, lr}
    int bytes_written;

    HAL_UART_Transmit(&huart2,(uint8_t *)data, len,1000);
 8004c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
 8004c1e:	4614      	mov	r4, r2
    HAL_UART_Transmit(&huart2,(uint8_t *)data, len,1000);
 8004c20:	4802      	ldr	r0, [pc, #8]	; (8004c2c <_write+0x14>)
 8004c22:	b292      	uxth	r2, r2
 8004c24:	f7fd fbea 	bl	80023fc <HAL_UART_Transmit>

    bytes_written = len;
    return bytes_written;
}
 8004c28:	4620      	mov	r0, r4
 8004c2a:	bd10      	pop	{r4, pc}
 8004c2c:	200044e4 	.word	0x200044e4

08004c30 <my_putchar>:

void my_putchar(char c)
{
 8004c30:	b507      	push	{r0, r1, r2, lr}
        _write(1,&c,1);
 8004c32:	2201      	movs	r2, #1
{
 8004c34:	f88d 0007 	strb.w	r0, [sp, #7]
        _write(1,&c,1);
 8004c38:	f10d 0107 	add.w	r1, sp, #7
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	f7ff ffeb 	bl	8004c18 <_write>
}
 8004c42:	b003      	add	sp, #12
 8004c44:	f85d fb04 	ldr.w	pc, [sp], #4

08004c48 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
	if(huart == &huart3)
 8004c48:	4b15      	ldr	r3, [pc, #84]	; (8004ca0 <HAL_UART_RxCpltCallback+0x58>)
 8004c4a:	4298      	cmp	r0, r3
{
 8004c4c:	b570      	push	{r4, r5, r6, lr}
 8004c4e:	4604      	mov	r4, r0
	if(huart == &huart3)
 8004c50:	d116      	bne.n	8004c80 <HAL_UART_RxCpltCallback+0x38>
	{

//		printf("Usart3 rx=%c\n",rxBuff3[0]);
		rx_char3 = rxBuff3[0];
 8004c52:	4d14      	ldr	r5, [pc, #80]	; (8004ca4 <HAL_UART_RxCpltCallback+0x5c>)
 8004c54:	4a14      	ldr	r2, [pc, #80]	; (8004ca8 <HAL_UART_RxCpltCallback+0x60>)
 8004c56:	782b      	ldrb	r3, [r5, #0]
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	6013      	str	r3, [r2, #0]
		rx_flag3 = 1;
 8004c5c:	4b13      	ldr	r3, [pc, #76]	; (8004cac <HAL_UART_RxCpltCallback+0x64>)
 8004c5e:	2601      	movs	r6, #1
 8004c60:	601e      	str	r6, [r3, #0]
		rxBuff3[0] ++;
 8004c62:	782b      	ldrb	r3, [r5, #0]
 8004c64:	4433      	add	r3, r6
 8004c66:	b2db      	uxtb	r3, r3

		  HAL_UART_Receive_IT(&huart3, rxBuff3 , 1);
 8004c68:	4632      	mov	r2, r6
 8004c6a:	4629      	mov	r1, r5
		rxBuff3[0] ++;
 8004c6c:	702b      	strb	r3, [r5, #0]
		  HAL_UART_Receive_IT(&huart3, rxBuff3 , 1);
 8004c6e:	f7fd fd90 	bl	8002792 <HAL_UART_Receive_IT>
		HAL_UART_Transmit(&huart2,(uint8_t *)rxBuff3,1,1000);
 8004c72:	480f      	ldr	r0, [pc, #60]	; (8004cb0 <HAL_UART_RxCpltCallback+0x68>)
 8004c74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004c78:	4632      	mov	r2, r6
 8004c7a:	4629      	mov	r1, r5
 8004c7c:	f7fd fbbe 	bl	80023fc <HAL_UART_Transmit>
	}
	if(huart == &huart2)
 8004c80:	4b0b      	ldr	r3, [pc, #44]	; (8004cb0 <HAL_UART_RxCpltCallback+0x68>)
 8004c82:	429c      	cmp	r4, r3
 8004c84:	d10b      	bne.n	8004c9e <HAL_UART_RxCpltCallback+0x56>
	{
		insert_uart_Q(&stdin_uart,rxBuff2[0]);
 8004c86:	4d0b      	ldr	r5, [pc, #44]	; (8004cb4 <HAL_UART_RxCpltCallback+0x6c>)
 8004c88:	480b      	ldr	r0, [pc, #44]	; (8004cb8 <HAL_UART_RxCpltCallback+0x70>)
 8004c8a:	7829      	ldrb	r1, [r5, #0]
 8004c8c:	f7ff ff9e 	bl	8004bcc <insert_uart_Q>
		HAL_UART_Receive_IT(&huart2, rxBuff2 , 1);
 8004c90:	4629      	mov	r1, r5
 8004c92:	4620      	mov	r0, r4
 8004c94:	2201      	movs	r2, #1
//		printf("Usart2 rx=%c\n",rxBuff2[0]);
	}
}
 8004c96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		HAL_UART_Receive_IT(&huart2, rxBuff2 , 1);
 8004c9a:	f7fd bd7a 	b.w	8002792 <HAL_UART_Receive_IT>
}
 8004c9e:	bd70      	pop	{r4, r5, r6, pc}
 8004ca0:	2000431c 	.word	0x2000431c
 8004ca4:	200043e4 	.word	0x200043e4
 8004ca8:	2000225c 	.word	0x2000225c
 8004cac:	20002258 	.word	0x20002258
 8004cb0:	200044e4 	.word	0x200044e4
 8004cb4:	200043e6 	.word	0x200043e6
 8004cb8:	20002244 	.word	0x20002244

08004cbc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004cbc:	b508      	push	{r3, lr}
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8004cbe:	4903      	ldr	r1, [pc, #12]	; (8004ccc <MX_FATFS_Init+0x10>)
 8004cc0:	4803      	ldr	r0, [pc, #12]	; (8004cd0 <MX_FATFS_Init+0x14>)
 8004cc2:	f7fe fd4d 	bl	8003760 <FATFS_LinkDriver>
 8004cc6:	4b03      	ldr	r3, [pc, #12]	; (8004cd4 <MX_FATFS_Init+0x18>)
 8004cc8:	7018      	strb	r0, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8004cca:	bd08      	pop	{r3, pc}
 8004ccc:	20002260 	.word	0x20002260
 8004cd0:	20000030 	.word	0x20000030
 8004cd4:	20002264 	.word	0x20002264

08004cd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004cd8:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cda:	2214      	movs	r2, #20
{
 8004cdc:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004cde:	2400      	movs	r4, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004ce0:	4621      	mov	r1, r4
 8004ce2:	eb0d 0002 	add.w	r0, sp, r2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004ce6:	940d      	str	r4, [sp, #52]	; 0x34
 8004ce8:	940f      	str	r4, [sp, #60]	; 0x3c
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004cea:	f000 fe5c 	bl	80059a6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004cee:	4621      	mov	r1, r4
 8004cf0:	2210      	movs	r2, #16
 8004cf2:	a801      	add	r0, sp, #4
 8004cf4:	f000 fe57 	bl	80059a6 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004cf8:	2209      	movs	r2, #9
 8004cfa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004cfe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d02:	2301      	movs	r3, #1
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d04:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004d06:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004d08:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004d0a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d0e:	e9cd 5311 	strd	r5, r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d12:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL8;
 8004d14:	f44f 13c0 	mov.w	r3, #1572864	; 0x180000
 8004d18:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8004d1a:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004d1c:	f7fc f9da 	bl	80010d4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004d20:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004d22:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004d26:	4629      	mov	r1, r5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004d28:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004d2c:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004d2e:	e9cd 3408 	strd	r3, r4, [sp, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004d32:	9407      	str	r4, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004d34:	f7fc fba4 	bl	8001480 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_ADC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004d38:	2103      	movs	r1, #3
 8004d3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d3e:	e9cd 1301 	strd	r1, r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d42:	a801      	add	r0, sp, #4
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 8004d44:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004d48:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d4a:	f7fc fc55 	bl	80015f8 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8004d4e:	b015      	add	sp, #84	; 0x54
 8004d50:	bd30      	pop	{r4, r5, pc}
	...

08004d54 <main>:
{
 8004d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d58:	2710      	movs	r7, #16
{
 8004d5a:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8004d5c:	f7fb fa7c 	bl	8000258 <HAL_Init>
  SystemClock_Config();
 8004d60:	f7ff ffba 	bl	8004cd8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d64:	463a      	mov	r2, r7
 8004d66:	2100      	movs	r1, #0
 8004d68:	a806      	add	r0, sp, #24
 8004d6a:	f000 fe1c 	bl	80059a6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d6e:	4bac      	ldr	r3, [pc, #688]	; (8005020 <main+0x2cc>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, AIN2_Pin|LED5_Pin|LED7_Pin|FND_SEL2_Pin
 8004d70:	48ac      	ldr	r0, [pc, #688]	; (8005024 <main+0x2d0>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d72:	699a      	ldr	r2, [r3, #24]
  huart2.Instance = USART2;
 8004d74:	4eac      	ldr	r6, [pc, #688]	; (8005028 <main+0x2d4>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004d76:	433a      	orrs	r2, r7
 8004d78:	619a      	str	r2, [r3, #24]
 8004d7a:	699a      	ldr	r2, [r3, #24]
 8004d7c:	403a      	ands	r2, r7
 8004d7e:	9200      	str	r2, [sp, #0]
 8004d80:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d82:	699a      	ldr	r2, [r3, #24]
 8004d84:	f042 0220 	orr.w	r2, r2, #32
 8004d88:	619a      	str	r2, [r3, #24]
 8004d8a:	699a      	ldr	r2, [r3, #24]
 8004d8c:	f002 0220 	and.w	r2, r2, #32
 8004d90:	9201      	str	r2, [sp, #4]
 8004d92:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	f042 0204 	orr.w	r2, r2, #4
 8004d9a:	619a      	str	r2, [r3, #24]
 8004d9c:	699a      	ldr	r2, [r3, #24]
 8004d9e:	f002 0204 	and.w	r2, r2, #4
 8004da2:	9202      	str	r2, [sp, #8]
 8004da4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004da6:	699a      	ldr	r2, [r3, #24]
 8004da8:	f042 0208 	orr.w	r2, r2, #8
 8004dac:	619a      	str	r2, [r3, #24]
 8004dae:	699b      	ldr	r3, [r3, #24]
 8004db0:	f003 0308 	and.w	r3, r3, #8
 8004db4:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, AIN2_Pin|LED5_Pin|LED7_Pin|FND_SEL2_Pin
 8004db6:	2200      	movs	r2, #0
 8004db8:	f243 31fa 	movw	r1, #13306	; 0x33fa
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004dbc:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, AIN2_Pin|LED5_Pin|LED7_Pin|FND_SEL2_Pin
 8004dbe:	f7fb fe95 	bl	8000aec <HAL_GPIO_WritePin>
                          |LCD_D4_Pin|LCD_D5_Pin|LCD_D6_Pin|LCD_D7_Pin
                          |LCD_RS_Pin|BIN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED4_Pin|LED6_Pin, GPIO_PIN_SET);
 8004dc2:	4898      	ldr	r0, [pc, #608]	; (8005024 <main+0x2d0>)
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	2105      	movs	r1, #5
 8004dc8:	f7fb fe90 	bl	8000aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI1_NCS_Pin|PWMA_Pin|PWMB_Pin, GPIO_PIN_SET);
 8004dcc:	4897      	ldr	r0, [pc, #604]	; (800502c <main+0x2d8>)
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f240 3102 	movw	r1, #770	; 0x302
 8004dd4:	f7fb fe8a 	bl	8000aec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND0_Pin|FND1_Pin|FND2_Pin|BIN1_Pin
 8004dd8:	4895      	ldr	r0, [pc, #596]	; (8005030 <main+0x2dc>)
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f24f 41ff 	movw	r1, #62719	; 0xf4ff
 8004de0:	f7fb fe84 	bl	8000aec <HAL_GPIO_WritePin>
// SPI2_NSS/SPI2_MOSI/SPI2_MISO/SPI2_SCK
		  	  	  	  	  |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|FND3_Pin|FND4_Pin|FND5_Pin
                          |FND6_Pin|FND7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, FND_SEL0_Pin|FND_SEL1_Pin|LCD_E_Pin|AIN1_Pin
 8004de4:	2200      	movs	r2, #0
 8004de6:	4891      	ldr	r0, [pc, #580]	; (800502c <main+0x2d8>)
 8004de8:	f44f 413c 	mov.w	r1, #48128	; 0xbc00
  GPIO_InitStruct.Pin = AIN2_Pin|LED4_Pin|LED5_Pin|LED6_Pin
                          |LED7_Pin|FND_SEL2_Pin|LCD_D4_Pin|LCD_D5_Pin
                          |LCD_D6_Pin|LCD_D7_Pin|LCD_RS_Pin|BIN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004dec:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(GPIOA, FND_SEL0_Pin|FND_SEL1_Pin|LCD_E_Pin|AIN1_Pin
 8004dee:	f7fb fe7d 	bl	8000aec <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004df2:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004df6:	2502      	movs	r5, #2
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004df8:	f243 33ff 	movw	r3, #13311	; 0x33ff
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004dfc:	4889      	ldr	r0, [pc, #548]	; (8005024 <main+0x2d0>)
 8004dfe:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e00:	e9cd 3806 	strd	r3, r8, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e04:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004e08:	f7fb fd98 	bl	800093c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_NCS_Pin PWMA_Pin PWMB_Pin FND_SEL0_Pin
                           FND_SEL1_Pin LCD_E_Pin AIN1_Pin BUZZER_Pin */
  GPIO_InitStruct.Pin = SPI1_NCS_Pin|PWMA_Pin|PWMB_Pin|FND_SEL0_Pin
 8004e0c:	f64b 7302 	movw	r3, #48898	; 0xbf02
                          |FND_SEL1_Pin|LCD_E_Pin|AIN1_Pin|BUZZER_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e10:	4886      	ldr	r0, [pc, #536]	; (800502c <main+0x2d8>)
 8004e12:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e14:	e9cd 3806 	strd	r3, r8, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e18:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e1c:	f7fb fd8e 	bl	800093c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW2_Pin */
  GPIO_InitStruct.Pin = SW2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8004e20:	4882      	ldr	r0, [pc, #520]	; (800502c <main+0x2d8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e22:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8004e24:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e26:	e9cd 7406 	strd	r7, r4, [sp, #24]
  HAL_GPIO_Init(SW2_GPIO_Port, &GPIO_InitStruct);
 8004e2a:	f7fb fd87 	bl	800093c <HAL_GPIO_Init>

  /*Configure GPIO pins : FND0_Pin FND1_Pin FND2_Pin BIN1_Pin
                           SPI2_NSS_Pin FND3_Pin FND4_Pin FND5_Pin
                           FND6_Pin FND7_Pin */
  GPIO_InitStruct.Pin = FND0_Pin|FND1_Pin|FND2_Pin|BIN1_Pin
 8004e2e:	f24f 43ff 	movw	r3, #62719	; 0xf4ff
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|FND3_Pin|FND4_Pin|FND5_Pin
                          |FND6_Pin|FND7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e32:	487f      	ldr	r0, [pc, #508]	; (8005030 <main+0x2dc>)
 8004e34:	a906      	add	r1, sp, #24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004e36:	e9cd 3806 	strd	r3, r8, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004e3a:	e9cd 4508 	strd	r4, r5, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e3e:	f7fb fd7d 	bl	800093c <HAL_GPIO_Init>

  /*Configure GPIO pin : SW1_Pin */
  GPIO_InitStruct.Pin = SW1_Pin;
 8004e42:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8004e44:	a906      	add	r1, sp, #24
 8004e46:	487b      	ldr	r0, [pc, #492]	; (8005034 <main+0x2e0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e48:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004e4a:	e9cd 3406 	strd	r3, r4, [sp, #24]
  HAL_GPIO_Init(SW1_GPIO_Port, &GPIO_InitStruct);
 8004e4e:	f7fb fd75 	bl	800093c <HAL_GPIO_Init>
  huart2.Init.BaudRate = 115200;
 8004e52:	4a79      	ldr	r2, [pc, #484]	; (8005038 <main+0x2e4>)
  htim1.Instance = TIM1;
 8004e54:	4d79      	ldr	r5, [pc, #484]	; (800503c <main+0x2e8>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8004e56:	6134      	str	r4, [r6, #16]
  huart2.Init.BaudRate = 115200;
 8004e58:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004e5c:	f04f 090c 	mov.w	r9, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e60:	4630      	mov	r0, r6
  huart2.Init.BaudRate = 115200;
 8004e62:	e9c6 2300 	strd	r2, r3, [r6]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004e66:	e9c6 4402 	strd	r4, r4, [r6, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004e6a:	e9c6 9405 	strd	r9, r4, [r6, #20]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004e6e:	61f4      	str	r4, [r6, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004e70:	f7fd fa96 	bl	80023a0 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e74:	463a      	mov	r2, r7
 8004e76:	4621      	mov	r1, r4
 8004e78:	a806      	add	r0, sp, #24
 8004e7a:	f000 fd94 	bl	80059a6 <memset>
  htim1.Instance = TIM1;
 8004e7e:	4b70      	ldr	r3, [pc, #448]	; (8005040 <main+0x2ec>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004e80:	60ac      	str	r4, [r5, #8]
  htim1.Init.Period = 0xffff;
 8004e82:	f64f 7bff 	movw	fp, #65535	; 0xffff
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004e86:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 0;
 8004e88:	e9c5 3400 	strd	r3, r4, [r5]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004e8c:	e9c5 b403 	strd	fp, r4, [r5, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004e90:	e9c5 4405 	strd	r4, r4, [r5, #20]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e94:	e9cd 4404 	strd	r4, r4, [sp, #16]
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004e98:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8004e9c:	f7fd f910 	bl	80020c0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004ea0:	a906      	add	r1, sp, #24
 8004ea2:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ea4:	f8cd a018 	str.w	sl, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8004ea8:	f7fd f940 	bl	800212c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004eac:	eb0d 0107 	add.w	r1, sp, r7
 8004eb0:	4628      	mov	r0, r5
  htim2.Instance = TIM2;
 8004eb2:	4d64      	ldr	r5, [pc, #400]	; (8005044 <main+0x2f0>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004eb4:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8004eb8:	f7fd f9cc 	bl	8002254 <HAL_TIMEx_MasterConfigSynchronization>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004ebc:	463a      	mov	r2, r7
 8004ebe:	4621      	mov	r1, r4
 8004ec0:	a806      	add	r0, sp, #24
 8004ec2:	f000 fd70 	bl	80059a6 <memset>
  htim2.Instance = TIM2;
 8004ec6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004eca:	4628      	mov	r0, r5
  htim2.Init.Prescaler = 0;
 8004ecc:	e9c5 3400 	strd	r3, r4, [r5]
  htim2.Init.Period = 0xffff;
 8004ed0:	e9c5 4b02 	strd	r4, fp, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004ed4:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004ed6:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ed8:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004edc:	f7fd f8f0 	bl	80020c0 <HAL_TIM_Base_Init>
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004ee0:	a906      	add	r1, sp, #24
 8004ee2:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ee4:	f8cd a018 	str.w	sl, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004ee8:	f7fd f920 	bl	800212c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004eec:	eb0d 0107 	add.w	r1, sp, r7
 8004ef0:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8004ef2:	4d55      	ldr	r5, [pc, #340]	; (8005048 <main+0x2f4>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004ef4:	e9cd 4404 	strd	r4, r4, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004ef8:	f7fd f9ac 	bl	8002254 <HAL_TIMEx_MasterConfigSynchronization>
  hadc1.Instance = ADC1;
 8004efc:	4b53      	ldr	r3, [pc, #332]	; (800504c <main+0x2f8>)
 8004efe:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004f00:	4628      	mov	r0, r5
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f02:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
 8004f06:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004f08:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004f0a:	f885 800c 	strb.w	r8, [r5, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004f0e:	752c      	strb	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f10:	606c      	str	r4, [r5, #4]
  hadc1.Init.NbrOfConversion = 1;
 8004f12:	f8c5 8010 	str.w	r8, [r5, #16]
  ADC_ChannelConfTypeDef sConfig = {0};
 8004f16:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8004f1a:	9408      	str	r4, [sp, #32]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004f1c:	f7fb fbc6 	bl	80006ac <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f20:	a906      	add	r1, sp, #24
 8004f22:	4628      	mov	r0, r5
  huart3.Instance = USART3;
 8004f24:	4d4a      	ldr	r5, [pc, #296]	; (8005050 <main+0x2fc>)
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004f26:	9408      	str	r4, [sp, #32]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004f28:	e9cd 4806 	strd	r4, r8, [sp, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8004f2c:	f7fb fa7c 	bl	8000428 <HAL_ADC_ConfigChannel>
  huart3.Init.BaudRate = 9600;
 8004f30:	4948      	ldr	r1, [pc, #288]	; (8005054 <main+0x300>)
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8004f32:	f8df 8148 	ldr.w	r8, [pc, #328]	; 800507c <main+0x328>
  huart3.Init.BaudRate = 9600;
 8004f36:	f44f 5316 	mov.w	r3, #9600	; 0x2580
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004f3a:	4628      	mov	r0, r5
  huart3.Init.BaudRate = 9600;
 8004f3c:	e9c5 1300 	strd	r1, r3, [r5]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004f40:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004f44:	e9c5 4904 	strd	r4, r9, [r5, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004f48:	e9c5 4406 	strd	r4, r4, [r5, #24]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004f4c:	f7fd fa28 	bl	80023a0 <HAL_UART_Init>
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f50:	f8df c12c 	ldr.w	ip, [pc, #300]	; 8005080 <main+0x32c>
  hspi1.Instance = SPI1;
 8004f54:	4840      	ldr	r0, [pc, #256]	; (8005058 <main+0x304>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004f56:	f44f 7382 	mov.w	r3, #260	; 0x104
 8004f5a:	e9c0 c300 	strd	ip, r3, [r0]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004f5e:	f44f 7300 	mov.w	r3, #512	; 0x200
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004f62:	e9c0 3706 	strd	r3, r7, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 8004f66:	230a      	movs	r3, #10
 8004f68:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004f6a:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004f6e:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004f72:	e9c0 4408 	strd	r4, r4, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f76:	6284      	str	r4, [r0, #40]	; 0x28
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004f78:	f7fc fe76 	bl	8001c68 <HAL_SPI_Init>
  MX_FATFS_Init();
 8004f7c:	f7ff fe9e 	bl	8004cbc <MX_FATFS_Init>
  hi2c1.Init.ClockSpeed = 100000;
 8004f80:	f8df e100 	ldr.w	lr, [pc, #256]	; 8005084 <main+0x330>
  hi2c1.Instance = I2C1;
 8004f84:	4835      	ldr	r0, [pc, #212]	; (800505c <main+0x308>)
  hi2c1.Init.ClockSpeed = 100000;
 8004f86:	4b36      	ldr	r3, [pc, #216]	; (8005060 <main+0x30c>)
  hrtc.Instance = RTC;
 8004f88:	4f36      	ldr	r7, [pc, #216]	; (8005064 <main+0x310>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f8a:	6204      	str	r4, [r0, #32]
  hi2c1.Init.ClockSpeed = 100000;
 8004f8c:	e9c0 e300 	strd	lr, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f90:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004f94:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8004f98:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f9c:	e9c0 4406 	strd	r4, r4, [r0, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004fa0:	f7fb fe46 	bl	8000c30 <HAL_I2C_Init>
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8004fa4:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa8:	e9c7 8300 	strd	r8, r3, [r7]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004fac:	4638      	mov	r0, r7
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8004fae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004fb2:	60bb      	str	r3, [r7, #8]
  RTC_TimeTypeDef sTime = {0};
 8004fb4:	f8ad 4010 	strh.w	r4, [sp, #16]
 8004fb8:	f88d 4012 	strb.w	r4, [sp, #18]
  RTC_DateTypeDef DateToUpdate = {0};
 8004fbc:	9406      	str	r4, [sp, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004fbe:	f7fc fd81 	bl	8001ac4 <HAL_RTC_Init>
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004fc2:	4622      	mov	r2, r4
 8004fc4:	a904      	add	r1, sp, #16
 8004fc6:	4638      	mov	r0, r7
  sTime.Hours = 0;
 8004fc8:	f8ad 4010 	strh.w	r4, [sp, #16]
  sTime.Seconds = 0;
 8004fcc:	f88d 4012 	strb.w	r4, [sp, #18]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8004fd0:	f7fc fcac 	bl	800192c <HAL_RTC_SetTime>
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004fd4:	4b24      	ldr	r3, [pc, #144]	; (8005068 <main+0x314>)
 8004fd6:	9306      	str	r3, [sp, #24]
  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8004fd8:	4622      	mov	r2, r4
 8004fda:	a906      	add	r1, sp, #24
 8004fdc:	4638      	mov	r0, r7
 8004fde:	f7fc fcfb 	bl	80019d8 <HAL_RTC_SetDate>
  uart_rx_ready_IT(&huart2,rxBuff2);
 8004fe2:	4922      	ldr	r1, [pc, #136]	; (800506c <main+0x318>)
          if(is_available(&stdin_uart))
 8004fe4:	4c22      	ldr	r4, [pc, #136]	; (8005070 <main+0x31c>)
  uart_rx_ready_IT(&huart2,rxBuff2);
 8004fe6:	4630      	mov	r0, r6
 8004fe8:	f7ff fe12 	bl	8004c10 <uart_rx_ready_IT>
  uart_rx_ready_IT(&huart3,rxBuff3);
 8004fec:	4628      	mov	r0, r5
 8004fee:	4921      	ldr	r1, [pc, #132]	; (8005074 <main+0x320>)
          if(!(SW2_GPIO_Port->IDR & SW2_Pin)) run_all(1, 0);
 8004ff0:	4d0e      	ldr	r5, [pc, #56]	; (800502c <main+0x2d8>)
  uart_rx_ready_IT(&huart3,rxBuff3);
 8004ff2:	f7ff fe0d 	bl	8004c10 <uart_rx_ready_IT>
  printf("\nHi~ JKIT-Nucleo-64 Board Test\n");
 8004ff6:	4820      	ldr	r0, [pc, #128]	; (8005078 <main+0x324>)
 8004ff8:	f000 fe0c 	bl	8005c14 <puts>
          if(is_available(&stdin_uart))
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	f7ff fe01 	bl	8004c04 <is_available>
 8005002:	b128      	cbz	r0, 8005010 <main+0x2bc>
                  ch = delete_uart_Q(&stdin_uart);
 8005004:	4620      	mov	r0, r4
 8005006:	f7ff fdef 	bl	8004be8 <delete_uart_Q>
                  do_cmd(ch);
 800500a:	b2c0      	uxtb	r0, r0
 800500c:	f7fe fd6c 	bl	8003ae8 <do_cmd>
          if(!(SW2_GPIO_Port->IDR & SW2_Pin)) run_all(1, 0);
 8005010:	68a9      	ldr	r1, [r5, #8]
 8005012:	f011 0110 	ands.w	r1, r1, #16
 8005016:	d1f1      	bne.n	8004ffc <main+0x2a8>
 8005018:	2001      	movs	r0, #1
 800501a:	f7ff fae5 	bl	80045e8 <run_all>
 800501e:	e7ed      	b.n	8004ffc <main+0x2a8>
 8005020:	40021000 	.word	0x40021000
 8005024:	40011000 	.word	0x40011000
 8005028:	200044e4 	.word	0x200044e4
 800502c:	40010800 	.word	0x40010800
 8005030:	40010c00 	.word	0x40010c00
 8005034:	40011400 	.word	0x40011400
 8005038:	40004400 	.word	0x40004400
 800503c:	200043fc 	.word	0x200043fc
 8005040:	40012c00 	.word	0x40012c00
 8005044:	2000449c 	.word	0x2000449c
 8005048:	200043b4 	.word	0x200043b4
 800504c:	40012400 	.word	0x40012400
 8005050:	2000431c 	.word	0x2000431c
 8005054:	40004800 	.word	0x40004800
 8005058:	20004444 	.word	0x20004444
 800505c:	20004360 	.word	0x20004360
 8005060:	000186a0 	.word	0x000186a0
 8005064:	200043e8 	.word	0x200043e8
 8005068:	00010101 	.word	0x00010101
 800506c:	200043e6 	.word	0x200043e6
 8005070:	20002244 	.word	0x20002244
 8005074:	200043e4 	.word	0x200043e4
 8005078:	08006eec 	.word	0x08006eec
 800507c:	40002800 	.word	0x40002800
 8005080:	40013000 	.word	0x40013000
 8005084:	40005400 	.word	0x40005400

08005088 <MX_SPI2_Init>:
  hspi2.Instance = SPI2;
 8005088:	480b      	ldr	r0, [pc, #44]	; (80050b8 <MX_SPI2_Init+0x30>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800508a:	4a0c      	ldr	r2, [pc, #48]	; (80050bc <MX_SPI2_Init+0x34>)
 800508c:	f44f 7382 	mov.w	r3, #260	; 0x104
 8005090:	e9c0 2300 	strd	r2, r3, [r0]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8005094:	2300      	movs	r3, #0
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8005096:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800509a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800509e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80050a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050a6:	2208      	movs	r2, #8
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80050a8:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80050aa:	230a      	movs	r3, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80050ac:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi2.Init.CRCPolynomial = 10;
 80050b0:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80050b2:	f7fc bdd9 	b.w	8001c68 <HAL_SPI_Init>
 80050b6:	bf00      	nop
 80050b8:	200042c4 	.word	0x200042c4
 80050bc:	40003800 	.word	0x40003800

080050c0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80050c0:	4b0e      	ldr	r3, [pc, #56]	; (80050fc <HAL_MspInit+0x3c>)
 80050c2:	699a      	ldr	r2, [r3, #24]
 80050c4:	f042 0201 	orr.w	r2, r2, #1
 80050c8:	619a      	str	r2, [r3, #24]
 80050ca:	699a      	ldr	r2, [r3, #24]
{
 80050cc:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 80050ce:	f002 0201 	and.w	r2, r2, #1
 80050d2:	9200      	str	r2, [sp, #0]
 80050d4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80050d6:	69da      	ldr	r2, [r3, #28]
 80050d8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80050dc:	61da      	str	r2, [r3, #28]
 80050de:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80050e0:	4a07      	ldr	r2, [pc, #28]	; (8005100 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80050e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e6:	9301      	str	r3, [sp, #4]
 80050e8:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80050ea:	6853      	ldr	r3, [r2, #4]
 80050ec:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80050f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050f6:	b002      	add	sp, #8
 80050f8:	4770      	bx	lr
 80050fa:	bf00      	nop
 80050fc:	40021000 	.word	0x40021000
 8005100:	40010000 	.word	0x40010000

08005104 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8005104:	b510      	push	{r4, lr}
 8005106:	4604      	mov	r4, r0
 8005108:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800510a:	2210      	movs	r2, #16
 800510c:	2100      	movs	r1, #0
 800510e:	a802      	add	r0, sp, #8
 8005110:	f000 fc49 	bl	80059a6 <memset>
  if(hadc->Instance==ADC1)
 8005114:	6822      	ldr	r2, [r4, #0]
 8005116:	4b10      	ldr	r3, [pc, #64]	; (8005158 <HAL_ADC_MspInit+0x54>)
 8005118:	429a      	cmp	r2, r3
 800511a:	d11b      	bne.n	8005154 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800511c:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005120:	480e      	ldr	r0, [pc, #56]	; (800515c <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005122:	699a      	ldr	r2, [r3, #24]
 8005124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005128:	619a      	str	r2, [r3, #24]
 800512a:	699a      	ldr	r2, [r3, #24]
 800512c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8005130:	9200      	str	r2, [sp, #0]
 8005132:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005134:	699a      	ldr	r2, [r3, #24]
 8005136:	f042 0204 	orr.w	r2, r2, #4
 800513a:	619a      	str	r2, [r3, #24]
 800513c:	699b      	ldr	r3, [r3, #24]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	9301      	str	r3, [sp, #4]
 8005144:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005146:	2201      	movs	r2, #1
 8005148:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800514a:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800514c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005150:	f7fb fbf4 	bl	800093c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8005154:	b006      	add	sp, #24
 8005156:	bd10      	pop	{r4, pc}
 8005158:	40012400 	.word	0x40012400
 800515c:	40010800 	.word	0x40010800

08005160 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005160:	b510      	push	{r4, lr}
 8005162:	4604      	mov	r4, r0
 8005164:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005166:	2210      	movs	r2, #16
 8005168:	2100      	movs	r1, #0
 800516a:	a802      	add	r0, sp, #8
 800516c:	f000 fc1b 	bl	80059a6 <memset>
  if(hi2c->Instance==I2C1)
 8005170:	6822      	ldr	r2, [r4, #0]
 8005172:	4b15      	ldr	r3, [pc, #84]	; (80051c8 <HAL_I2C_MspInit+0x68>)
 8005174:	429a      	cmp	r2, r3
 8005176:	d124      	bne.n	80051c2 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005178:	4c14      	ldr	r4, [pc, #80]	; (80051cc <HAL_I2C_MspInit+0x6c>)
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800517a:	4815      	ldr	r0, [pc, #84]	; (80051d0 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800517c:	69a3      	ldr	r3, [r4, #24]
 800517e:	f043 0308 	orr.w	r3, r3, #8
 8005182:	61a3      	str	r3, [r4, #24]
 8005184:	69a3      	ldr	r3, [r4, #24]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800518c:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005190:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005192:	2312      	movs	r3, #18
 8005194:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005198:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800519a:	2303      	movs	r3, #3
 800519c:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800519e:	f7fb fbcd 	bl	800093c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80051a2:	4a0c      	ldr	r2, [pc, #48]	; (80051d4 <HAL_I2C_MspInit+0x74>)
 80051a4:	6853      	ldr	r3, [r2, #4]
 80051a6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80051aa:	f043 0302 	orr.w	r3, r3, #2
 80051ae:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80051b0:	69e3      	ldr	r3, [r4, #28]
 80051b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051b6:	61e3      	str	r3, [r4, #28]
 80051b8:	69e3      	ldr	r3, [r4, #28]
 80051ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80051be:	9301      	str	r3, [sp, #4]
 80051c0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80051c2:	b006      	add	sp, #24
 80051c4:	bd10      	pop	{r4, pc}
 80051c6:	bf00      	nop
 80051c8:	40005400 	.word	0x40005400
 80051cc:	40021000 	.word	0x40021000
 80051d0:	40010c00 	.word	0x40010c00
 80051d4:	40010000 	.word	0x40010000

080051d8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80051d8:	b507      	push	{r0, r1, r2, lr}
  if(hrtc->Instance==RTC)
 80051da:	4b10      	ldr	r3, [pc, #64]	; (800521c <HAL_RTC_MspInit+0x44>)
 80051dc:	6802      	ldr	r2, [r0, #0]
 80051de:	429a      	cmp	r2, r3
 80051e0:	d119      	bne.n	8005216 <HAL_RTC_MspInit+0x3e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 80051e2:	f7fb ff71 	bl	80010c8 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 80051e6:	4b0e      	ldr	r3, [pc, #56]	; (8005220 <HAL_RTC_MspInit+0x48>)
 80051e8:	69da      	ldr	r2, [r3, #28]
 80051ea:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
 80051ee:	61da      	str	r2, [r3, #28]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051f6:	9301      	str	r3, [sp, #4]
 80051f8:	9b01      	ldr	r3, [sp, #4]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80051fa:	4b0a      	ldr	r3, [pc, #40]	; (8005224 <HAL_RTC_MspInit+0x4c>)
 80051fc:	2201      	movs	r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 0, 0);
 8005200:	2200      	movs	r2, #0
 8005202:	4611      	mov	r1, r2
 8005204:	2003      	movs	r0, #3
 8005206:	f7fb fadf 	bl	80007c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 800520a:	2003      	movs	r0, #3
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800520c:	b003      	add	sp, #12
 800520e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8005212:	f7fb bb0b 	b.w	800082c <HAL_NVIC_EnableIRQ>
}
 8005216:	b003      	add	sp, #12
 8005218:	f85d fb04 	ldr.w	pc, [sp], #4
 800521c:	40002800 	.word	0x40002800
 8005220:	40021000 	.word	0x40021000
 8005224:	4242043c 	.word	0x4242043c

08005228 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005228:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800522a:	2210      	movs	r2, #16
{
 800522c:	b088      	sub	sp, #32
 800522e:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005230:	2100      	movs	r1, #0
 8005232:	eb0d 0002 	add.w	r0, sp, r2
 8005236:	f000 fbb6 	bl	80059a6 <memset>
  if(hspi->Instance==SPI1)
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	4a2a      	ldr	r2, [pc, #168]	; (80052e8 <HAL_SPI_MspInit+0xc0>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d127      	bne.n	8005292 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8005242:	4b2a      	ldr	r3, [pc, #168]	; (80052ec <HAL_SPI_MspInit+0xc4>)
 8005244:	699a      	ldr	r2, [r3, #24]
 8005246:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800524a:	619a      	str	r2, [r3, #24]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005252:	9200      	str	r2, [sp, #0]
 8005254:	9a00      	ldr	r2, [sp, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005256:	699a      	ldr	r2, [r3, #24]
 8005258:	f042 0204 	orr.w	r2, r2, #4
 800525c:	619a      	str	r2, [r3, #24]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	f003 0304 	and.w	r3, r3, #4
 8005264:	9301      	str	r3, [sp, #4]
 8005266:	9b01      	ldr	r3, [sp, #4]
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005268:	20a0      	movs	r0, #160	; 0xa0
 800526a:	2302      	movs	r3, #2
 800526c:	e9cd 0304 	strd	r0, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005270:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005272:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005274:	481e      	ldr	r0, [pc, #120]	; (80052f0 <HAL_SPI_MspInit+0xc8>)
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005276:	9307      	str	r3, [sp, #28]

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005278:	2440      	movs	r4, #64	; 0x40
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800527a:	f7fb fb5f 	bl	800093c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800527e:	2300      	movs	r3, #0
 8005280:	e9cd 4304 	strd	r4, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005284:	481a      	ldr	r0, [pc, #104]	; (80052f0 <HAL_SPI_MspInit+0xc8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005286:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005288:	a904      	add	r1, sp, #16
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    GPIO_InitStruct.Pin = GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800528a:	f7fb fb57 	bl	800093c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800528e:	b008      	add	sp, #32
 8005290:	bd10      	pop	{r4, pc}
  else if(hspi->Instance==SPI2)
 8005292:	4a18      	ldr	r2, [pc, #96]	; (80052f4 <HAL_SPI_MspInit+0xcc>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d1fa      	bne.n	800528e <HAL_SPI_MspInit+0x66>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005298:	4b14      	ldr	r3, [pc, #80]	; (80052ec <HAL_SPI_MspInit+0xc4>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800529a:	4817      	ldr	r0, [pc, #92]	; (80052f8 <HAL_SPI_MspInit+0xd0>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800529c:	69da      	ldr	r2, [r3, #28]
 800529e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052a2:	61da      	str	r2, [r3, #28]
 80052a4:	69da      	ldr	r2, [r3, #28]
 80052a6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80052aa:	9202      	str	r2, [sp, #8]
 80052ac:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052ae:	699a      	ldr	r2, [r3, #24]
 80052b0:	f042 0208 	orr.w	r2, r2, #8
 80052b4:	619a      	str	r2, [r3, #24]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	9303      	str	r3, [sp, #12]
 80052be:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c0:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 80052c4:	2302      	movs	r3, #2
 80052c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052ca:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80052cc:	2303      	movs	r3, #3
 80052ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052d0:	f7fb fb34 	bl	800093c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80052d8:	2300      	movs	r3, #0
 80052da:	e9cd 1304 	strd	r1, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052de:	4806      	ldr	r0, [pc, #24]	; (80052f8 <HAL_SPI_MspInit+0xd0>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052e2:	a904      	add	r1, sp, #16
 80052e4:	e7d1      	b.n	800528a <HAL_SPI_MspInit+0x62>
 80052e6:	bf00      	nop
 80052e8:	40013000 	.word	0x40013000
 80052ec:	40021000 	.word	0x40021000
 80052f0:	40010800 	.word	0x40010800
 80052f4:	40003800 	.word	0x40003800
 80052f8:	40010c00 	.word	0x40010c00

080052fc <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80052fc:	6803      	ldr	r3, [r0, #0]
 80052fe:	4a0f      	ldr	r2, [pc, #60]	; (800533c <HAL_TIM_Base_MspInit+0x40>)
 8005300:	4293      	cmp	r3, r2
{
 8005302:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 8005304:	d10b      	bne.n	800531e <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005306:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <HAL_TIM_Base_MspInit+0x44>)
 8005308:	699a      	ldr	r2, [r3, #24]
 800530a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800530e:	619a      	str	r2, [r3, #24]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005316:	9300      	str	r3, [sp, #0]
 8005318:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800531a:	b002      	add	sp, #8
 800531c:	4770      	bx	lr
  else if(htim_base->Instance==TIM2)
 800531e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005322:	d1fa      	bne.n	800531a <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005324:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8005328:	69da      	ldr	r2, [r3, #28]
 800532a:	f042 0201 	orr.w	r2, r2, #1
 800532e:	61da      	str	r2, [r3, #28]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	f003 0301 	and.w	r3, r3, #1
 8005336:	9301      	str	r3, [sp, #4]
 8005338:	9b01      	ldr	r3, [sp, #4]
}
 800533a:	e7ee      	b.n	800531a <HAL_TIM_Base_MspInit+0x1e>
 800533c:	40012c00 	.word	0x40012c00
 8005340:	40021000 	.word	0x40021000

08005344 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005344:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005346:	2210      	movs	r2, #16
{
 8005348:	b088      	sub	sp, #32
 800534a:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800534c:	2100      	movs	r1, #0
 800534e:	eb0d 0002 	add.w	r0, sp, r2
 8005352:	f000 fb28 	bl	80059a6 <memset>
  if(huart->Instance==USART2)
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	4a36      	ldr	r2, [pc, #216]	; (8005434 <HAL_UART_MspInit+0xf0>)
 800535a:	4293      	cmp	r3, r2
 800535c:	d12f      	bne.n	80053be <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800535e:	4b36      	ldr	r3, [pc, #216]	; (8005438 <HAL_UART_MspInit+0xf4>)
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005360:	4836      	ldr	r0, [pc, #216]	; (800543c <HAL_UART_MspInit+0xf8>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8005362:	69da      	ldr	r2, [r3, #28]
 8005364:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8005368:	61da      	str	r2, [r3, #28]
 800536a:	69da      	ldr	r2, [r3, #28]
 800536c:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8005370:	9200      	str	r2, [sp, #0]
 8005372:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005374:	699a      	ldr	r2, [r3, #24]
 8005376:	f042 0204 	orr.w	r2, r2, #4
 800537a:	619a      	str	r2, [r3, #24]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	f003 0304 	and.w	r3, r3, #4
 8005382:	9301      	str	r3, [sp, #4]
 8005384:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005386:	2104      	movs	r1, #4
 8005388:	2302      	movs	r3, #2
 800538a:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800538e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005390:	a904      	add	r1, sp, #16

    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005392:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8005394:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005396:	f7fb fad1 	bl	800093c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800539a:	2308      	movs	r3, #8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800539c:	4827      	ldr	r0, [pc, #156]	; (800543c <HAL_UART_MspInit+0xf8>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a0:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053a2:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a6:	f7fb fac9 	bl	800093c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80053aa:	2026      	movs	r0, #38	; 0x26
 80053ac:	4622      	mov	r2, r4
 80053ae:	4621      	mov	r1, r4
 80053b0:	f7fb fa0a 	bl	80007c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80053b4:	2026      	movs	r0, #38	; 0x26

    __HAL_AFIO_REMAP_USART3_PARTIAL();

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80053b6:	f7fb fa39 	bl	800082c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80053ba:	b008      	add	sp, #32
 80053bc:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART3)
 80053be:	4a20      	ldr	r2, [pc, #128]	; (8005440 <HAL_UART_MspInit+0xfc>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d1fa      	bne.n	80053ba <HAL_UART_MspInit+0x76>
    __HAL_RCC_USART3_CLK_ENABLE();
 80053c4:	4b1c      	ldr	r3, [pc, #112]	; (8005438 <HAL_UART_MspInit+0xf4>)
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053c6:	481f      	ldr	r0, [pc, #124]	; (8005444 <HAL_UART_MspInit+0x100>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80053c8:	69da      	ldr	r2, [r3, #28]
 80053ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80053ce:	61da      	str	r2, [r3, #28]
 80053d0:	69da      	ldr	r2, [r3, #28]
 80053d2:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80053d6:	9202      	str	r2, [sp, #8]
 80053d8:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053da:	699a      	ldr	r2, [r3, #24]
 80053dc:	f042 0210 	orr.w	r2, r2, #16
 80053e0:	619a      	str	r2, [r3, #24]
 80053e2:	699b      	ldr	r3, [r3, #24]
 80053e4:	f003 0310 	and.w	r3, r3, #16
 80053e8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80053ee:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053f0:	2302      	movs	r3, #2
 80053f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053f6:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053f8:	2303      	movs	r3, #3
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80053fa:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80053fc:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80053fe:	f7fb fa9d 	bl	800093c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005402:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005406:	480f      	ldr	r0, [pc, #60]	; (8005444 <HAL_UART_MspInit+0x100>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005408:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800540a:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800540c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005410:	f7fb fa94 	bl	800093c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_USART3_PARTIAL();
 8005414:	4a0c      	ldr	r2, [pc, #48]	; (8005448 <HAL_UART_MspInit+0x104>)
 8005416:	6853      	ldr	r3, [r2, #4]
 8005418:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800541c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8005420:	f043 0310 	orr.w	r3, r3, #16
 8005424:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005426:	2027      	movs	r0, #39	; 0x27
 8005428:	4622      	mov	r2, r4
 800542a:	4621      	mov	r1, r4
 800542c:	f7fb f9cc 	bl	80007c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005430:	2027      	movs	r0, #39	; 0x27
 8005432:	e7c0      	b.n	80053b6 <HAL_UART_MspInit+0x72>
 8005434:	40004400 	.word	0x40004400
 8005438:	40021000 	.word	0x40021000
 800543c:	40010800 	.word	0x40010800
 8005440:	40004800 	.word	0x40004800
 8005444:	40011000 	.word	0x40011000
 8005448:	40010000 	.word	0x40010000

0800544c <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800544c:	4770      	bx	lr

0800544e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800544e:	e7fe      	b.n	800544e <HardFault_Handler>

08005450 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005450:	e7fe      	b.n	8005450 <MemManage_Handler>

08005452 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005452:	e7fe      	b.n	8005452 <BusFault_Handler>

08005454 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005454:	e7fe      	b.n	8005454 <UsageFault_Handler>

08005456 <SVC_Handler>:
 8005456:	4770      	bx	lr

08005458 <DebugMon_Handler>:
 8005458:	4770      	bx	lr

0800545a <PendSV_Handler>:
 800545a:	4770      	bx	lr

0800545c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800545c:	f7fa bf0e 	b.w	800027c <HAL_IncTick>

08005460 <RTC_IRQHandler>:
void RTC_IRQHandler(void)
{
  /* USER CODE BEGIN RTC_IRQn 0 */

  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_RTCIRQHandler(&hrtc);
 8005460:	4801      	ldr	r0, [pc, #4]	; (8005468 <RTC_IRQHandler+0x8>)
 8005462:	f7fc bb7f 	b.w	8001b64 <HAL_RTCEx_RTCIRQHandler>
 8005466:	bf00      	nop
 8005468:	200043e8 	.word	0x200043e8

0800546c <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800546c:	4801      	ldr	r0, [pc, #4]	; (8005474 <USART2_IRQHandler+0x8>)
 800546e:	f7fd b877 	b.w	8002560 <HAL_UART_IRQHandler>
 8005472:	bf00      	nop
 8005474:	200044e4 	.word	0x200044e4

08005478 <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005478:	4801      	ldr	r0, [pc, #4]	; (8005480 <USART3_IRQHandler+0x8>)
 800547a:	f7fd b871 	b.w	8002560 <HAL_UART_IRQHandler>
 800547e:	bf00      	nop
 8005480:	2000431c 	.word	0x2000431c

08005484 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005484:	b570      	push	{r4, r5, r6, lr}
 8005486:	460e      	mov	r6, r1
 8005488:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800548a:	2500      	movs	r5, #0
 800548c:	42a5      	cmp	r5, r4
 800548e:	db01      	blt.n	8005494 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8005490:	4620      	mov	r0, r4
 8005492:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8005494:	f3af 8000 	nop.w
 8005498:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800549a:	3501      	adds	r5, #1
 800549c:	e7f6      	b.n	800548c <_read+0x8>
	...

080054a0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 80054a0:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80054a2:	4b0a      	ldr	r3, [pc, #40]	; (80054cc <_sbrk+0x2c>)
 80054a4:	6819      	ldr	r1, [r3, #0]
{
 80054a6:	4602      	mov	r2, r0
	if (heap_end == 0)
 80054a8:	b909      	cbnz	r1, 80054ae <_sbrk+0xe>
		heap_end = &end;
 80054aa:	4909      	ldr	r1, [pc, #36]	; (80054d0 <_sbrk+0x30>)
 80054ac:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80054ae:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80054b0:	4669      	mov	r1, sp
 80054b2:	4402      	add	r2, r0
 80054b4:	428a      	cmp	r2, r1
 80054b6:	d906      	bls.n	80054c6 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 80054b8:	f000 f87e 	bl	80055b8 <__errno>
 80054bc:	230c      	movs	r3, #12
 80054be:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 80054c0:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 80054c4:	bd08      	pop	{r3, pc}
	heap_end += incr;
 80054c6:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 80054c8:	e7fc      	b.n	80054c4 <_sbrk+0x24>
 80054ca:	bf00      	nop
 80054cc:	20000180 	.word	0x20000180
 80054d0:	20004538 	.word	0x20004538

080054d4 <_close>:

int _close(int file)
{
	return -1;
}
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295
 80054d8:	4770      	bx	lr

080054da <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 80054da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80054de:	604b      	str	r3, [r1, #4]
	return 0;
}
 80054e0:	2000      	movs	r0, #0
 80054e2:	4770      	bx	lr

080054e4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 80054e4:	2001      	movs	r0, #1
 80054e6:	4770      	bx	lr

080054e8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 80054e8:	2000      	movs	r0, #0
 80054ea:	4770      	bx	lr

080054ec <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80054ec:	4b0f      	ldr	r3, [pc, #60]	; (800552c <SystemInit+0x40>)
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	f042 0201 	orr.w	r2, r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80054f6:	6859      	ldr	r1, [r3, #4]
 80054f8:	4a0d      	ldr	r2, [pc, #52]	; (8005530 <SystemInit+0x44>)
 80054fa:	400a      	ands	r2, r1
 80054fc:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8005504:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005508:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005510:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8005518:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800551a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800551e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8005520:	4b04      	ldr	r3, [pc, #16]	; (8005534 <SystemInit+0x48>)
 8005522:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005526:	609a      	str	r2, [r3, #8]
#endif 
}
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	40021000 	.word	0x40021000
 8005530:	f8ff0000 	.word	0xf8ff0000
 8005534:	e000ed00 	.word	0xe000ed00

08005538 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005538:	b508      	push	{r3, lr}
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800553a:	f7fe fd23 	bl	8003f84 <SD_disk_initialize>
    Stat = STA_NOINIT;
    return Stat;
  /* USER CODE END INIT */
}
 800553e:	b2c0      	uxtb	r0, r0
 8005540:	bd08      	pop	{r3, pc}

08005542 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005542:	b508      	push	{r3, lr}
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8005544:	f7fe fdce 	bl	80040e4 <SD_disk_status>
    Stat = STA_NOINIT;
    return Stat;
  /* USER CODE END STATUS */
}
 8005548:	b2c0      	uxtb	r0, r0
 800554a:	bd08      	pop	{r3, pc}

0800554c <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800554c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800554e:	f7fe fdd3 	bl	80040f8 <SD_disk_read>
    return RES_OK;
  /* USER CODE END READ */
}
 8005552:	b2c0      	uxtb	r0, r0
 8005554:	bd08      	pop	{r3, pc}

08005556 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005556:	b508      	push	{r3, lr}
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8005558:	f7fe fe14 	bl	8004184 <SD_disk_write>
    return RES_OK;
  /* USER CODE END WRITE */
}
 800555c:	b2c0      	uxtb	r0, r0
 800555e:	bd08      	pop	{r3, pc}

08005560 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005560:	b508      	push	{r3, lr}
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8005562:	f7fe fe67 	bl	8004234 <SD_disk_ioctl>
    DRESULT res = RES_ERROR;
    return res;
  /* USER CODE END IOCTL */
}
 8005566:	b2c0      	uxtb	r0, r0
 8005568:	bd08      	pop	{r3, pc}
	...

0800556c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800556c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800556e:	e003      	b.n	8005578 <LoopCopyDataInit>

08005570 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8005570:	4b0b      	ldr	r3, [pc, #44]	; (80055a0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8005572:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8005574:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8005576:	3104      	adds	r1, #4

08005578 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8005578:	480a      	ldr	r0, [pc, #40]	; (80055a4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800557a:	4b0b      	ldr	r3, [pc, #44]	; (80055a8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800557c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800557e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8005580:	d3f6      	bcc.n	8005570 <CopyDataInit>
  ldr r2, =_sbss
 8005582:	4a0a      	ldr	r2, [pc, #40]	; (80055ac <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8005584:	e002      	b.n	800558c <LoopFillZerobss>

08005586 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8005586:	2300      	movs	r3, #0
  str r3, [r2], #4
 8005588:	f842 3b04 	str.w	r3, [r2], #4

0800558c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800558c:	4b08      	ldr	r3, [pc, #32]	; (80055b0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800558e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8005590:	d3f9      	bcc.n	8005586 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005592:	f7ff ffab 	bl	80054ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005596:	f000 f9df 	bl	8005958 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800559a:	f7ff fbdb 	bl	8004d54 <main>
  bx lr
 800559e:	4770      	bx	lr
  ldr r3, =_sidata
 80055a0:	08006fc4 	.word	0x08006fc4
  ldr r0, =_sdata
 80055a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80055a8:	200000a8 	.word	0x200000a8
  ldr r2, =_sbss
 80055ac:	200000a8 	.word	0x200000a8
  ldr r3, = _ebss
 80055b0:	20004538 	.word	0x20004538

080055b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80055b4:	e7fe      	b.n	80055b4 <ADC1_2_IRQHandler>
	...

080055b8 <__errno>:
 80055b8:	4b01      	ldr	r3, [pc, #4]	; (80055c0 <__errno+0x8>)
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000044 	.word	0x20000044

080055c4 <__sflush_r>:
 80055c4:	898a      	ldrh	r2, [r1, #12]
 80055c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ca:	4605      	mov	r5, r0
 80055cc:	0710      	lsls	r0, r2, #28
 80055ce:	460c      	mov	r4, r1
 80055d0:	d458      	bmi.n	8005684 <__sflush_r+0xc0>
 80055d2:	684b      	ldr	r3, [r1, #4]
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	dc05      	bgt.n	80055e4 <__sflush_r+0x20>
 80055d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055da:	2b00      	cmp	r3, #0
 80055dc:	dc02      	bgt.n	80055e4 <__sflush_r+0x20>
 80055de:	2000      	movs	r0, #0
 80055e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055e6:	2e00      	cmp	r6, #0
 80055e8:	d0f9      	beq.n	80055de <__sflush_r+0x1a>
 80055ea:	2300      	movs	r3, #0
 80055ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80055f0:	682f      	ldr	r7, [r5, #0]
 80055f2:	602b      	str	r3, [r5, #0]
 80055f4:	d032      	beq.n	800565c <__sflush_r+0x98>
 80055f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055f8:	89a3      	ldrh	r3, [r4, #12]
 80055fa:	075a      	lsls	r2, r3, #29
 80055fc:	d505      	bpl.n	800560a <__sflush_r+0x46>
 80055fe:	6863      	ldr	r3, [r4, #4]
 8005600:	1ac0      	subs	r0, r0, r3
 8005602:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005604:	b10b      	cbz	r3, 800560a <__sflush_r+0x46>
 8005606:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005608:	1ac0      	subs	r0, r0, r3
 800560a:	2300      	movs	r3, #0
 800560c:	4602      	mov	r2, r0
 800560e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005610:	6a21      	ldr	r1, [r4, #32]
 8005612:	4628      	mov	r0, r5
 8005614:	47b0      	blx	r6
 8005616:	1c43      	adds	r3, r0, #1
 8005618:	89a3      	ldrh	r3, [r4, #12]
 800561a:	d106      	bne.n	800562a <__sflush_r+0x66>
 800561c:	6829      	ldr	r1, [r5, #0]
 800561e:	291d      	cmp	r1, #29
 8005620:	d82c      	bhi.n	800567c <__sflush_r+0xb8>
 8005622:	4a2a      	ldr	r2, [pc, #168]	; (80056cc <__sflush_r+0x108>)
 8005624:	40ca      	lsrs	r2, r1
 8005626:	07d6      	lsls	r6, r2, #31
 8005628:	d528      	bpl.n	800567c <__sflush_r+0xb8>
 800562a:	2200      	movs	r2, #0
 800562c:	6062      	str	r2, [r4, #4]
 800562e:	04d9      	lsls	r1, r3, #19
 8005630:	6922      	ldr	r2, [r4, #16]
 8005632:	6022      	str	r2, [r4, #0]
 8005634:	d504      	bpl.n	8005640 <__sflush_r+0x7c>
 8005636:	1c42      	adds	r2, r0, #1
 8005638:	d101      	bne.n	800563e <__sflush_r+0x7a>
 800563a:	682b      	ldr	r3, [r5, #0]
 800563c:	b903      	cbnz	r3, 8005640 <__sflush_r+0x7c>
 800563e:	6560      	str	r0, [r4, #84]	; 0x54
 8005640:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005642:	602f      	str	r7, [r5, #0]
 8005644:	2900      	cmp	r1, #0
 8005646:	d0ca      	beq.n	80055de <__sflush_r+0x1a>
 8005648:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800564c:	4299      	cmp	r1, r3
 800564e:	d002      	beq.n	8005656 <__sflush_r+0x92>
 8005650:	4628      	mov	r0, r5
 8005652:	f000 f9b1 	bl	80059b8 <_free_r>
 8005656:	2000      	movs	r0, #0
 8005658:	6360      	str	r0, [r4, #52]	; 0x34
 800565a:	e7c1      	b.n	80055e0 <__sflush_r+0x1c>
 800565c:	6a21      	ldr	r1, [r4, #32]
 800565e:	2301      	movs	r3, #1
 8005660:	4628      	mov	r0, r5
 8005662:	47b0      	blx	r6
 8005664:	1c41      	adds	r1, r0, #1
 8005666:	d1c7      	bne.n	80055f8 <__sflush_r+0x34>
 8005668:	682b      	ldr	r3, [r5, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d0c4      	beq.n	80055f8 <__sflush_r+0x34>
 800566e:	2b1d      	cmp	r3, #29
 8005670:	d001      	beq.n	8005676 <__sflush_r+0xb2>
 8005672:	2b16      	cmp	r3, #22
 8005674:	d101      	bne.n	800567a <__sflush_r+0xb6>
 8005676:	602f      	str	r7, [r5, #0]
 8005678:	e7b1      	b.n	80055de <__sflush_r+0x1a>
 800567a:	89a3      	ldrh	r3, [r4, #12]
 800567c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005680:	81a3      	strh	r3, [r4, #12]
 8005682:	e7ad      	b.n	80055e0 <__sflush_r+0x1c>
 8005684:	690f      	ldr	r7, [r1, #16]
 8005686:	2f00      	cmp	r7, #0
 8005688:	d0a9      	beq.n	80055de <__sflush_r+0x1a>
 800568a:	0793      	lsls	r3, r2, #30
 800568c:	680e      	ldr	r6, [r1, #0]
 800568e:	bf08      	it	eq
 8005690:	694b      	ldreq	r3, [r1, #20]
 8005692:	600f      	str	r7, [r1, #0]
 8005694:	bf18      	it	ne
 8005696:	2300      	movne	r3, #0
 8005698:	eba6 0807 	sub.w	r8, r6, r7
 800569c:	608b      	str	r3, [r1, #8]
 800569e:	f1b8 0f00 	cmp.w	r8, #0
 80056a2:	dd9c      	ble.n	80055de <__sflush_r+0x1a>
 80056a4:	6a21      	ldr	r1, [r4, #32]
 80056a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056a8:	4643      	mov	r3, r8
 80056aa:	463a      	mov	r2, r7
 80056ac:	4628      	mov	r0, r5
 80056ae:	47b0      	blx	r6
 80056b0:	2800      	cmp	r0, #0
 80056b2:	dc06      	bgt.n	80056c2 <__sflush_r+0xfe>
 80056b4:	89a3      	ldrh	r3, [r4, #12]
 80056b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056ba:	81a3      	strh	r3, [r4, #12]
 80056bc:	f04f 30ff 	mov.w	r0, #4294967295
 80056c0:	e78e      	b.n	80055e0 <__sflush_r+0x1c>
 80056c2:	4407      	add	r7, r0
 80056c4:	eba8 0800 	sub.w	r8, r8, r0
 80056c8:	e7e9      	b.n	800569e <__sflush_r+0xda>
 80056ca:	bf00      	nop
 80056cc:	20400001 	.word	0x20400001

080056d0 <_fflush_r>:
 80056d0:	b538      	push	{r3, r4, r5, lr}
 80056d2:	690b      	ldr	r3, [r1, #16]
 80056d4:	4605      	mov	r5, r0
 80056d6:	460c      	mov	r4, r1
 80056d8:	b913      	cbnz	r3, 80056e0 <_fflush_r+0x10>
 80056da:	2500      	movs	r5, #0
 80056dc:	4628      	mov	r0, r5
 80056de:	bd38      	pop	{r3, r4, r5, pc}
 80056e0:	b118      	cbz	r0, 80056ea <_fflush_r+0x1a>
 80056e2:	6983      	ldr	r3, [r0, #24]
 80056e4:	b90b      	cbnz	r3, 80056ea <_fflush_r+0x1a>
 80056e6:	f000 f899 	bl	800581c <__sinit>
 80056ea:	4b14      	ldr	r3, [pc, #80]	; (800573c <_fflush_r+0x6c>)
 80056ec:	429c      	cmp	r4, r3
 80056ee:	d11b      	bne.n	8005728 <_fflush_r+0x58>
 80056f0:	686c      	ldr	r4, [r5, #4]
 80056f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d0ef      	beq.n	80056da <_fflush_r+0xa>
 80056fa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80056fc:	07d0      	lsls	r0, r2, #31
 80056fe:	d404      	bmi.n	800570a <_fflush_r+0x3a>
 8005700:	0599      	lsls	r1, r3, #22
 8005702:	d402      	bmi.n	800570a <_fflush_r+0x3a>
 8005704:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005706:	f000 f94c 	bl	80059a2 <__retarget_lock_acquire_recursive>
 800570a:	4628      	mov	r0, r5
 800570c:	4621      	mov	r1, r4
 800570e:	f7ff ff59 	bl	80055c4 <__sflush_r>
 8005712:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005714:	07da      	lsls	r2, r3, #31
 8005716:	4605      	mov	r5, r0
 8005718:	d4e0      	bmi.n	80056dc <_fflush_r+0xc>
 800571a:	89a3      	ldrh	r3, [r4, #12]
 800571c:	059b      	lsls	r3, r3, #22
 800571e:	d4dd      	bmi.n	80056dc <_fflush_r+0xc>
 8005720:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005722:	f000 f93f 	bl	80059a4 <__retarget_lock_release_recursive>
 8005726:	e7d9      	b.n	80056dc <_fflush_r+0xc>
 8005728:	4b05      	ldr	r3, [pc, #20]	; (8005740 <_fflush_r+0x70>)
 800572a:	429c      	cmp	r4, r3
 800572c:	d101      	bne.n	8005732 <_fflush_r+0x62>
 800572e:	68ac      	ldr	r4, [r5, #8]
 8005730:	e7df      	b.n	80056f2 <_fflush_r+0x22>
 8005732:	4b04      	ldr	r3, [pc, #16]	; (8005744 <_fflush_r+0x74>)
 8005734:	429c      	cmp	r4, r3
 8005736:	bf08      	it	eq
 8005738:	68ec      	ldreq	r4, [r5, #12]
 800573a:	e7da      	b.n	80056f2 <_fflush_r+0x22>
 800573c:	08006f44 	.word	0x08006f44
 8005740:	08006f64 	.word	0x08006f64
 8005744:	08006f24 	.word	0x08006f24

08005748 <fflush>:
 8005748:	4601      	mov	r1, r0
 800574a:	b920      	cbnz	r0, 8005756 <fflush+0xe>
 800574c:	4b04      	ldr	r3, [pc, #16]	; (8005760 <fflush+0x18>)
 800574e:	4905      	ldr	r1, [pc, #20]	; (8005764 <fflush+0x1c>)
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	f000 b8e1 	b.w	8005918 <_fwalk_reent>
 8005756:	4b04      	ldr	r3, [pc, #16]	; (8005768 <fflush+0x20>)
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	f7ff bfb9 	b.w	80056d0 <_fflush_r>
 800575e:	bf00      	nop
 8005760:	08006f84 	.word	0x08006f84
 8005764:	080056d1 	.word	0x080056d1
 8005768:	20000044 	.word	0x20000044

0800576c <std>:
 800576c:	2300      	movs	r3, #0
 800576e:	b510      	push	{r4, lr}
 8005770:	4604      	mov	r4, r0
 8005772:	e9c0 3300 	strd	r3, r3, [r0]
 8005776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800577a:	6083      	str	r3, [r0, #8]
 800577c:	8181      	strh	r1, [r0, #12]
 800577e:	6643      	str	r3, [r0, #100]	; 0x64
 8005780:	81c2      	strh	r2, [r0, #14]
 8005782:	6183      	str	r3, [r0, #24]
 8005784:	4619      	mov	r1, r3
 8005786:	2208      	movs	r2, #8
 8005788:	305c      	adds	r0, #92	; 0x5c
 800578a:	f000 f90c 	bl	80059a6 <memset>
 800578e:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <std+0x38>)
 8005790:	6263      	str	r3, [r4, #36]	; 0x24
 8005792:	4b05      	ldr	r3, [pc, #20]	; (80057a8 <std+0x3c>)
 8005794:	62a3      	str	r3, [r4, #40]	; 0x28
 8005796:	4b05      	ldr	r3, [pc, #20]	; (80057ac <std+0x40>)
 8005798:	62e3      	str	r3, [r4, #44]	; 0x2c
 800579a:	4b05      	ldr	r3, [pc, #20]	; (80057b0 <std+0x44>)
 800579c:	6224      	str	r4, [r4, #32]
 800579e:	6323      	str	r3, [r4, #48]	; 0x30
 80057a0:	bd10      	pop	{r4, pc}
 80057a2:	bf00      	nop
 80057a4:	08005c85 	.word	0x08005c85
 80057a8:	08005ca7 	.word	0x08005ca7
 80057ac:	08005cdf 	.word	0x08005cdf
 80057b0:	08005d03 	.word	0x08005d03

080057b4 <_cleanup_r>:
 80057b4:	4901      	ldr	r1, [pc, #4]	; (80057bc <_cleanup_r+0x8>)
 80057b6:	f000 b8af 	b.w	8005918 <_fwalk_reent>
 80057ba:	bf00      	nop
 80057bc:	080056d1 	.word	0x080056d1

080057c0 <__sfmoreglue>:
 80057c0:	b570      	push	{r4, r5, r6, lr}
 80057c2:	1e4a      	subs	r2, r1, #1
 80057c4:	2568      	movs	r5, #104	; 0x68
 80057c6:	4355      	muls	r5, r2
 80057c8:	460e      	mov	r6, r1
 80057ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80057ce:	f000 f941 	bl	8005a54 <_malloc_r>
 80057d2:	4604      	mov	r4, r0
 80057d4:	b140      	cbz	r0, 80057e8 <__sfmoreglue+0x28>
 80057d6:	2100      	movs	r1, #0
 80057d8:	e9c0 1600 	strd	r1, r6, [r0]
 80057dc:	300c      	adds	r0, #12
 80057de:	60a0      	str	r0, [r4, #8]
 80057e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80057e4:	f000 f8df 	bl	80059a6 <memset>
 80057e8:	4620      	mov	r0, r4
 80057ea:	bd70      	pop	{r4, r5, r6, pc}

080057ec <__sfp_lock_acquire>:
 80057ec:	4801      	ldr	r0, [pc, #4]	; (80057f4 <__sfp_lock_acquire+0x8>)
 80057ee:	f000 b8d8 	b.w	80059a2 <__retarget_lock_acquire_recursive>
 80057f2:	bf00      	nop
 80057f4:	20004530 	.word	0x20004530

080057f8 <__sfp_lock_release>:
 80057f8:	4801      	ldr	r0, [pc, #4]	; (8005800 <__sfp_lock_release+0x8>)
 80057fa:	f000 b8d3 	b.w	80059a4 <__retarget_lock_release_recursive>
 80057fe:	bf00      	nop
 8005800:	20004530 	.word	0x20004530

08005804 <__sinit_lock_acquire>:
 8005804:	4801      	ldr	r0, [pc, #4]	; (800580c <__sinit_lock_acquire+0x8>)
 8005806:	f000 b8cc 	b.w	80059a2 <__retarget_lock_acquire_recursive>
 800580a:	bf00      	nop
 800580c:	2000452b 	.word	0x2000452b

08005810 <__sinit_lock_release>:
 8005810:	4801      	ldr	r0, [pc, #4]	; (8005818 <__sinit_lock_release+0x8>)
 8005812:	f000 b8c7 	b.w	80059a4 <__retarget_lock_release_recursive>
 8005816:	bf00      	nop
 8005818:	2000452b 	.word	0x2000452b

0800581c <__sinit>:
 800581c:	b510      	push	{r4, lr}
 800581e:	4604      	mov	r4, r0
 8005820:	f7ff fff0 	bl	8005804 <__sinit_lock_acquire>
 8005824:	69a3      	ldr	r3, [r4, #24]
 8005826:	b11b      	cbz	r3, 8005830 <__sinit+0x14>
 8005828:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800582c:	f7ff bff0 	b.w	8005810 <__sinit_lock_release>
 8005830:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005834:	6523      	str	r3, [r4, #80]	; 0x50
 8005836:	4b13      	ldr	r3, [pc, #76]	; (8005884 <__sinit+0x68>)
 8005838:	4a13      	ldr	r2, [pc, #76]	; (8005888 <__sinit+0x6c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	62a2      	str	r2, [r4, #40]	; 0x28
 800583e:	42a3      	cmp	r3, r4
 8005840:	bf04      	itt	eq
 8005842:	2301      	moveq	r3, #1
 8005844:	61a3      	streq	r3, [r4, #24]
 8005846:	4620      	mov	r0, r4
 8005848:	f000 f820 	bl	800588c <__sfp>
 800584c:	6060      	str	r0, [r4, #4]
 800584e:	4620      	mov	r0, r4
 8005850:	f000 f81c 	bl	800588c <__sfp>
 8005854:	60a0      	str	r0, [r4, #8]
 8005856:	4620      	mov	r0, r4
 8005858:	f000 f818 	bl	800588c <__sfp>
 800585c:	2200      	movs	r2, #0
 800585e:	60e0      	str	r0, [r4, #12]
 8005860:	2104      	movs	r1, #4
 8005862:	6860      	ldr	r0, [r4, #4]
 8005864:	f7ff ff82 	bl	800576c <std>
 8005868:	68a0      	ldr	r0, [r4, #8]
 800586a:	2201      	movs	r2, #1
 800586c:	2109      	movs	r1, #9
 800586e:	f7ff ff7d 	bl	800576c <std>
 8005872:	68e0      	ldr	r0, [r4, #12]
 8005874:	2202      	movs	r2, #2
 8005876:	2112      	movs	r1, #18
 8005878:	f7ff ff78 	bl	800576c <std>
 800587c:	2301      	movs	r3, #1
 800587e:	61a3      	str	r3, [r4, #24]
 8005880:	e7d2      	b.n	8005828 <__sinit+0xc>
 8005882:	bf00      	nop
 8005884:	08006f84 	.word	0x08006f84
 8005888:	080057b5 	.word	0x080057b5

0800588c <__sfp>:
 800588c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800588e:	4607      	mov	r7, r0
 8005890:	f7ff ffac 	bl	80057ec <__sfp_lock_acquire>
 8005894:	4b1e      	ldr	r3, [pc, #120]	; (8005910 <__sfp+0x84>)
 8005896:	681e      	ldr	r6, [r3, #0]
 8005898:	69b3      	ldr	r3, [r6, #24]
 800589a:	b913      	cbnz	r3, 80058a2 <__sfp+0x16>
 800589c:	4630      	mov	r0, r6
 800589e:	f7ff ffbd 	bl	800581c <__sinit>
 80058a2:	3648      	adds	r6, #72	; 0x48
 80058a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80058a8:	3b01      	subs	r3, #1
 80058aa:	d503      	bpl.n	80058b4 <__sfp+0x28>
 80058ac:	6833      	ldr	r3, [r6, #0]
 80058ae:	b30b      	cbz	r3, 80058f4 <__sfp+0x68>
 80058b0:	6836      	ldr	r6, [r6, #0]
 80058b2:	e7f7      	b.n	80058a4 <__sfp+0x18>
 80058b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80058b8:	b9d5      	cbnz	r5, 80058f0 <__sfp+0x64>
 80058ba:	4b16      	ldr	r3, [pc, #88]	; (8005914 <__sfp+0x88>)
 80058bc:	60e3      	str	r3, [r4, #12]
 80058be:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80058c2:	6665      	str	r5, [r4, #100]	; 0x64
 80058c4:	f000 f86c 	bl	80059a0 <__retarget_lock_init_recursive>
 80058c8:	f7ff ff96 	bl	80057f8 <__sfp_lock_release>
 80058cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80058d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80058d4:	6025      	str	r5, [r4, #0]
 80058d6:	61a5      	str	r5, [r4, #24]
 80058d8:	2208      	movs	r2, #8
 80058da:	4629      	mov	r1, r5
 80058dc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80058e0:	f000 f861 	bl	80059a6 <memset>
 80058e4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80058e8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80058ec:	4620      	mov	r0, r4
 80058ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80058f0:	3468      	adds	r4, #104	; 0x68
 80058f2:	e7d9      	b.n	80058a8 <__sfp+0x1c>
 80058f4:	2104      	movs	r1, #4
 80058f6:	4638      	mov	r0, r7
 80058f8:	f7ff ff62 	bl	80057c0 <__sfmoreglue>
 80058fc:	4604      	mov	r4, r0
 80058fe:	6030      	str	r0, [r6, #0]
 8005900:	2800      	cmp	r0, #0
 8005902:	d1d5      	bne.n	80058b0 <__sfp+0x24>
 8005904:	f7ff ff78 	bl	80057f8 <__sfp_lock_release>
 8005908:	230c      	movs	r3, #12
 800590a:	603b      	str	r3, [r7, #0]
 800590c:	e7ee      	b.n	80058ec <__sfp+0x60>
 800590e:	bf00      	nop
 8005910:	08006f84 	.word	0x08006f84
 8005914:	ffff0001 	.word	0xffff0001

08005918 <_fwalk_reent>:
 8005918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800591c:	4606      	mov	r6, r0
 800591e:	4688      	mov	r8, r1
 8005920:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005924:	2700      	movs	r7, #0
 8005926:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800592a:	f1b9 0901 	subs.w	r9, r9, #1
 800592e:	d505      	bpl.n	800593c <_fwalk_reent+0x24>
 8005930:	6824      	ldr	r4, [r4, #0]
 8005932:	2c00      	cmp	r4, #0
 8005934:	d1f7      	bne.n	8005926 <_fwalk_reent+0xe>
 8005936:	4638      	mov	r0, r7
 8005938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800593c:	89ab      	ldrh	r3, [r5, #12]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d907      	bls.n	8005952 <_fwalk_reent+0x3a>
 8005942:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005946:	3301      	adds	r3, #1
 8005948:	d003      	beq.n	8005952 <_fwalk_reent+0x3a>
 800594a:	4629      	mov	r1, r5
 800594c:	4630      	mov	r0, r6
 800594e:	47c0      	blx	r8
 8005950:	4307      	orrs	r7, r0
 8005952:	3568      	adds	r5, #104	; 0x68
 8005954:	e7e9      	b.n	800592a <_fwalk_reent+0x12>
	...

08005958 <__libc_init_array>:
 8005958:	b570      	push	{r4, r5, r6, lr}
 800595a:	4d0d      	ldr	r5, [pc, #52]	; (8005990 <__libc_init_array+0x38>)
 800595c:	4c0d      	ldr	r4, [pc, #52]	; (8005994 <__libc_init_array+0x3c>)
 800595e:	1b64      	subs	r4, r4, r5
 8005960:	10a4      	asrs	r4, r4, #2
 8005962:	2600      	movs	r6, #0
 8005964:	42a6      	cmp	r6, r4
 8005966:	d109      	bne.n	800597c <__libc_init_array+0x24>
 8005968:	4d0b      	ldr	r5, [pc, #44]	; (8005998 <__libc_init_array+0x40>)
 800596a:	4c0c      	ldr	r4, [pc, #48]	; (800599c <__libc_init_array+0x44>)
 800596c:	f001 f82c 	bl	80069c8 <_init>
 8005970:	1b64      	subs	r4, r4, r5
 8005972:	10a4      	asrs	r4, r4, #2
 8005974:	2600      	movs	r6, #0
 8005976:	42a6      	cmp	r6, r4
 8005978:	d105      	bne.n	8005986 <__libc_init_array+0x2e>
 800597a:	bd70      	pop	{r4, r5, r6, pc}
 800597c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005980:	4798      	blx	r3
 8005982:	3601      	adds	r6, #1
 8005984:	e7ee      	b.n	8005964 <__libc_init_array+0xc>
 8005986:	f855 3b04 	ldr.w	r3, [r5], #4
 800598a:	4798      	blx	r3
 800598c:	3601      	adds	r6, #1
 800598e:	e7f2      	b.n	8005976 <__libc_init_array+0x1e>
 8005990:	08006fbc 	.word	0x08006fbc
 8005994:	08006fbc 	.word	0x08006fbc
 8005998:	08006fbc 	.word	0x08006fbc
 800599c:	08006fc0 	.word	0x08006fc0

080059a0 <__retarget_lock_init_recursive>:
 80059a0:	4770      	bx	lr

080059a2 <__retarget_lock_acquire_recursive>:
 80059a2:	4770      	bx	lr

080059a4 <__retarget_lock_release_recursive>:
 80059a4:	4770      	bx	lr

080059a6 <memset>:
 80059a6:	4402      	add	r2, r0
 80059a8:	4603      	mov	r3, r0
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d100      	bne.n	80059b0 <memset+0xa>
 80059ae:	4770      	bx	lr
 80059b0:	f803 1b01 	strb.w	r1, [r3], #1
 80059b4:	e7f9      	b.n	80059aa <memset+0x4>
	...

080059b8 <_free_r>:
 80059b8:	b538      	push	{r3, r4, r5, lr}
 80059ba:	4605      	mov	r5, r0
 80059bc:	2900      	cmp	r1, #0
 80059be:	d045      	beq.n	8005a4c <_free_r+0x94>
 80059c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059c4:	1f0c      	subs	r4, r1, #4
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	bfb8      	it	lt
 80059ca:	18e4      	addlt	r4, r4, r3
 80059cc:	f000 fb1e 	bl	800600c <__malloc_lock>
 80059d0:	4a1f      	ldr	r2, [pc, #124]	; (8005a50 <_free_r+0x98>)
 80059d2:	6813      	ldr	r3, [r2, #0]
 80059d4:	4610      	mov	r0, r2
 80059d6:	b933      	cbnz	r3, 80059e6 <_free_r+0x2e>
 80059d8:	6063      	str	r3, [r4, #4]
 80059da:	6014      	str	r4, [r2, #0]
 80059dc:	4628      	mov	r0, r5
 80059de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80059e2:	f000 bb19 	b.w	8006018 <__malloc_unlock>
 80059e6:	42a3      	cmp	r3, r4
 80059e8:	d90b      	bls.n	8005a02 <_free_r+0x4a>
 80059ea:	6821      	ldr	r1, [r4, #0]
 80059ec:	1862      	adds	r2, r4, r1
 80059ee:	4293      	cmp	r3, r2
 80059f0:	bf04      	itt	eq
 80059f2:	681a      	ldreq	r2, [r3, #0]
 80059f4:	685b      	ldreq	r3, [r3, #4]
 80059f6:	6063      	str	r3, [r4, #4]
 80059f8:	bf04      	itt	eq
 80059fa:	1852      	addeq	r2, r2, r1
 80059fc:	6022      	streq	r2, [r4, #0]
 80059fe:	6004      	str	r4, [r0, #0]
 8005a00:	e7ec      	b.n	80059dc <_free_r+0x24>
 8005a02:	461a      	mov	r2, r3
 8005a04:	685b      	ldr	r3, [r3, #4]
 8005a06:	b10b      	cbz	r3, 8005a0c <_free_r+0x54>
 8005a08:	42a3      	cmp	r3, r4
 8005a0a:	d9fa      	bls.n	8005a02 <_free_r+0x4a>
 8005a0c:	6811      	ldr	r1, [r2, #0]
 8005a0e:	1850      	adds	r0, r2, r1
 8005a10:	42a0      	cmp	r0, r4
 8005a12:	d10b      	bne.n	8005a2c <_free_r+0x74>
 8005a14:	6820      	ldr	r0, [r4, #0]
 8005a16:	4401      	add	r1, r0
 8005a18:	1850      	adds	r0, r2, r1
 8005a1a:	4283      	cmp	r3, r0
 8005a1c:	6011      	str	r1, [r2, #0]
 8005a1e:	d1dd      	bne.n	80059dc <_free_r+0x24>
 8005a20:	6818      	ldr	r0, [r3, #0]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	6053      	str	r3, [r2, #4]
 8005a26:	4401      	add	r1, r0
 8005a28:	6011      	str	r1, [r2, #0]
 8005a2a:	e7d7      	b.n	80059dc <_free_r+0x24>
 8005a2c:	d902      	bls.n	8005a34 <_free_r+0x7c>
 8005a2e:	230c      	movs	r3, #12
 8005a30:	602b      	str	r3, [r5, #0]
 8005a32:	e7d3      	b.n	80059dc <_free_r+0x24>
 8005a34:	6820      	ldr	r0, [r4, #0]
 8005a36:	1821      	adds	r1, r4, r0
 8005a38:	428b      	cmp	r3, r1
 8005a3a:	bf04      	itt	eq
 8005a3c:	6819      	ldreq	r1, [r3, #0]
 8005a3e:	685b      	ldreq	r3, [r3, #4]
 8005a40:	6063      	str	r3, [r4, #4]
 8005a42:	bf04      	itt	eq
 8005a44:	1809      	addeq	r1, r1, r0
 8005a46:	6021      	streq	r1, [r4, #0]
 8005a48:	6054      	str	r4, [r2, #4]
 8005a4a:	e7c7      	b.n	80059dc <_free_r+0x24>
 8005a4c:	bd38      	pop	{r3, r4, r5, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000184 	.word	0x20000184

08005a54 <_malloc_r>:
 8005a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a56:	1ccd      	adds	r5, r1, #3
 8005a58:	f025 0503 	bic.w	r5, r5, #3
 8005a5c:	3508      	adds	r5, #8
 8005a5e:	2d0c      	cmp	r5, #12
 8005a60:	bf38      	it	cc
 8005a62:	250c      	movcc	r5, #12
 8005a64:	2d00      	cmp	r5, #0
 8005a66:	4606      	mov	r6, r0
 8005a68:	db01      	blt.n	8005a6e <_malloc_r+0x1a>
 8005a6a:	42a9      	cmp	r1, r5
 8005a6c:	d903      	bls.n	8005a76 <_malloc_r+0x22>
 8005a6e:	230c      	movs	r3, #12
 8005a70:	6033      	str	r3, [r6, #0]
 8005a72:	2000      	movs	r0, #0
 8005a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a76:	f000 fac9 	bl	800600c <__malloc_lock>
 8005a7a:	4921      	ldr	r1, [pc, #132]	; (8005b00 <_malloc_r+0xac>)
 8005a7c:	680a      	ldr	r2, [r1, #0]
 8005a7e:	4614      	mov	r4, r2
 8005a80:	b99c      	cbnz	r4, 8005aaa <_malloc_r+0x56>
 8005a82:	4f20      	ldr	r7, [pc, #128]	; (8005b04 <_malloc_r+0xb0>)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	b923      	cbnz	r3, 8005a92 <_malloc_r+0x3e>
 8005a88:	4621      	mov	r1, r4
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f000 f8ca 	bl	8005c24 <_sbrk_r>
 8005a90:	6038      	str	r0, [r7, #0]
 8005a92:	4629      	mov	r1, r5
 8005a94:	4630      	mov	r0, r6
 8005a96:	f000 f8c5 	bl	8005c24 <_sbrk_r>
 8005a9a:	1c43      	adds	r3, r0, #1
 8005a9c:	d123      	bne.n	8005ae6 <_malloc_r+0x92>
 8005a9e:	230c      	movs	r3, #12
 8005aa0:	6033      	str	r3, [r6, #0]
 8005aa2:	4630      	mov	r0, r6
 8005aa4:	f000 fab8 	bl	8006018 <__malloc_unlock>
 8005aa8:	e7e3      	b.n	8005a72 <_malloc_r+0x1e>
 8005aaa:	6823      	ldr	r3, [r4, #0]
 8005aac:	1b5b      	subs	r3, r3, r5
 8005aae:	d417      	bmi.n	8005ae0 <_malloc_r+0x8c>
 8005ab0:	2b0b      	cmp	r3, #11
 8005ab2:	d903      	bls.n	8005abc <_malloc_r+0x68>
 8005ab4:	6023      	str	r3, [r4, #0]
 8005ab6:	441c      	add	r4, r3
 8005ab8:	6025      	str	r5, [r4, #0]
 8005aba:	e004      	b.n	8005ac6 <_malloc_r+0x72>
 8005abc:	6863      	ldr	r3, [r4, #4]
 8005abe:	42a2      	cmp	r2, r4
 8005ac0:	bf0c      	ite	eq
 8005ac2:	600b      	streq	r3, [r1, #0]
 8005ac4:	6053      	strne	r3, [r2, #4]
 8005ac6:	4630      	mov	r0, r6
 8005ac8:	f000 faa6 	bl	8006018 <__malloc_unlock>
 8005acc:	f104 000b 	add.w	r0, r4, #11
 8005ad0:	1d23      	adds	r3, r4, #4
 8005ad2:	f020 0007 	bic.w	r0, r0, #7
 8005ad6:	1ac2      	subs	r2, r0, r3
 8005ad8:	d0cc      	beq.n	8005a74 <_malloc_r+0x20>
 8005ada:	1a1b      	subs	r3, r3, r0
 8005adc:	50a3      	str	r3, [r4, r2]
 8005ade:	e7c9      	b.n	8005a74 <_malloc_r+0x20>
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	6864      	ldr	r4, [r4, #4]
 8005ae4:	e7cc      	b.n	8005a80 <_malloc_r+0x2c>
 8005ae6:	1cc4      	adds	r4, r0, #3
 8005ae8:	f024 0403 	bic.w	r4, r4, #3
 8005aec:	42a0      	cmp	r0, r4
 8005aee:	d0e3      	beq.n	8005ab8 <_malloc_r+0x64>
 8005af0:	1a21      	subs	r1, r4, r0
 8005af2:	4630      	mov	r0, r6
 8005af4:	f000 f896 	bl	8005c24 <_sbrk_r>
 8005af8:	3001      	adds	r0, #1
 8005afa:	d1dd      	bne.n	8005ab8 <_malloc_r+0x64>
 8005afc:	e7cf      	b.n	8005a9e <_malloc_r+0x4a>
 8005afe:	bf00      	nop
 8005b00:	20000184 	.word	0x20000184
 8005b04:	20000188 	.word	0x20000188

08005b08 <iprintf>:
 8005b08:	b40f      	push	{r0, r1, r2, r3}
 8005b0a:	4b0a      	ldr	r3, [pc, #40]	; (8005b34 <iprintf+0x2c>)
 8005b0c:	b513      	push	{r0, r1, r4, lr}
 8005b0e:	681c      	ldr	r4, [r3, #0]
 8005b10:	b124      	cbz	r4, 8005b1c <iprintf+0x14>
 8005b12:	69a3      	ldr	r3, [r4, #24]
 8005b14:	b913      	cbnz	r3, 8005b1c <iprintf+0x14>
 8005b16:	4620      	mov	r0, r4
 8005b18:	f7ff fe80 	bl	800581c <__sinit>
 8005b1c:	ab05      	add	r3, sp, #20
 8005b1e:	9a04      	ldr	r2, [sp, #16]
 8005b20:	68a1      	ldr	r1, [r4, #8]
 8005b22:	9301      	str	r3, [sp, #4]
 8005b24:	4620      	mov	r0, r4
 8005b26:	f000 fc01 	bl	800632c <_vfiprintf_r>
 8005b2a:	b002      	add	sp, #8
 8005b2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b30:	b004      	add	sp, #16
 8005b32:	4770      	bx	lr
 8005b34:	20000044 	.word	0x20000044

08005b38 <_puts_r>:
 8005b38:	b570      	push	{r4, r5, r6, lr}
 8005b3a:	460e      	mov	r6, r1
 8005b3c:	4605      	mov	r5, r0
 8005b3e:	b118      	cbz	r0, 8005b48 <_puts_r+0x10>
 8005b40:	6983      	ldr	r3, [r0, #24]
 8005b42:	b90b      	cbnz	r3, 8005b48 <_puts_r+0x10>
 8005b44:	f7ff fe6a 	bl	800581c <__sinit>
 8005b48:	69ab      	ldr	r3, [r5, #24]
 8005b4a:	68ac      	ldr	r4, [r5, #8]
 8005b4c:	b913      	cbnz	r3, 8005b54 <_puts_r+0x1c>
 8005b4e:	4628      	mov	r0, r5
 8005b50:	f7ff fe64 	bl	800581c <__sinit>
 8005b54:	4b2c      	ldr	r3, [pc, #176]	; (8005c08 <_puts_r+0xd0>)
 8005b56:	429c      	cmp	r4, r3
 8005b58:	d120      	bne.n	8005b9c <_puts_r+0x64>
 8005b5a:	686c      	ldr	r4, [r5, #4]
 8005b5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005b5e:	07db      	lsls	r3, r3, #31
 8005b60:	d405      	bmi.n	8005b6e <_puts_r+0x36>
 8005b62:	89a3      	ldrh	r3, [r4, #12]
 8005b64:	0598      	lsls	r0, r3, #22
 8005b66:	d402      	bmi.n	8005b6e <_puts_r+0x36>
 8005b68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b6a:	f7ff ff1a 	bl	80059a2 <__retarget_lock_acquire_recursive>
 8005b6e:	89a3      	ldrh	r3, [r4, #12]
 8005b70:	0719      	lsls	r1, r3, #28
 8005b72:	d51d      	bpl.n	8005bb0 <_puts_r+0x78>
 8005b74:	6923      	ldr	r3, [r4, #16]
 8005b76:	b1db      	cbz	r3, 8005bb0 <_puts_r+0x78>
 8005b78:	3e01      	subs	r6, #1
 8005b7a:	68a3      	ldr	r3, [r4, #8]
 8005b7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005b80:	3b01      	subs	r3, #1
 8005b82:	60a3      	str	r3, [r4, #8]
 8005b84:	bb39      	cbnz	r1, 8005bd6 <_puts_r+0x9e>
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	da38      	bge.n	8005bfc <_puts_r+0xc4>
 8005b8a:	4622      	mov	r2, r4
 8005b8c:	210a      	movs	r1, #10
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f000 f8e4 	bl	8005d5c <__swbuf_r>
 8005b94:	3001      	adds	r0, #1
 8005b96:	d011      	beq.n	8005bbc <_puts_r+0x84>
 8005b98:	250a      	movs	r5, #10
 8005b9a:	e011      	b.n	8005bc0 <_puts_r+0x88>
 8005b9c:	4b1b      	ldr	r3, [pc, #108]	; (8005c0c <_puts_r+0xd4>)
 8005b9e:	429c      	cmp	r4, r3
 8005ba0:	d101      	bne.n	8005ba6 <_puts_r+0x6e>
 8005ba2:	68ac      	ldr	r4, [r5, #8]
 8005ba4:	e7da      	b.n	8005b5c <_puts_r+0x24>
 8005ba6:	4b1a      	ldr	r3, [pc, #104]	; (8005c10 <_puts_r+0xd8>)
 8005ba8:	429c      	cmp	r4, r3
 8005baa:	bf08      	it	eq
 8005bac:	68ec      	ldreq	r4, [r5, #12]
 8005bae:	e7d5      	b.n	8005b5c <_puts_r+0x24>
 8005bb0:	4621      	mov	r1, r4
 8005bb2:	4628      	mov	r0, r5
 8005bb4:	f000 f936 	bl	8005e24 <__swsetup_r>
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d0dd      	beq.n	8005b78 <_puts_r+0x40>
 8005bbc:	f04f 35ff 	mov.w	r5, #4294967295
 8005bc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bc2:	07da      	lsls	r2, r3, #31
 8005bc4:	d405      	bmi.n	8005bd2 <_puts_r+0x9a>
 8005bc6:	89a3      	ldrh	r3, [r4, #12]
 8005bc8:	059b      	lsls	r3, r3, #22
 8005bca:	d402      	bmi.n	8005bd2 <_puts_r+0x9a>
 8005bcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bce:	f7ff fee9 	bl	80059a4 <__retarget_lock_release_recursive>
 8005bd2:	4628      	mov	r0, r5
 8005bd4:	bd70      	pop	{r4, r5, r6, pc}
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	da04      	bge.n	8005be4 <_puts_r+0xac>
 8005bda:	69a2      	ldr	r2, [r4, #24]
 8005bdc:	429a      	cmp	r2, r3
 8005bde:	dc06      	bgt.n	8005bee <_puts_r+0xb6>
 8005be0:	290a      	cmp	r1, #10
 8005be2:	d004      	beq.n	8005bee <_puts_r+0xb6>
 8005be4:	6823      	ldr	r3, [r4, #0]
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	6022      	str	r2, [r4, #0]
 8005bea:	7019      	strb	r1, [r3, #0]
 8005bec:	e7c5      	b.n	8005b7a <_puts_r+0x42>
 8005bee:	4622      	mov	r2, r4
 8005bf0:	4628      	mov	r0, r5
 8005bf2:	f000 f8b3 	bl	8005d5c <__swbuf_r>
 8005bf6:	3001      	adds	r0, #1
 8005bf8:	d1bf      	bne.n	8005b7a <_puts_r+0x42>
 8005bfa:	e7df      	b.n	8005bbc <_puts_r+0x84>
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	250a      	movs	r5, #10
 8005c00:	1c5a      	adds	r2, r3, #1
 8005c02:	6022      	str	r2, [r4, #0]
 8005c04:	701d      	strb	r5, [r3, #0]
 8005c06:	e7db      	b.n	8005bc0 <_puts_r+0x88>
 8005c08:	08006f44 	.word	0x08006f44
 8005c0c:	08006f64 	.word	0x08006f64
 8005c10:	08006f24 	.word	0x08006f24

08005c14 <puts>:
 8005c14:	4b02      	ldr	r3, [pc, #8]	; (8005c20 <puts+0xc>)
 8005c16:	4601      	mov	r1, r0
 8005c18:	6818      	ldr	r0, [r3, #0]
 8005c1a:	f7ff bf8d 	b.w	8005b38 <_puts_r>
 8005c1e:	bf00      	nop
 8005c20:	20000044 	.word	0x20000044

08005c24 <_sbrk_r>:
 8005c24:	b538      	push	{r3, r4, r5, lr}
 8005c26:	4d06      	ldr	r5, [pc, #24]	; (8005c40 <_sbrk_r+0x1c>)
 8005c28:	2300      	movs	r3, #0
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	4608      	mov	r0, r1
 8005c2e:	602b      	str	r3, [r5, #0]
 8005c30:	f7ff fc36 	bl	80054a0 <_sbrk>
 8005c34:	1c43      	adds	r3, r0, #1
 8005c36:	d102      	bne.n	8005c3e <_sbrk_r+0x1a>
 8005c38:	682b      	ldr	r3, [r5, #0]
 8005c3a:	b103      	cbz	r3, 8005c3e <_sbrk_r+0x1a>
 8005c3c:	6023      	str	r3, [r4, #0]
 8005c3e:	bd38      	pop	{r3, r4, r5, pc}
 8005c40:	20004534 	.word	0x20004534

08005c44 <siprintf>:
 8005c44:	b40e      	push	{r1, r2, r3}
 8005c46:	b500      	push	{lr}
 8005c48:	b09c      	sub	sp, #112	; 0x70
 8005c4a:	ab1d      	add	r3, sp, #116	; 0x74
 8005c4c:	9002      	str	r0, [sp, #8]
 8005c4e:	9006      	str	r0, [sp, #24]
 8005c50:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c54:	4809      	ldr	r0, [pc, #36]	; (8005c7c <siprintf+0x38>)
 8005c56:	9107      	str	r1, [sp, #28]
 8005c58:	9104      	str	r1, [sp, #16]
 8005c5a:	4909      	ldr	r1, [pc, #36]	; (8005c80 <siprintf+0x3c>)
 8005c5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c60:	9105      	str	r1, [sp, #20]
 8005c62:	6800      	ldr	r0, [r0, #0]
 8005c64:	9301      	str	r3, [sp, #4]
 8005c66:	a902      	add	r1, sp, #8
 8005c68:	f000 fa38 	bl	80060dc <_svfiprintf_r>
 8005c6c:	9b02      	ldr	r3, [sp, #8]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	701a      	strb	r2, [r3, #0]
 8005c72:	b01c      	add	sp, #112	; 0x70
 8005c74:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c78:	b003      	add	sp, #12
 8005c7a:	4770      	bx	lr
 8005c7c:	20000044 	.word	0x20000044
 8005c80:	ffff0208 	.word	0xffff0208

08005c84 <__sread>:
 8005c84:	b510      	push	{r4, lr}
 8005c86:	460c      	mov	r4, r1
 8005c88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005c8c:	f000 fe12 	bl	80068b4 <_read_r>
 8005c90:	2800      	cmp	r0, #0
 8005c92:	bfab      	itete	ge
 8005c94:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005c96:	89a3      	ldrhlt	r3, [r4, #12]
 8005c98:	181b      	addge	r3, r3, r0
 8005c9a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005c9e:	bfac      	ite	ge
 8005ca0:	6563      	strge	r3, [r4, #84]	; 0x54
 8005ca2:	81a3      	strhlt	r3, [r4, #12]
 8005ca4:	bd10      	pop	{r4, pc}

08005ca6 <__swrite>:
 8005ca6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005caa:	461f      	mov	r7, r3
 8005cac:	898b      	ldrh	r3, [r1, #12]
 8005cae:	05db      	lsls	r3, r3, #23
 8005cb0:	4605      	mov	r5, r0
 8005cb2:	460c      	mov	r4, r1
 8005cb4:	4616      	mov	r6, r2
 8005cb6:	d505      	bpl.n	8005cc4 <__swrite+0x1e>
 8005cb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cbc:	2302      	movs	r3, #2
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f000 f92e 	bl	8005f20 <_lseek_r>
 8005cc4:	89a3      	ldrh	r3, [r4, #12]
 8005cc6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cce:	81a3      	strh	r3, [r4, #12]
 8005cd0:	4632      	mov	r2, r6
 8005cd2:	463b      	mov	r3, r7
 8005cd4:	4628      	mov	r0, r5
 8005cd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005cda:	f000 b891 	b.w	8005e00 <_write_r>

08005cde <__sseek>:
 8005cde:	b510      	push	{r4, lr}
 8005ce0:	460c      	mov	r4, r1
 8005ce2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ce6:	f000 f91b 	bl	8005f20 <_lseek_r>
 8005cea:	1c43      	adds	r3, r0, #1
 8005cec:	89a3      	ldrh	r3, [r4, #12]
 8005cee:	bf15      	itete	ne
 8005cf0:	6560      	strne	r0, [r4, #84]	; 0x54
 8005cf2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005cf6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005cfa:	81a3      	strheq	r3, [r4, #12]
 8005cfc:	bf18      	it	ne
 8005cfe:	81a3      	strhne	r3, [r4, #12]
 8005d00:	bd10      	pop	{r4, pc}

08005d02 <__sclose>:
 8005d02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d06:	f000 b8fb 	b.w	8005f00 <_close_r>

08005d0a <strcpy>:
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005d10:	f803 2b01 	strb.w	r2, [r3], #1
 8005d14:	2a00      	cmp	r2, #0
 8005d16:	d1f9      	bne.n	8005d0c <strcpy+0x2>
 8005d18:	4770      	bx	lr
	...

08005d1c <_vsiprintf_r>:
 8005d1c:	b500      	push	{lr}
 8005d1e:	b09b      	sub	sp, #108	; 0x6c
 8005d20:	9100      	str	r1, [sp, #0]
 8005d22:	9104      	str	r1, [sp, #16]
 8005d24:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d28:	9105      	str	r1, [sp, #20]
 8005d2a:	9102      	str	r1, [sp, #8]
 8005d2c:	4905      	ldr	r1, [pc, #20]	; (8005d44 <_vsiprintf_r+0x28>)
 8005d2e:	9103      	str	r1, [sp, #12]
 8005d30:	4669      	mov	r1, sp
 8005d32:	f000 f9d3 	bl	80060dc <_svfiprintf_r>
 8005d36:	9b00      	ldr	r3, [sp, #0]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	701a      	strb	r2, [r3, #0]
 8005d3c:	b01b      	add	sp, #108	; 0x6c
 8005d3e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d42:	bf00      	nop
 8005d44:	ffff0208 	.word	0xffff0208

08005d48 <vsiprintf>:
 8005d48:	4613      	mov	r3, r2
 8005d4a:	460a      	mov	r2, r1
 8005d4c:	4601      	mov	r1, r0
 8005d4e:	4802      	ldr	r0, [pc, #8]	; (8005d58 <vsiprintf+0x10>)
 8005d50:	6800      	ldr	r0, [r0, #0]
 8005d52:	f7ff bfe3 	b.w	8005d1c <_vsiprintf_r>
 8005d56:	bf00      	nop
 8005d58:	20000044 	.word	0x20000044

08005d5c <__swbuf_r>:
 8005d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d5e:	460e      	mov	r6, r1
 8005d60:	4614      	mov	r4, r2
 8005d62:	4605      	mov	r5, r0
 8005d64:	b118      	cbz	r0, 8005d6e <__swbuf_r+0x12>
 8005d66:	6983      	ldr	r3, [r0, #24]
 8005d68:	b90b      	cbnz	r3, 8005d6e <__swbuf_r+0x12>
 8005d6a:	f7ff fd57 	bl	800581c <__sinit>
 8005d6e:	4b21      	ldr	r3, [pc, #132]	; (8005df4 <__swbuf_r+0x98>)
 8005d70:	429c      	cmp	r4, r3
 8005d72:	d12b      	bne.n	8005dcc <__swbuf_r+0x70>
 8005d74:	686c      	ldr	r4, [r5, #4]
 8005d76:	69a3      	ldr	r3, [r4, #24]
 8005d78:	60a3      	str	r3, [r4, #8]
 8005d7a:	89a3      	ldrh	r3, [r4, #12]
 8005d7c:	071a      	lsls	r2, r3, #28
 8005d7e:	d52f      	bpl.n	8005de0 <__swbuf_r+0x84>
 8005d80:	6923      	ldr	r3, [r4, #16]
 8005d82:	b36b      	cbz	r3, 8005de0 <__swbuf_r+0x84>
 8005d84:	6923      	ldr	r3, [r4, #16]
 8005d86:	6820      	ldr	r0, [r4, #0]
 8005d88:	1ac0      	subs	r0, r0, r3
 8005d8a:	6963      	ldr	r3, [r4, #20]
 8005d8c:	b2f6      	uxtb	r6, r6
 8005d8e:	4283      	cmp	r3, r0
 8005d90:	4637      	mov	r7, r6
 8005d92:	dc04      	bgt.n	8005d9e <__swbuf_r+0x42>
 8005d94:	4621      	mov	r1, r4
 8005d96:	4628      	mov	r0, r5
 8005d98:	f7ff fc9a 	bl	80056d0 <_fflush_r>
 8005d9c:	bb30      	cbnz	r0, 8005dec <__swbuf_r+0x90>
 8005d9e:	68a3      	ldr	r3, [r4, #8]
 8005da0:	3b01      	subs	r3, #1
 8005da2:	60a3      	str	r3, [r4, #8]
 8005da4:	6823      	ldr	r3, [r4, #0]
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	6022      	str	r2, [r4, #0]
 8005daa:	701e      	strb	r6, [r3, #0]
 8005dac:	6963      	ldr	r3, [r4, #20]
 8005dae:	3001      	adds	r0, #1
 8005db0:	4283      	cmp	r3, r0
 8005db2:	d004      	beq.n	8005dbe <__swbuf_r+0x62>
 8005db4:	89a3      	ldrh	r3, [r4, #12]
 8005db6:	07db      	lsls	r3, r3, #31
 8005db8:	d506      	bpl.n	8005dc8 <__swbuf_r+0x6c>
 8005dba:	2e0a      	cmp	r6, #10
 8005dbc:	d104      	bne.n	8005dc8 <__swbuf_r+0x6c>
 8005dbe:	4621      	mov	r1, r4
 8005dc0:	4628      	mov	r0, r5
 8005dc2:	f7ff fc85 	bl	80056d0 <_fflush_r>
 8005dc6:	b988      	cbnz	r0, 8005dec <__swbuf_r+0x90>
 8005dc8:	4638      	mov	r0, r7
 8005dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dcc:	4b0a      	ldr	r3, [pc, #40]	; (8005df8 <__swbuf_r+0x9c>)
 8005dce:	429c      	cmp	r4, r3
 8005dd0:	d101      	bne.n	8005dd6 <__swbuf_r+0x7a>
 8005dd2:	68ac      	ldr	r4, [r5, #8]
 8005dd4:	e7cf      	b.n	8005d76 <__swbuf_r+0x1a>
 8005dd6:	4b09      	ldr	r3, [pc, #36]	; (8005dfc <__swbuf_r+0xa0>)
 8005dd8:	429c      	cmp	r4, r3
 8005dda:	bf08      	it	eq
 8005ddc:	68ec      	ldreq	r4, [r5, #12]
 8005dde:	e7ca      	b.n	8005d76 <__swbuf_r+0x1a>
 8005de0:	4621      	mov	r1, r4
 8005de2:	4628      	mov	r0, r5
 8005de4:	f000 f81e 	bl	8005e24 <__swsetup_r>
 8005de8:	2800      	cmp	r0, #0
 8005dea:	d0cb      	beq.n	8005d84 <__swbuf_r+0x28>
 8005dec:	f04f 37ff 	mov.w	r7, #4294967295
 8005df0:	e7ea      	b.n	8005dc8 <__swbuf_r+0x6c>
 8005df2:	bf00      	nop
 8005df4:	08006f44 	.word	0x08006f44
 8005df8:	08006f64 	.word	0x08006f64
 8005dfc:	08006f24 	.word	0x08006f24

08005e00 <_write_r>:
 8005e00:	b538      	push	{r3, r4, r5, lr}
 8005e02:	4d07      	ldr	r5, [pc, #28]	; (8005e20 <_write_r+0x20>)
 8005e04:	4604      	mov	r4, r0
 8005e06:	4608      	mov	r0, r1
 8005e08:	4611      	mov	r1, r2
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	602a      	str	r2, [r5, #0]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f7fe ff02 	bl	8004c18 <_write>
 8005e14:	1c43      	adds	r3, r0, #1
 8005e16:	d102      	bne.n	8005e1e <_write_r+0x1e>
 8005e18:	682b      	ldr	r3, [r5, #0]
 8005e1a:	b103      	cbz	r3, 8005e1e <_write_r+0x1e>
 8005e1c:	6023      	str	r3, [r4, #0]
 8005e1e:	bd38      	pop	{r3, r4, r5, pc}
 8005e20:	20004534 	.word	0x20004534

08005e24 <__swsetup_r>:
 8005e24:	4b32      	ldr	r3, [pc, #200]	; (8005ef0 <__swsetup_r+0xcc>)
 8005e26:	b570      	push	{r4, r5, r6, lr}
 8005e28:	681d      	ldr	r5, [r3, #0]
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	460c      	mov	r4, r1
 8005e2e:	b125      	cbz	r5, 8005e3a <__swsetup_r+0x16>
 8005e30:	69ab      	ldr	r3, [r5, #24]
 8005e32:	b913      	cbnz	r3, 8005e3a <__swsetup_r+0x16>
 8005e34:	4628      	mov	r0, r5
 8005e36:	f7ff fcf1 	bl	800581c <__sinit>
 8005e3a:	4b2e      	ldr	r3, [pc, #184]	; (8005ef4 <__swsetup_r+0xd0>)
 8005e3c:	429c      	cmp	r4, r3
 8005e3e:	d10f      	bne.n	8005e60 <__swsetup_r+0x3c>
 8005e40:	686c      	ldr	r4, [r5, #4]
 8005e42:	89a3      	ldrh	r3, [r4, #12]
 8005e44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e48:	0719      	lsls	r1, r3, #28
 8005e4a:	d42c      	bmi.n	8005ea6 <__swsetup_r+0x82>
 8005e4c:	06dd      	lsls	r5, r3, #27
 8005e4e:	d411      	bmi.n	8005e74 <__swsetup_r+0x50>
 8005e50:	2309      	movs	r3, #9
 8005e52:	6033      	str	r3, [r6, #0]
 8005e54:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e58:	81a3      	strh	r3, [r4, #12]
 8005e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8005e5e:	e03e      	b.n	8005ede <__swsetup_r+0xba>
 8005e60:	4b25      	ldr	r3, [pc, #148]	; (8005ef8 <__swsetup_r+0xd4>)
 8005e62:	429c      	cmp	r4, r3
 8005e64:	d101      	bne.n	8005e6a <__swsetup_r+0x46>
 8005e66:	68ac      	ldr	r4, [r5, #8]
 8005e68:	e7eb      	b.n	8005e42 <__swsetup_r+0x1e>
 8005e6a:	4b24      	ldr	r3, [pc, #144]	; (8005efc <__swsetup_r+0xd8>)
 8005e6c:	429c      	cmp	r4, r3
 8005e6e:	bf08      	it	eq
 8005e70:	68ec      	ldreq	r4, [r5, #12]
 8005e72:	e7e6      	b.n	8005e42 <__swsetup_r+0x1e>
 8005e74:	0758      	lsls	r0, r3, #29
 8005e76:	d512      	bpl.n	8005e9e <__swsetup_r+0x7a>
 8005e78:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e7a:	b141      	cbz	r1, 8005e8e <__swsetup_r+0x6a>
 8005e7c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e80:	4299      	cmp	r1, r3
 8005e82:	d002      	beq.n	8005e8a <__swsetup_r+0x66>
 8005e84:	4630      	mov	r0, r6
 8005e86:	f7ff fd97 	bl	80059b8 <_free_r>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	6363      	str	r3, [r4, #52]	; 0x34
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e94:	81a3      	strh	r3, [r4, #12]
 8005e96:	2300      	movs	r3, #0
 8005e98:	6063      	str	r3, [r4, #4]
 8005e9a:	6923      	ldr	r3, [r4, #16]
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	f043 0308 	orr.w	r3, r3, #8
 8005ea4:	81a3      	strh	r3, [r4, #12]
 8005ea6:	6923      	ldr	r3, [r4, #16]
 8005ea8:	b94b      	cbnz	r3, 8005ebe <__swsetup_r+0x9a>
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005eb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eb4:	d003      	beq.n	8005ebe <__swsetup_r+0x9a>
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	4630      	mov	r0, r6
 8005eba:	f000 f867 	bl	8005f8c <__smakebuf_r>
 8005ebe:	89a0      	ldrh	r0, [r4, #12]
 8005ec0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ec4:	f010 0301 	ands.w	r3, r0, #1
 8005ec8:	d00a      	beq.n	8005ee0 <__swsetup_r+0xbc>
 8005eca:	2300      	movs	r3, #0
 8005ecc:	60a3      	str	r3, [r4, #8]
 8005ece:	6963      	ldr	r3, [r4, #20]
 8005ed0:	425b      	negs	r3, r3
 8005ed2:	61a3      	str	r3, [r4, #24]
 8005ed4:	6923      	ldr	r3, [r4, #16]
 8005ed6:	b943      	cbnz	r3, 8005eea <__swsetup_r+0xc6>
 8005ed8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005edc:	d1ba      	bne.n	8005e54 <__swsetup_r+0x30>
 8005ede:	bd70      	pop	{r4, r5, r6, pc}
 8005ee0:	0781      	lsls	r1, r0, #30
 8005ee2:	bf58      	it	pl
 8005ee4:	6963      	ldrpl	r3, [r4, #20]
 8005ee6:	60a3      	str	r3, [r4, #8]
 8005ee8:	e7f4      	b.n	8005ed4 <__swsetup_r+0xb0>
 8005eea:	2000      	movs	r0, #0
 8005eec:	e7f7      	b.n	8005ede <__swsetup_r+0xba>
 8005eee:	bf00      	nop
 8005ef0:	20000044 	.word	0x20000044
 8005ef4:	08006f44 	.word	0x08006f44
 8005ef8:	08006f64 	.word	0x08006f64
 8005efc:	08006f24 	.word	0x08006f24

08005f00 <_close_r>:
 8005f00:	b538      	push	{r3, r4, r5, lr}
 8005f02:	4d06      	ldr	r5, [pc, #24]	; (8005f1c <_close_r+0x1c>)
 8005f04:	2300      	movs	r3, #0
 8005f06:	4604      	mov	r4, r0
 8005f08:	4608      	mov	r0, r1
 8005f0a:	602b      	str	r3, [r5, #0]
 8005f0c:	f7ff fae2 	bl	80054d4 <_close>
 8005f10:	1c43      	adds	r3, r0, #1
 8005f12:	d102      	bne.n	8005f1a <_close_r+0x1a>
 8005f14:	682b      	ldr	r3, [r5, #0]
 8005f16:	b103      	cbz	r3, 8005f1a <_close_r+0x1a>
 8005f18:	6023      	str	r3, [r4, #0]
 8005f1a:	bd38      	pop	{r3, r4, r5, pc}
 8005f1c:	20004534 	.word	0x20004534

08005f20 <_lseek_r>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	4d07      	ldr	r5, [pc, #28]	; (8005f40 <_lseek_r+0x20>)
 8005f24:	4604      	mov	r4, r0
 8005f26:	4608      	mov	r0, r1
 8005f28:	4611      	mov	r1, r2
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	602a      	str	r2, [r5, #0]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	f7ff fada 	bl	80054e8 <_lseek>
 8005f34:	1c43      	adds	r3, r0, #1
 8005f36:	d102      	bne.n	8005f3e <_lseek_r+0x1e>
 8005f38:	682b      	ldr	r3, [r5, #0]
 8005f3a:	b103      	cbz	r3, 8005f3e <_lseek_r+0x1e>
 8005f3c:	6023      	str	r3, [r4, #0]
 8005f3e:	bd38      	pop	{r3, r4, r5, pc}
 8005f40:	20004534 	.word	0x20004534

08005f44 <__swhatbuf_r>:
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	460e      	mov	r6, r1
 8005f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	b096      	sub	sp, #88	; 0x58
 8005f50:	4614      	mov	r4, r2
 8005f52:	461d      	mov	r5, r3
 8005f54:	da07      	bge.n	8005f66 <__swhatbuf_r+0x22>
 8005f56:	2300      	movs	r3, #0
 8005f58:	602b      	str	r3, [r5, #0]
 8005f5a:	89b3      	ldrh	r3, [r6, #12]
 8005f5c:	061a      	lsls	r2, r3, #24
 8005f5e:	d410      	bmi.n	8005f82 <__swhatbuf_r+0x3e>
 8005f60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f64:	e00e      	b.n	8005f84 <__swhatbuf_r+0x40>
 8005f66:	466a      	mov	r2, sp
 8005f68:	f000 fcb6 	bl	80068d8 <_fstat_r>
 8005f6c:	2800      	cmp	r0, #0
 8005f6e:	dbf2      	blt.n	8005f56 <__swhatbuf_r+0x12>
 8005f70:	9a01      	ldr	r2, [sp, #4]
 8005f72:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f76:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f7a:	425a      	negs	r2, r3
 8005f7c:	415a      	adcs	r2, r3
 8005f7e:	602a      	str	r2, [r5, #0]
 8005f80:	e7ee      	b.n	8005f60 <__swhatbuf_r+0x1c>
 8005f82:	2340      	movs	r3, #64	; 0x40
 8005f84:	2000      	movs	r0, #0
 8005f86:	6023      	str	r3, [r4, #0]
 8005f88:	b016      	add	sp, #88	; 0x58
 8005f8a:	bd70      	pop	{r4, r5, r6, pc}

08005f8c <__smakebuf_r>:
 8005f8c:	898b      	ldrh	r3, [r1, #12]
 8005f8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f90:	079d      	lsls	r5, r3, #30
 8005f92:	4606      	mov	r6, r0
 8005f94:	460c      	mov	r4, r1
 8005f96:	d507      	bpl.n	8005fa8 <__smakebuf_r+0x1c>
 8005f98:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f9c:	6023      	str	r3, [r4, #0]
 8005f9e:	6123      	str	r3, [r4, #16]
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	6163      	str	r3, [r4, #20]
 8005fa4:	b002      	add	sp, #8
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}
 8005fa8:	ab01      	add	r3, sp, #4
 8005faa:	466a      	mov	r2, sp
 8005fac:	f7ff ffca 	bl	8005f44 <__swhatbuf_r>
 8005fb0:	9900      	ldr	r1, [sp, #0]
 8005fb2:	4605      	mov	r5, r0
 8005fb4:	4630      	mov	r0, r6
 8005fb6:	f7ff fd4d 	bl	8005a54 <_malloc_r>
 8005fba:	b948      	cbnz	r0, 8005fd0 <__smakebuf_r+0x44>
 8005fbc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fc0:	059a      	lsls	r2, r3, #22
 8005fc2:	d4ef      	bmi.n	8005fa4 <__smakebuf_r+0x18>
 8005fc4:	f023 0303 	bic.w	r3, r3, #3
 8005fc8:	f043 0302 	orr.w	r3, r3, #2
 8005fcc:	81a3      	strh	r3, [r4, #12]
 8005fce:	e7e3      	b.n	8005f98 <__smakebuf_r+0xc>
 8005fd0:	4b0d      	ldr	r3, [pc, #52]	; (8006008 <__smakebuf_r+0x7c>)
 8005fd2:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fd4:	89a3      	ldrh	r3, [r4, #12]
 8005fd6:	6020      	str	r0, [r4, #0]
 8005fd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fdc:	81a3      	strh	r3, [r4, #12]
 8005fde:	9b00      	ldr	r3, [sp, #0]
 8005fe0:	6163      	str	r3, [r4, #20]
 8005fe2:	9b01      	ldr	r3, [sp, #4]
 8005fe4:	6120      	str	r0, [r4, #16]
 8005fe6:	b15b      	cbz	r3, 8006000 <__smakebuf_r+0x74>
 8005fe8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fec:	4630      	mov	r0, r6
 8005fee:	f000 fc85 	bl	80068fc <_isatty_r>
 8005ff2:	b128      	cbz	r0, 8006000 <__smakebuf_r+0x74>
 8005ff4:	89a3      	ldrh	r3, [r4, #12]
 8005ff6:	f023 0303 	bic.w	r3, r3, #3
 8005ffa:	f043 0301 	orr.w	r3, r3, #1
 8005ffe:	81a3      	strh	r3, [r4, #12]
 8006000:	89a0      	ldrh	r0, [r4, #12]
 8006002:	4305      	orrs	r5, r0
 8006004:	81a5      	strh	r5, [r4, #12]
 8006006:	e7cd      	b.n	8005fa4 <__smakebuf_r+0x18>
 8006008:	080057b5 	.word	0x080057b5

0800600c <__malloc_lock>:
 800600c:	4801      	ldr	r0, [pc, #4]	; (8006014 <__malloc_lock+0x8>)
 800600e:	f7ff bcc8 	b.w	80059a2 <__retarget_lock_acquire_recursive>
 8006012:	bf00      	nop
 8006014:	2000452c 	.word	0x2000452c

08006018 <__malloc_unlock>:
 8006018:	4801      	ldr	r0, [pc, #4]	; (8006020 <__malloc_unlock+0x8>)
 800601a:	f7ff bcc3 	b.w	80059a4 <__retarget_lock_release_recursive>
 800601e:	bf00      	nop
 8006020:	2000452c 	.word	0x2000452c

08006024 <__ssputs_r>:
 8006024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006028:	688e      	ldr	r6, [r1, #8]
 800602a:	429e      	cmp	r6, r3
 800602c:	4682      	mov	sl, r0
 800602e:	460c      	mov	r4, r1
 8006030:	4690      	mov	r8, r2
 8006032:	461f      	mov	r7, r3
 8006034:	d838      	bhi.n	80060a8 <__ssputs_r+0x84>
 8006036:	898a      	ldrh	r2, [r1, #12]
 8006038:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800603c:	d032      	beq.n	80060a4 <__ssputs_r+0x80>
 800603e:	6825      	ldr	r5, [r4, #0]
 8006040:	6909      	ldr	r1, [r1, #16]
 8006042:	eba5 0901 	sub.w	r9, r5, r1
 8006046:	6965      	ldr	r5, [r4, #20]
 8006048:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800604c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006050:	3301      	adds	r3, #1
 8006052:	444b      	add	r3, r9
 8006054:	106d      	asrs	r5, r5, #1
 8006056:	429d      	cmp	r5, r3
 8006058:	bf38      	it	cc
 800605a:	461d      	movcc	r5, r3
 800605c:	0553      	lsls	r3, r2, #21
 800605e:	d531      	bpl.n	80060c4 <__ssputs_r+0xa0>
 8006060:	4629      	mov	r1, r5
 8006062:	f7ff fcf7 	bl	8005a54 <_malloc_r>
 8006066:	4606      	mov	r6, r0
 8006068:	b950      	cbnz	r0, 8006080 <__ssputs_r+0x5c>
 800606a:	230c      	movs	r3, #12
 800606c:	f8ca 3000 	str.w	r3, [sl]
 8006070:	89a3      	ldrh	r3, [r4, #12]
 8006072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006076:	81a3      	strh	r3, [r4, #12]
 8006078:	f04f 30ff 	mov.w	r0, #4294967295
 800607c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006080:	6921      	ldr	r1, [r4, #16]
 8006082:	464a      	mov	r2, r9
 8006084:	f000 fc4a 	bl	800691c <memcpy>
 8006088:	89a3      	ldrh	r3, [r4, #12]
 800608a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800608e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006092:	81a3      	strh	r3, [r4, #12]
 8006094:	6126      	str	r6, [r4, #16]
 8006096:	6165      	str	r5, [r4, #20]
 8006098:	444e      	add	r6, r9
 800609a:	eba5 0509 	sub.w	r5, r5, r9
 800609e:	6026      	str	r6, [r4, #0]
 80060a0:	60a5      	str	r5, [r4, #8]
 80060a2:	463e      	mov	r6, r7
 80060a4:	42be      	cmp	r6, r7
 80060a6:	d900      	bls.n	80060aa <__ssputs_r+0x86>
 80060a8:	463e      	mov	r6, r7
 80060aa:	4632      	mov	r2, r6
 80060ac:	6820      	ldr	r0, [r4, #0]
 80060ae:	4641      	mov	r1, r8
 80060b0:	f000 fc42 	bl	8006938 <memmove>
 80060b4:	68a3      	ldr	r3, [r4, #8]
 80060b6:	6822      	ldr	r2, [r4, #0]
 80060b8:	1b9b      	subs	r3, r3, r6
 80060ba:	4432      	add	r2, r6
 80060bc:	60a3      	str	r3, [r4, #8]
 80060be:	6022      	str	r2, [r4, #0]
 80060c0:	2000      	movs	r0, #0
 80060c2:	e7db      	b.n	800607c <__ssputs_r+0x58>
 80060c4:	462a      	mov	r2, r5
 80060c6:	f000 fc51 	bl	800696c <_realloc_r>
 80060ca:	4606      	mov	r6, r0
 80060cc:	2800      	cmp	r0, #0
 80060ce:	d1e1      	bne.n	8006094 <__ssputs_r+0x70>
 80060d0:	6921      	ldr	r1, [r4, #16]
 80060d2:	4650      	mov	r0, sl
 80060d4:	f7ff fc70 	bl	80059b8 <_free_r>
 80060d8:	e7c7      	b.n	800606a <__ssputs_r+0x46>
	...

080060dc <_svfiprintf_r>:
 80060dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e0:	4698      	mov	r8, r3
 80060e2:	898b      	ldrh	r3, [r1, #12]
 80060e4:	061b      	lsls	r3, r3, #24
 80060e6:	b09d      	sub	sp, #116	; 0x74
 80060e8:	4607      	mov	r7, r0
 80060ea:	460d      	mov	r5, r1
 80060ec:	4614      	mov	r4, r2
 80060ee:	d50e      	bpl.n	800610e <_svfiprintf_r+0x32>
 80060f0:	690b      	ldr	r3, [r1, #16]
 80060f2:	b963      	cbnz	r3, 800610e <_svfiprintf_r+0x32>
 80060f4:	2140      	movs	r1, #64	; 0x40
 80060f6:	f7ff fcad 	bl	8005a54 <_malloc_r>
 80060fa:	6028      	str	r0, [r5, #0]
 80060fc:	6128      	str	r0, [r5, #16]
 80060fe:	b920      	cbnz	r0, 800610a <_svfiprintf_r+0x2e>
 8006100:	230c      	movs	r3, #12
 8006102:	603b      	str	r3, [r7, #0]
 8006104:	f04f 30ff 	mov.w	r0, #4294967295
 8006108:	e0d1      	b.n	80062ae <_svfiprintf_r+0x1d2>
 800610a:	2340      	movs	r3, #64	; 0x40
 800610c:	616b      	str	r3, [r5, #20]
 800610e:	2300      	movs	r3, #0
 8006110:	9309      	str	r3, [sp, #36]	; 0x24
 8006112:	2320      	movs	r3, #32
 8006114:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006118:	f8cd 800c 	str.w	r8, [sp, #12]
 800611c:	2330      	movs	r3, #48	; 0x30
 800611e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80062c8 <_svfiprintf_r+0x1ec>
 8006122:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006126:	f04f 0901 	mov.w	r9, #1
 800612a:	4623      	mov	r3, r4
 800612c:	469a      	mov	sl, r3
 800612e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006132:	b10a      	cbz	r2, 8006138 <_svfiprintf_r+0x5c>
 8006134:	2a25      	cmp	r2, #37	; 0x25
 8006136:	d1f9      	bne.n	800612c <_svfiprintf_r+0x50>
 8006138:	ebba 0b04 	subs.w	fp, sl, r4
 800613c:	d00b      	beq.n	8006156 <_svfiprintf_r+0x7a>
 800613e:	465b      	mov	r3, fp
 8006140:	4622      	mov	r2, r4
 8006142:	4629      	mov	r1, r5
 8006144:	4638      	mov	r0, r7
 8006146:	f7ff ff6d 	bl	8006024 <__ssputs_r>
 800614a:	3001      	adds	r0, #1
 800614c:	f000 80aa 	beq.w	80062a4 <_svfiprintf_r+0x1c8>
 8006150:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006152:	445a      	add	r2, fp
 8006154:	9209      	str	r2, [sp, #36]	; 0x24
 8006156:	f89a 3000 	ldrb.w	r3, [sl]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f000 80a2 	beq.w	80062a4 <_svfiprintf_r+0x1c8>
 8006160:	2300      	movs	r3, #0
 8006162:	f04f 32ff 	mov.w	r2, #4294967295
 8006166:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800616a:	f10a 0a01 	add.w	sl, sl, #1
 800616e:	9304      	str	r3, [sp, #16]
 8006170:	9307      	str	r3, [sp, #28]
 8006172:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006176:	931a      	str	r3, [sp, #104]	; 0x68
 8006178:	4654      	mov	r4, sl
 800617a:	2205      	movs	r2, #5
 800617c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006180:	4851      	ldr	r0, [pc, #324]	; (80062c8 <_svfiprintf_r+0x1ec>)
 8006182:	f7f9 fff5 	bl	8000170 <memchr>
 8006186:	9a04      	ldr	r2, [sp, #16]
 8006188:	b9d8      	cbnz	r0, 80061c2 <_svfiprintf_r+0xe6>
 800618a:	06d0      	lsls	r0, r2, #27
 800618c:	bf44      	itt	mi
 800618e:	2320      	movmi	r3, #32
 8006190:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006194:	0711      	lsls	r1, r2, #28
 8006196:	bf44      	itt	mi
 8006198:	232b      	movmi	r3, #43	; 0x2b
 800619a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800619e:	f89a 3000 	ldrb.w	r3, [sl]
 80061a2:	2b2a      	cmp	r3, #42	; 0x2a
 80061a4:	d015      	beq.n	80061d2 <_svfiprintf_r+0xf6>
 80061a6:	9a07      	ldr	r2, [sp, #28]
 80061a8:	4654      	mov	r4, sl
 80061aa:	2000      	movs	r0, #0
 80061ac:	f04f 0c0a 	mov.w	ip, #10
 80061b0:	4621      	mov	r1, r4
 80061b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061b6:	3b30      	subs	r3, #48	; 0x30
 80061b8:	2b09      	cmp	r3, #9
 80061ba:	d94e      	bls.n	800625a <_svfiprintf_r+0x17e>
 80061bc:	b1b0      	cbz	r0, 80061ec <_svfiprintf_r+0x110>
 80061be:	9207      	str	r2, [sp, #28]
 80061c0:	e014      	b.n	80061ec <_svfiprintf_r+0x110>
 80061c2:	eba0 0308 	sub.w	r3, r0, r8
 80061c6:	fa09 f303 	lsl.w	r3, r9, r3
 80061ca:	4313      	orrs	r3, r2
 80061cc:	9304      	str	r3, [sp, #16]
 80061ce:	46a2      	mov	sl, r4
 80061d0:	e7d2      	b.n	8006178 <_svfiprintf_r+0x9c>
 80061d2:	9b03      	ldr	r3, [sp, #12]
 80061d4:	1d19      	adds	r1, r3, #4
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	9103      	str	r1, [sp, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	bfbb      	ittet	lt
 80061de:	425b      	neglt	r3, r3
 80061e0:	f042 0202 	orrlt.w	r2, r2, #2
 80061e4:	9307      	strge	r3, [sp, #28]
 80061e6:	9307      	strlt	r3, [sp, #28]
 80061e8:	bfb8      	it	lt
 80061ea:	9204      	strlt	r2, [sp, #16]
 80061ec:	7823      	ldrb	r3, [r4, #0]
 80061ee:	2b2e      	cmp	r3, #46	; 0x2e
 80061f0:	d10c      	bne.n	800620c <_svfiprintf_r+0x130>
 80061f2:	7863      	ldrb	r3, [r4, #1]
 80061f4:	2b2a      	cmp	r3, #42	; 0x2a
 80061f6:	d135      	bne.n	8006264 <_svfiprintf_r+0x188>
 80061f8:	9b03      	ldr	r3, [sp, #12]
 80061fa:	1d1a      	adds	r2, r3, #4
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	9203      	str	r2, [sp, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	bfb8      	it	lt
 8006204:	f04f 33ff 	movlt.w	r3, #4294967295
 8006208:	3402      	adds	r4, #2
 800620a:	9305      	str	r3, [sp, #20]
 800620c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80062d8 <_svfiprintf_r+0x1fc>
 8006210:	7821      	ldrb	r1, [r4, #0]
 8006212:	2203      	movs	r2, #3
 8006214:	4650      	mov	r0, sl
 8006216:	f7f9 ffab 	bl	8000170 <memchr>
 800621a:	b140      	cbz	r0, 800622e <_svfiprintf_r+0x152>
 800621c:	2340      	movs	r3, #64	; 0x40
 800621e:	eba0 000a 	sub.w	r0, r0, sl
 8006222:	fa03 f000 	lsl.w	r0, r3, r0
 8006226:	9b04      	ldr	r3, [sp, #16]
 8006228:	4303      	orrs	r3, r0
 800622a:	3401      	adds	r4, #1
 800622c:	9304      	str	r3, [sp, #16]
 800622e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006232:	4826      	ldr	r0, [pc, #152]	; (80062cc <_svfiprintf_r+0x1f0>)
 8006234:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006238:	2206      	movs	r2, #6
 800623a:	f7f9 ff99 	bl	8000170 <memchr>
 800623e:	2800      	cmp	r0, #0
 8006240:	d038      	beq.n	80062b4 <_svfiprintf_r+0x1d8>
 8006242:	4b23      	ldr	r3, [pc, #140]	; (80062d0 <_svfiprintf_r+0x1f4>)
 8006244:	bb1b      	cbnz	r3, 800628e <_svfiprintf_r+0x1b2>
 8006246:	9b03      	ldr	r3, [sp, #12]
 8006248:	3307      	adds	r3, #7
 800624a:	f023 0307 	bic.w	r3, r3, #7
 800624e:	3308      	adds	r3, #8
 8006250:	9303      	str	r3, [sp, #12]
 8006252:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006254:	4433      	add	r3, r6
 8006256:	9309      	str	r3, [sp, #36]	; 0x24
 8006258:	e767      	b.n	800612a <_svfiprintf_r+0x4e>
 800625a:	fb0c 3202 	mla	r2, ip, r2, r3
 800625e:	460c      	mov	r4, r1
 8006260:	2001      	movs	r0, #1
 8006262:	e7a5      	b.n	80061b0 <_svfiprintf_r+0xd4>
 8006264:	2300      	movs	r3, #0
 8006266:	3401      	adds	r4, #1
 8006268:	9305      	str	r3, [sp, #20]
 800626a:	4619      	mov	r1, r3
 800626c:	f04f 0c0a 	mov.w	ip, #10
 8006270:	4620      	mov	r0, r4
 8006272:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006276:	3a30      	subs	r2, #48	; 0x30
 8006278:	2a09      	cmp	r2, #9
 800627a:	d903      	bls.n	8006284 <_svfiprintf_r+0x1a8>
 800627c:	2b00      	cmp	r3, #0
 800627e:	d0c5      	beq.n	800620c <_svfiprintf_r+0x130>
 8006280:	9105      	str	r1, [sp, #20]
 8006282:	e7c3      	b.n	800620c <_svfiprintf_r+0x130>
 8006284:	fb0c 2101 	mla	r1, ip, r1, r2
 8006288:	4604      	mov	r4, r0
 800628a:	2301      	movs	r3, #1
 800628c:	e7f0      	b.n	8006270 <_svfiprintf_r+0x194>
 800628e:	ab03      	add	r3, sp, #12
 8006290:	9300      	str	r3, [sp, #0]
 8006292:	462a      	mov	r2, r5
 8006294:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <_svfiprintf_r+0x1f8>)
 8006296:	a904      	add	r1, sp, #16
 8006298:	4638      	mov	r0, r7
 800629a:	f3af 8000 	nop.w
 800629e:	1c42      	adds	r2, r0, #1
 80062a0:	4606      	mov	r6, r0
 80062a2:	d1d6      	bne.n	8006252 <_svfiprintf_r+0x176>
 80062a4:	89ab      	ldrh	r3, [r5, #12]
 80062a6:	065b      	lsls	r3, r3, #25
 80062a8:	f53f af2c 	bmi.w	8006104 <_svfiprintf_r+0x28>
 80062ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80062ae:	b01d      	add	sp, #116	; 0x74
 80062b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062b4:	ab03      	add	r3, sp, #12
 80062b6:	9300      	str	r3, [sp, #0]
 80062b8:	462a      	mov	r2, r5
 80062ba:	4b06      	ldr	r3, [pc, #24]	; (80062d4 <_svfiprintf_r+0x1f8>)
 80062bc:	a904      	add	r1, sp, #16
 80062be:	4638      	mov	r0, r7
 80062c0:	f000 f9d2 	bl	8006668 <_printf_i>
 80062c4:	e7eb      	b.n	800629e <_svfiprintf_r+0x1c2>
 80062c6:	bf00      	nop
 80062c8:	08006f88 	.word	0x08006f88
 80062cc:	08006f92 	.word	0x08006f92
 80062d0:	00000000 	.word	0x00000000
 80062d4:	08006025 	.word	0x08006025
 80062d8:	08006f8e 	.word	0x08006f8e

080062dc <__sfputc_r>:
 80062dc:	6893      	ldr	r3, [r2, #8]
 80062de:	3b01      	subs	r3, #1
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	b410      	push	{r4}
 80062e4:	6093      	str	r3, [r2, #8]
 80062e6:	da07      	bge.n	80062f8 <__sfputc_r+0x1c>
 80062e8:	6994      	ldr	r4, [r2, #24]
 80062ea:	42a3      	cmp	r3, r4
 80062ec:	db01      	blt.n	80062f2 <__sfputc_r+0x16>
 80062ee:	290a      	cmp	r1, #10
 80062f0:	d102      	bne.n	80062f8 <__sfputc_r+0x1c>
 80062f2:	bc10      	pop	{r4}
 80062f4:	f7ff bd32 	b.w	8005d5c <__swbuf_r>
 80062f8:	6813      	ldr	r3, [r2, #0]
 80062fa:	1c58      	adds	r0, r3, #1
 80062fc:	6010      	str	r0, [r2, #0]
 80062fe:	7019      	strb	r1, [r3, #0]
 8006300:	4608      	mov	r0, r1
 8006302:	bc10      	pop	{r4}
 8006304:	4770      	bx	lr

08006306 <__sfputs_r>:
 8006306:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006308:	4606      	mov	r6, r0
 800630a:	460f      	mov	r7, r1
 800630c:	4614      	mov	r4, r2
 800630e:	18d5      	adds	r5, r2, r3
 8006310:	42ac      	cmp	r4, r5
 8006312:	d101      	bne.n	8006318 <__sfputs_r+0x12>
 8006314:	2000      	movs	r0, #0
 8006316:	e007      	b.n	8006328 <__sfputs_r+0x22>
 8006318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800631c:	463a      	mov	r2, r7
 800631e:	4630      	mov	r0, r6
 8006320:	f7ff ffdc 	bl	80062dc <__sfputc_r>
 8006324:	1c43      	adds	r3, r0, #1
 8006326:	d1f3      	bne.n	8006310 <__sfputs_r+0xa>
 8006328:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800632c <_vfiprintf_r>:
 800632c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006330:	460d      	mov	r5, r1
 8006332:	b09d      	sub	sp, #116	; 0x74
 8006334:	4614      	mov	r4, r2
 8006336:	4698      	mov	r8, r3
 8006338:	4606      	mov	r6, r0
 800633a:	b118      	cbz	r0, 8006344 <_vfiprintf_r+0x18>
 800633c:	6983      	ldr	r3, [r0, #24]
 800633e:	b90b      	cbnz	r3, 8006344 <_vfiprintf_r+0x18>
 8006340:	f7ff fa6c 	bl	800581c <__sinit>
 8006344:	4b89      	ldr	r3, [pc, #548]	; (800656c <_vfiprintf_r+0x240>)
 8006346:	429d      	cmp	r5, r3
 8006348:	d11b      	bne.n	8006382 <_vfiprintf_r+0x56>
 800634a:	6875      	ldr	r5, [r6, #4]
 800634c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800634e:	07d9      	lsls	r1, r3, #31
 8006350:	d405      	bmi.n	800635e <_vfiprintf_r+0x32>
 8006352:	89ab      	ldrh	r3, [r5, #12]
 8006354:	059a      	lsls	r2, r3, #22
 8006356:	d402      	bmi.n	800635e <_vfiprintf_r+0x32>
 8006358:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800635a:	f7ff fb22 	bl	80059a2 <__retarget_lock_acquire_recursive>
 800635e:	89ab      	ldrh	r3, [r5, #12]
 8006360:	071b      	lsls	r3, r3, #28
 8006362:	d501      	bpl.n	8006368 <_vfiprintf_r+0x3c>
 8006364:	692b      	ldr	r3, [r5, #16]
 8006366:	b9eb      	cbnz	r3, 80063a4 <_vfiprintf_r+0x78>
 8006368:	4629      	mov	r1, r5
 800636a:	4630      	mov	r0, r6
 800636c:	f7ff fd5a 	bl	8005e24 <__swsetup_r>
 8006370:	b1c0      	cbz	r0, 80063a4 <_vfiprintf_r+0x78>
 8006372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006374:	07dc      	lsls	r4, r3, #31
 8006376:	d50e      	bpl.n	8006396 <_vfiprintf_r+0x6a>
 8006378:	f04f 30ff 	mov.w	r0, #4294967295
 800637c:	b01d      	add	sp, #116	; 0x74
 800637e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006382:	4b7b      	ldr	r3, [pc, #492]	; (8006570 <_vfiprintf_r+0x244>)
 8006384:	429d      	cmp	r5, r3
 8006386:	d101      	bne.n	800638c <_vfiprintf_r+0x60>
 8006388:	68b5      	ldr	r5, [r6, #8]
 800638a:	e7df      	b.n	800634c <_vfiprintf_r+0x20>
 800638c:	4b79      	ldr	r3, [pc, #484]	; (8006574 <_vfiprintf_r+0x248>)
 800638e:	429d      	cmp	r5, r3
 8006390:	bf08      	it	eq
 8006392:	68f5      	ldreq	r5, [r6, #12]
 8006394:	e7da      	b.n	800634c <_vfiprintf_r+0x20>
 8006396:	89ab      	ldrh	r3, [r5, #12]
 8006398:	0598      	lsls	r0, r3, #22
 800639a:	d4ed      	bmi.n	8006378 <_vfiprintf_r+0x4c>
 800639c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800639e:	f7ff fb01 	bl	80059a4 <__retarget_lock_release_recursive>
 80063a2:	e7e9      	b.n	8006378 <_vfiprintf_r+0x4c>
 80063a4:	2300      	movs	r3, #0
 80063a6:	9309      	str	r3, [sp, #36]	; 0x24
 80063a8:	2320      	movs	r3, #32
 80063aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80063b2:	2330      	movs	r3, #48	; 0x30
 80063b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006578 <_vfiprintf_r+0x24c>
 80063b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063bc:	f04f 0901 	mov.w	r9, #1
 80063c0:	4623      	mov	r3, r4
 80063c2:	469a      	mov	sl, r3
 80063c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063c8:	b10a      	cbz	r2, 80063ce <_vfiprintf_r+0xa2>
 80063ca:	2a25      	cmp	r2, #37	; 0x25
 80063cc:	d1f9      	bne.n	80063c2 <_vfiprintf_r+0x96>
 80063ce:	ebba 0b04 	subs.w	fp, sl, r4
 80063d2:	d00b      	beq.n	80063ec <_vfiprintf_r+0xc0>
 80063d4:	465b      	mov	r3, fp
 80063d6:	4622      	mov	r2, r4
 80063d8:	4629      	mov	r1, r5
 80063da:	4630      	mov	r0, r6
 80063dc:	f7ff ff93 	bl	8006306 <__sfputs_r>
 80063e0:	3001      	adds	r0, #1
 80063e2:	f000 80aa 	beq.w	800653a <_vfiprintf_r+0x20e>
 80063e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80063e8:	445a      	add	r2, fp
 80063ea:	9209      	str	r2, [sp, #36]	; 0x24
 80063ec:	f89a 3000 	ldrb.w	r3, [sl]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 80a2 	beq.w	800653a <_vfiprintf_r+0x20e>
 80063f6:	2300      	movs	r3, #0
 80063f8:	f04f 32ff 	mov.w	r2, #4294967295
 80063fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006400:	f10a 0a01 	add.w	sl, sl, #1
 8006404:	9304      	str	r3, [sp, #16]
 8006406:	9307      	str	r3, [sp, #28]
 8006408:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800640c:	931a      	str	r3, [sp, #104]	; 0x68
 800640e:	4654      	mov	r4, sl
 8006410:	2205      	movs	r2, #5
 8006412:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006416:	4858      	ldr	r0, [pc, #352]	; (8006578 <_vfiprintf_r+0x24c>)
 8006418:	f7f9 feaa 	bl	8000170 <memchr>
 800641c:	9a04      	ldr	r2, [sp, #16]
 800641e:	b9d8      	cbnz	r0, 8006458 <_vfiprintf_r+0x12c>
 8006420:	06d1      	lsls	r1, r2, #27
 8006422:	bf44      	itt	mi
 8006424:	2320      	movmi	r3, #32
 8006426:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800642a:	0713      	lsls	r3, r2, #28
 800642c:	bf44      	itt	mi
 800642e:	232b      	movmi	r3, #43	; 0x2b
 8006430:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006434:	f89a 3000 	ldrb.w	r3, [sl]
 8006438:	2b2a      	cmp	r3, #42	; 0x2a
 800643a:	d015      	beq.n	8006468 <_vfiprintf_r+0x13c>
 800643c:	9a07      	ldr	r2, [sp, #28]
 800643e:	4654      	mov	r4, sl
 8006440:	2000      	movs	r0, #0
 8006442:	f04f 0c0a 	mov.w	ip, #10
 8006446:	4621      	mov	r1, r4
 8006448:	f811 3b01 	ldrb.w	r3, [r1], #1
 800644c:	3b30      	subs	r3, #48	; 0x30
 800644e:	2b09      	cmp	r3, #9
 8006450:	d94e      	bls.n	80064f0 <_vfiprintf_r+0x1c4>
 8006452:	b1b0      	cbz	r0, 8006482 <_vfiprintf_r+0x156>
 8006454:	9207      	str	r2, [sp, #28]
 8006456:	e014      	b.n	8006482 <_vfiprintf_r+0x156>
 8006458:	eba0 0308 	sub.w	r3, r0, r8
 800645c:	fa09 f303 	lsl.w	r3, r9, r3
 8006460:	4313      	orrs	r3, r2
 8006462:	9304      	str	r3, [sp, #16]
 8006464:	46a2      	mov	sl, r4
 8006466:	e7d2      	b.n	800640e <_vfiprintf_r+0xe2>
 8006468:	9b03      	ldr	r3, [sp, #12]
 800646a:	1d19      	adds	r1, r3, #4
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	9103      	str	r1, [sp, #12]
 8006470:	2b00      	cmp	r3, #0
 8006472:	bfbb      	ittet	lt
 8006474:	425b      	neglt	r3, r3
 8006476:	f042 0202 	orrlt.w	r2, r2, #2
 800647a:	9307      	strge	r3, [sp, #28]
 800647c:	9307      	strlt	r3, [sp, #28]
 800647e:	bfb8      	it	lt
 8006480:	9204      	strlt	r2, [sp, #16]
 8006482:	7823      	ldrb	r3, [r4, #0]
 8006484:	2b2e      	cmp	r3, #46	; 0x2e
 8006486:	d10c      	bne.n	80064a2 <_vfiprintf_r+0x176>
 8006488:	7863      	ldrb	r3, [r4, #1]
 800648a:	2b2a      	cmp	r3, #42	; 0x2a
 800648c:	d135      	bne.n	80064fa <_vfiprintf_r+0x1ce>
 800648e:	9b03      	ldr	r3, [sp, #12]
 8006490:	1d1a      	adds	r2, r3, #4
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	9203      	str	r2, [sp, #12]
 8006496:	2b00      	cmp	r3, #0
 8006498:	bfb8      	it	lt
 800649a:	f04f 33ff 	movlt.w	r3, #4294967295
 800649e:	3402      	adds	r4, #2
 80064a0:	9305      	str	r3, [sp, #20]
 80064a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006588 <_vfiprintf_r+0x25c>
 80064a6:	7821      	ldrb	r1, [r4, #0]
 80064a8:	2203      	movs	r2, #3
 80064aa:	4650      	mov	r0, sl
 80064ac:	f7f9 fe60 	bl	8000170 <memchr>
 80064b0:	b140      	cbz	r0, 80064c4 <_vfiprintf_r+0x198>
 80064b2:	2340      	movs	r3, #64	; 0x40
 80064b4:	eba0 000a 	sub.w	r0, r0, sl
 80064b8:	fa03 f000 	lsl.w	r0, r3, r0
 80064bc:	9b04      	ldr	r3, [sp, #16]
 80064be:	4303      	orrs	r3, r0
 80064c0:	3401      	adds	r4, #1
 80064c2:	9304      	str	r3, [sp, #16]
 80064c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064c8:	482c      	ldr	r0, [pc, #176]	; (800657c <_vfiprintf_r+0x250>)
 80064ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064ce:	2206      	movs	r2, #6
 80064d0:	f7f9 fe4e 	bl	8000170 <memchr>
 80064d4:	2800      	cmp	r0, #0
 80064d6:	d03f      	beq.n	8006558 <_vfiprintf_r+0x22c>
 80064d8:	4b29      	ldr	r3, [pc, #164]	; (8006580 <_vfiprintf_r+0x254>)
 80064da:	bb1b      	cbnz	r3, 8006524 <_vfiprintf_r+0x1f8>
 80064dc:	9b03      	ldr	r3, [sp, #12]
 80064de:	3307      	adds	r3, #7
 80064e0:	f023 0307 	bic.w	r3, r3, #7
 80064e4:	3308      	adds	r3, #8
 80064e6:	9303      	str	r3, [sp, #12]
 80064e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ea:	443b      	add	r3, r7
 80064ec:	9309      	str	r3, [sp, #36]	; 0x24
 80064ee:	e767      	b.n	80063c0 <_vfiprintf_r+0x94>
 80064f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80064f4:	460c      	mov	r4, r1
 80064f6:	2001      	movs	r0, #1
 80064f8:	e7a5      	b.n	8006446 <_vfiprintf_r+0x11a>
 80064fa:	2300      	movs	r3, #0
 80064fc:	3401      	adds	r4, #1
 80064fe:	9305      	str	r3, [sp, #20]
 8006500:	4619      	mov	r1, r3
 8006502:	f04f 0c0a 	mov.w	ip, #10
 8006506:	4620      	mov	r0, r4
 8006508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800650c:	3a30      	subs	r2, #48	; 0x30
 800650e:	2a09      	cmp	r2, #9
 8006510:	d903      	bls.n	800651a <_vfiprintf_r+0x1ee>
 8006512:	2b00      	cmp	r3, #0
 8006514:	d0c5      	beq.n	80064a2 <_vfiprintf_r+0x176>
 8006516:	9105      	str	r1, [sp, #20]
 8006518:	e7c3      	b.n	80064a2 <_vfiprintf_r+0x176>
 800651a:	fb0c 2101 	mla	r1, ip, r1, r2
 800651e:	4604      	mov	r4, r0
 8006520:	2301      	movs	r3, #1
 8006522:	e7f0      	b.n	8006506 <_vfiprintf_r+0x1da>
 8006524:	ab03      	add	r3, sp, #12
 8006526:	9300      	str	r3, [sp, #0]
 8006528:	462a      	mov	r2, r5
 800652a:	4b16      	ldr	r3, [pc, #88]	; (8006584 <_vfiprintf_r+0x258>)
 800652c:	a904      	add	r1, sp, #16
 800652e:	4630      	mov	r0, r6
 8006530:	f3af 8000 	nop.w
 8006534:	4607      	mov	r7, r0
 8006536:	1c78      	adds	r0, r7, #1
 8006538:	d1d6      	bne.n	80064e8 <_vfiprintf_r+0x1bc>
 800653a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800653c:	07d9      	lsls	r1, r3, #31
 800653e:	d405      	bmi.n	800654c <_vfiprintf_r+0x220>
 8006540:	89ab      	ldrh	r3, [r5, #12]
 8006542:	059a      	lsls	r2, r3, #22
 8006544:	d402      	bmi.n	800654c <_vfiprintf_r+0x220>
 8006546:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006548:	f7ff fa2c 	bl	80059a4 <__retarget_lock_release_recursive>
 800654c:	89ab      	ldrh	r3, [r5, #12]
 800654e:	065b      	lsls	r3, r3, #25
 8006550:	f53f af12 	bmi.w	8006378 <_vfiprintf_r+0x4c>
 8006554:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006556:	e711      	b.n	800637c <_vfiprintf_r+0x50>
 8006558:	ab03      	add	r3, sp, #12
 800655a:	9300      	str	r3, [sp, #0]
 800655c:	462a      	mov	r2, r5
 800655e:	4b09      	ldr	r3, [pc, #36]	; (8006584 <_vfiprintf_r+0x258>)
 8006560:	a904      	add	r1, sp, #16
 8006562:	4630      	mov	r0, r6
 8006564:	f000 f880 	bl	8006668 <_printf_i>
 8006568:	e7e4      	b.n	8006534 <_vfiprintf_r+0x208>
 800656a:	bf00      	nop
 800656c:	08006f44 	.word	0x08006f44
 8006570:	08006f64 	.word	0x08006f64
 8006574:	08006f24 	.word	0x08006f24
 8006578:	08006f88 	.word	0x08006f88
 800657c:	08006f92 	.word	0x08006f92
 8006580:	00000000 	.word	0x00000000
 8006584:	08006307 	.word	0x08006307
 8006588:	08006f8e 	.word	0x08006f8e

0800658c <_printf_common>:
 800658c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006590:	4616      	mov	r6, r2
 8006592:	4699      	mov	r9, r3
 8006594:	688a      	ldr	r2, [r1, #8]
 8006596:	690b      	ldr	r3, [r1, #16]
 8006598:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800659c:	4293      	cmp	r3, r2
 800659e:	bfb8      	it	lt
 80065a0:	4613      	movlt	r3, r2
 80065a2:	6033      	str	r3, [r6, #0]
 80065a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80065a8:	4607      	mov	r7, r0
 80065aa:	460c      	mov	r4, r1
 80065ac:	b10a      	cbz	r2, 80065b2 <_printf_common+0x26>
 80065ae:	3301      	adds	r3, #1
 80065b0:	6033      	str	r3, [r6, #0]
 80065b2:	6823      	ldr	r3, [r4, #0]
 80065b4:	0699      	lsls	r1, r3, #26
 80065b6:	bf42      	ittt	mi
 80065b8:	6833      	ldrmi	r3, [r6, #0]
 80065ba:	3302      	addmi	r3, #2
 80065bc:	6033      	strmi	r3, [r6, #0]
 80065be:	6825      	ldr	r5, [r4, #0]
 80065c0:	f015 0506 	ands.w	r5, r5, #6
 80065c4:	d106      	bne.n	80065d4 <_printf_common+0x48>
 80065c6:	f104 0a19 	add.w	sl, r4, #25
 80065ca:	68e3      	ldr	r3, [r4, #12]
 80065cc:	6832      	ldr	r2, [r6, #0]
 80065ce:	1a9b      	subs	r3, r3, r2
 80065d0:	42ab      	cmp	r3, r5
 80065d2:	dc26      	bgt.n	8006622 <_printf_common+0x96>
 80065d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80065d8:	1e13      	subs	r3, r2, #0
 80065da:	6822      	ldr	r2, [r4, #0]
 80065dc:	bf18      	it	ne
 80065de:	2301      	movne	r3, #1
 80065e0:	0692      	lsls	r2, r2, #26
 80065e2:	d42b      	bmi.n	800663c <_printf_common+0xb0>
 80065e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80065e8:	4649      	mov	r1, r9
 80065ea:	4638      	mov	r0, r7
 80065ec:	47c0      	blx	r8
 80065ee:	3001      	adds	r0, #1
 80065f0:	d01e      	beq.n	8006630 <_printf_common+0xa4>
 80065f2:	6823      	ldr	r3, [r4, #0]
 80065f4:	68e5      	ldr	r5, [r4, #12]
 80065f6:	6832      	ldr	r2, [r6, #0]
 80065f8:	f003 0306 	and.w	r3, r3, #6
 80065fc:	2b04      	cmp	r3, #4
 80065fe:	bf08      	it	eq
 8006600:	1aad      	subeq	r5, r5, r2
 8006602:	68a3      	ldr	r3, [r4, #8]
 8006604:	6922      	ldr	r2, [r4, #16]
 8006606:	bf0c      	ite	eq
 8006608:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800660c:	2500      	movne	r5, #0
 800660e:	4293      	cmp	r3, r2
 8006610:	bfc4      	itt	gt
 8006612:	1a9b      	subgt	r3, r3, r2
 8006614:	18ed      	addgt	r5, r5, r3
 8006616:	2600      	movs	r6, #0
 8006618:	341a      	adds	r4, #26
 800661a:	42b5      	cmp	r5, r6
 800661c:	d11a      	bne.n	8006654 <_printf_common+0xc8>
 800661e:	2000      	movs	r0, #0
 8006620:	e008      	b.n	8006634 <_printf_common+0xa8>
 8006622:	2301      	movs	r3, #1
 8006624:	4652      	mov	r2, sl
 8006626:	4649      	mov	r1, r9
 8006628:	4638      	mov	r0, r7
 800662a:	47c0      	blx	r8
 800662c:	3001      	adds	r0, #1
 800662e:	d103      	bne.n	8006638 <_printf_common+0xac>
 8006630:	f04f 30ff 	mov.w	r0, #4294967295
 8006634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006638:	3501      	adds	r5, #1
 800663a:	e7c6      	b.n	80065ca <_printf_common+0x3e>
 800663c:	18e1      	adds	r1, r4, r3
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	2030      	movs	r0, #48	; 0x30
 8006642:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006646:	4422      	add	r2, r4
 8006648:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800664c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006650:	3302      	adds	r3, #2
 8006652:	e7c7      	b.n	80065e4 <_printf_common+0x58>
 8006654:	2301      	movs	r3, #1
 8006656:	4622      	mov	r2, r4
 8006658:	4649      	mov	r1, r9
 800665a:	4638      	mov	r0, r7
 800665c:	47c0      	blx	r8
 800665e:	3001      	adds	r0, #1
 8006660:	d0e6      	beq.n	8006630 <_printf_common+0xa4>
 8006662:	3601      	adds	r6, #1
 8006664:	e7d9      	b.n	800661a <_printf_common+0x8e>
	...

08006668 <_printf_i>:
 8006668:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800666c:	460c      	mov	r4, r1
 800666e:	4691      	mov	r9, r2
 8006670:	7e27      	ldrb	r7, [r4, #24]
 8006672:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006674:	2f78      	cmp	r7, #120	; 0x78
 8006676:	4680      	mov	r8, r0
 8006678:	469a      	mov	sl, r3
 800667a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800667e:	d807      	bhi.n	8006690 <_printf_i+0x28>
 8006680:	2f62      	cmp	r7, #98	; 0x62
 8006682:	d80a      	bhi.n	800669a <_printf_i+0x32>
 8006684:	2f00      	cmp	r7, #0
 8006686:	f000 80d8 	beq.w	800683a <_printf_i+0x1d2>
 800668a:	2f58      	cmp	r7, #88	; 0x58
 800668c:	f000 80a3 	beq.w	80067d6 <_printf_i+0x16e>
 8006690:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006694:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006698:	e03a      	b.n	8006710 <_printf_i+0xa8>
 800669a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800669e:	2b15      	cmp	r3, #21
 80066a0:	d8f6      	bhi.n	8006690 <_printf_i+0x28>
 80066a2:	a001      	add	r0, pc, #4	; (adr r0, 80066a8 <_printf_i+0x40>)
 80066a4:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80066a8:	08006701 	.word	0x08006701
 80066ac:	08006715 	.word	0x08006715
 80066b0:	08006691 	.word	0x08006691
 80066b4:	08006691 	.word	0x08006691
 80066b8:	08006691 	.word	0x08006691
 80066bc:	08006691 	.word	0x08006691
 80066c0:	08006715 	.word	0x08006715
 80066c4:	08006691 	.word	0x08006691
 80066c8:	08006691 	.word	0x08006691
 80066cc:	08006691 	.word	0x08006691
 80066d0:	08006691 	.word	0x08006691
 80066d4:	08006821 	.word	0x08006821
 80066d8:	08006745 	.word	0x08006745
 80066dc:	08006803 	.word	0x08006803
 80066e0:	08006691 	.word	0x08006691
 80066e4:	08006691 	.word	0x08006691
 80066e8:	08006843 	.word	0x08006843
 80066ec:	08006691 	.word	0x08006691
 80066f0:	08006745 	.word	0x08006745
 80066f4:	08006691 	.word	0x08006691
 80066f8:	08006691 	.word	0x08006691
 80066fc:	0800680b 	.word	0x0800680b
 8006700:	680b      	ldr	r3, [r1, #0]
 8006702:	1d1a      	adds	r2, r3, #4
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	600a      	str	r2, [r1, #0]
 8006708:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800670c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006710:	2301      	movs	r3, #1
 8006712:	e0a3      	b.n	800685c <_printf_i+0x1f4>
 8006714:	6825      	ldr	r5, [r4, #0]
 8006716:	6808      	ldr	r0, [r1, #0]
 8006718:	062e      	lsls	r6, r5, #24
 800671a:	f100 0304 	add.w	r3, r0, #4
 800671e:	d50a      	bpl.n	8006736 <_printf_i+0xce>
 8006720:	6805      	ldr	r5, [r0, #0]
 8006722:	600b      	str	r3, [r1, #0]
 8006724:	2d00      	cmp	r5, #0
 8006726:	da03      	bge.n	8006730 <_printf_i+0xc8>
 8006728:	232d      	movs	r3, #45	; 0x2d
 800672a:	426d      	negs	r5, r5
 800672c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006730:	485e      	ldr	r0, [pc, #376]	; (80068ac <_printf_i+0x244>)
 8006732:	230a      	movs	r3, #10
 8006734:	e019      	b.n	800676a <_printf_i+0x102>
 8006736:	f015 0f40 	tst.w	r5, #64	; 0x40
 800673a:	6805      	ldr	r5, [r0, #0]
 800673c:	600b      	str	r3, [r1, #0]
 800673e:	bf18      	it	ne
 8006740:	b22d      	sxthne	r5, r5
 8006742:	e7ef      	b.n	8006724 <_printf_i+0xbc>
 8006744:	680b      	ldr	r3, [r1, #0]
 8006746:	6825      	ldr	r5, [r4, #0]
 8006748:	1d18      	adds	r0, r3, #4
 800674a:	6008      	str	r0, [r1, #0]
 800674c:	0628      	lsls	r0, r5, #24
 800674e:	d501      	bpl.n	8006754 <_printf_i+0xec>
 8006750:	681d      	ldr	r5, [r3, #0]
 8006752:	e002      	b.n	800675a <_printf_i+0xf2>
 8006754:	0669      	lsls	r1, r5, #25
 8006756:	d5fb      	bpl.n	8006750 <_printf_i+0xe8>
 8006758:	881d      	ldrh	r5, [r3, #0]
 800675a:	4854      	ldr	r0, [pc, #336]	; (80068ac <_printf_i+0x244>)
 800675c:	2f6f      	cmp	r7, #111	; 0x6f
 800675e:	bf0c      	ite	eq
 8006760:	2308      	moveq	r3, #8
 8006762:	230a      	movne	r3, #10
 8006764:	2100      	movs	r1, #0
 8006766:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800676a:	6866      	ldr	r6, [r4, #4]
 800676c:	60a6      	str	r6, [r4, #8]
 800676e:	2e00      	cmp	r6, #0
 8006770:	bfa2      	ittt	ge
 8006772:	6821      	ldrge	r1, [r4, #0]
 8006774:	f021 0104 	bicge.w	r1, r1, #4
 8006778:	6021      	strge	r1, [r4, #0]
 800677a:	b90d      	cbnz	r5, 8006780 <_printf_i+0x118>
 800677c:	2e00      	cmp	r6, #0
 800677e:	d04d      	beq.n	800681c <_printf_i+0x1b4>
 8006780:	4616      	mov	r6, r2
 8006782:	fbb5 f1f3 	udiv	r1, r5, r3
 8006786:	fb03 5711 	mls	r7, r3, r1, r5
 800678a:	5dc7      	ldrb	r7, [r0, r7]
 800678c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006790:	462f      	mov	r7, r5
 8006792:	42bb      	cmp	r3, r7
 8006794:	460d      	mov	r5, r1
 8006796:	d9f4      	bls.n	8006782 <_printf_i+0x11a>
 8006798:	2b08      	cmp	r3, #8
 800679a:	d10b      	bne.n	80067b4 <_printf_i+0x14c>
 800679c:	6823      	ldr	r3, [r4, #0]
 800679e:	07df      	lsls	r7, r3, #31
 80067a0:	d508      	bpl.n	80067b4 <_printf_i+0x14c>
 80067a2:	6923      	ldr	r3, [r4, #16]
 80067a4:	6861      	ldr	r1, [r4, #4]
 80067a6:	4299      	cmp	r1, r3
 80067a8:	bfde      	ittt	le
 80067aa:	2330      	movle	r3, #48	; 0x30
 80067ac:	f806 3c01 	strble.w	r3, [r6, #-1]
 80067b0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80067b4:	1b92      	subs	r2, r2, r6
 80067b6:	6122      	str	r2, [r4, #16]
 80067b8:	f8cd a000 	str.w	sl, [sp]
 80067bc:	464b      	mov	r3, r9
 80067be:	aa03      	add	r2, sp, #12
 80067c0:	4621      	mov	r1, r4
 80067c2:	4640      	mov	r0, r8
 80067c4:	f7ff fee2 	bl	800658c <_printf_common>
 80067c8:	3001      	adds	r0, #1
 80067ca:	d14c      	bne.n	8006866 <_printf_i+0x1fe>
 80067cc:	f04f 30ff 	mov.w	r0, #4294967295
 80067d0:	b004      	add	sp, #16
 80067d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067d6:	4835      	ldr	r0, [pc, #212]	; (80068ac <_printf_i+0x244>)
 80067d8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80067dc:	6823      	ldr	r3, [r4, #0]
 80067de:	680e      	ldr	r6, [r1, #0]
 80067e0:	061f      	lsls	r7, r3, #24
 80067e2:	f856 5b04 	ldr.w	r5, [r6], #4
 80067e6:	600e      	str	r6, [r1, #0]
 80067e8:	d514      	bpl.n	8006814 <_printf_i+0x1ac>
 80067ea:	07d9      	lsls	r1, r3, #31
 80067ec:	bf44      	itt	mi
 80067ee:	f043 0320 	orrmi.w	r3, r3, #32
 80067f2:	6023      	strmi	r3, [r4, #0]
 80067f4:	b91d      	cbnz	r5, 80067fe <_printf_i+0x196>
 80067f6:	6823      	ldr	r3, [r4, #0]
 80067f8:	f023 0320 	bic.w	r3, r3, #32
 80067fc:	6023      	str	r3, [r4, #0]
 80067fe:	2310      	movs	r3, #16
 8006800:	e7b0      	b.n	8006764 <_printf_i+0xfc>
 8006802:	6823      	ldr	r3, [r4, #0]
 8006804:	f043 0320 	orr.w	r3, r3, #32
 8006808:	6023      	str	r3, [r4, #0]
 800680a:	2378      	movs	r3, #120	; 0x78
 800680c:	4828      	ldr	r0, [pc, #160]	; (80068b0 <_printf_i+0x248>)
 800680e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006812:	e7e3      	b.n	80067dc <_printf_i+0x174>
 8006814:	065e      	lsls	r6, r3, #25
 8006816:	bf48      	it	mi
 8006818:	b2ad      	uxthmi	r5, r5
 800681a:	e7e6      	b.n	80067ea <_printf_i+0x182>
 800681c:	4616      	mov	r6, r2
 800681e:	e7bb      	b.n	8006798 <_printf_i+0x130>
 8006820:	680b      	ldr	r3, [r1, #0]
 8006822:	6826      	ldr	r6, [r4, #0]
 8006824:	6960      	ldr	r0, [r4, #20]
 8006826:	1d1d      	adds	r5, r3, #4
 8006828:	600d      	str	r5, [r1, #0]
 800682a:	0635      	lsls	r5, r6, #24
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	d501      	bpl.n	8006834 <_printf_i+0x1cc>
 8006830:	6018      	str	r0, [r3, #0]
 8006832:	e002      	b.n	800683a <_printf_i+0x1d2>
 8006834:	0671      	lsls	r1, r6, #25
 8006836:	d5fb      	bpl.n	8006830 <_printf_i+0x1c8>
 8006838:	8018      	strh	r0, [r3, #0]
 800683a:	2300      	movs	r3, #0
 800683c:	6123      	str	r3, [r4, #16]
 800683e:	4616      	mov	r6, r2
 8006840:	e7ba      	b.n	80067b8 <_printf_i+0x150>
 8006842:	680b      	ldr	r3, [r1, #0]
 8006844:	1d1a      	adds	r2, r3, #4
 8006846:	600a      	str	r2, [r1, #0]
 8006848:	681e      	ldr	r6, [r3, #0]
 800684a:	6862      	ldr	r2, [r4, #4]
 800684c:	2100      	movs	r1, #0
 800684e:	4630      	mov	r0, r6
 8006850:	f7f9 fc8e 	bl	8000170 <memchr>
 8006854:	b108      	cbz	r0, 800685a <_printf_i+0x1f2>
 8006856:	1b80      	subs	r0, r0, r6
 8006858:	6060      	str	r0, [r4, #4]
 800685a:	6863      	ldr	r3, [r4, #4]
 800685c:	6123      	str	r3, [r4, #16]
 800685e:	2300      	movs	r3, #0
 8006860:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006864:	e7a8      	b.n	80067b8 <_printf_i+0x150>
 8006866:	6923      	ldr	r3, [r4, #16]
 8006868:	4632      	mov	r2, r6
 800686a:	4649      	mov	r1, r9
 800686c:	4640      	mov	r0, r8
 800686e:	47d0      	blx	sl
 8006870:	3001      	adds	r0, #1
 8006872:	d0ab      	beq.n	80067cc <_printf_i+0x164>
 8006874:	6823      	ldr	r3, [r4, #0]
 8006876:	079b      	lsls	r3, r3, #30
 8006878:	d413      	bmi.n	80068a2 <_printf_i+0x23a>
 800687a:	68e0      	ldr	r0, [r4, #12]
 800687c:	9b03      	ldr	r3, [sp, #12]
 800687e:	4298      	cmp	r0, r3
 8006880:	bfb8      	it	lt
 8006882:	4618      	movlt	r0, r3
 8006884:	e7a4      	b.n	80067d0 <_printf_i+0x168>
 8006886:	2301      	movs	r3, #1
 8006888:	4632      	mov	r2, r6
 800688a:	4649      	mov	r1, r9
 800688c:	4640      	mov	r0, r8
 800688e:	47d0      	blx	sl
 8006890:	3001      	adds	r0, #1
 8006892:	d09b      	beq.n	80067cc <_printf_i+0x164>
 8006894:	3501      	adds	r5, #1
 8006896:	68e3      	ldr	r3, [r4, #12]
 8006898:	9903      	ldr	r1, [sp, #12]
 800689a:	1a5b      	subs	r3, r3, r1
 800689c:	42ab      	cmp	r3, r5
 800689e:	dcf2      	bgt.n	8006886 <_printf_i+0x21e>
 80068a0:	e7eb      	b.n	800687a <_printf_i+0x212>
 80068a2:	2500      	movs	r5, #0
 80068a4:	f104 0619 	add.w	r6, r4, #25
 80068a8:	e7f5      	b.n	8006896 <_printf_i+0x22e>
 80068aa:	bf00      	nop
 80068ac:	08006f99 	.word	0x08006f99
 80068b0:	08006faa 	.word	0x08006faa

080068b4 <_read_r>:
 80068b4:	b538      	push	{r3, r4, r5, lr}
 80068b6:	4d07      	ldr	r5, [pc, #28]	; (80068d4 <_read_r+0x20>)
 80068b8:	4604      	mov	r4, r0
 80068ba:	4608      	mov	r0, r1
 80068bc:	4611      	mov	r1, r2
 80068be:	2200      	movs	r2, #0
 80068c0:	602a      	str	r2, [r5, #0]
 80068c2:	461a      	mov	r2, r3
 80068c4:	f7fe fdde 	bl	8005484 <_read>
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	d102      	bne.n	80068d2 <_read_r+0x1e>
 80068cc:	682b      	ldr	r3, [r5, #0]
 80068ce:	b103      	cbz	r3, 80068d2 <_read_r+0x1e>
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	bd38      	pop	{r3, r4, r5, pc}
 80068d4:	20004534 	.word	0x20004534

080068d8 <_fstat_r>:
 80068d8:	b538      	push	{r3, r4, r5, lr}
 80068da:	4d07      	ldr	r5, [pc, #28]	; (80068f8 <_fstat_r+0x20>)
 80068dc:	2300      	movs	r3, #0
 80068de:	4604      	mov	r4, r0
 80068e0:	4608      	mov	r0, r1
 80068e2:	4611      	mov	r1, r2
 80068e4:	602b      	str	r3, [r5, #0]
 80068e6:	f7fe fdf8 	bl	80054da <_fstat>
 80068ea:	1c43      	adds	r3, r0, #1
 80068ec:	d102      	bne.n	80068f4 <_fstat_r+0x1c>
 80068ee:	682b      	ldr	r3, [r5, #0]
 80068f0:	b103      	cbz	r3, 80068f4 <_fstat_r+0x1c>
 80068f2:	6023      	str	r3, [r4, #0]
 80068f4:	bd38      	pop	{r3, r4, r5, pc}
 80068f6:	bf00      	nop
 80068f8:	20004534 	.word	0x20004534

080068fc <_isatty_r>:
 80068fc:	b538      	push	{r3, r4, r5, lr}
 80068fe:	4d06      	ldr	r5, [pc, #24]	; (8006918 <_isatty_r+0x1c>)
 8006900:	2300      	movs	r3, #0
 8006902:	4604      	mov	r4, r0
 8006904:	4608      	mov	r0, r1
 8006906:	602b      	str	r3, [r5, #0]
 8006908:	f7fe fdec 	bl	80054e4 <_isatty>
 800690c:	1c43      	adds	r3, r0, #1
 800690e:	d102      	bne.n	8006916 <_isatty_r+0x1a>
 8006910:	682b      	ldr	r3, [r5, #0]
 8006912:	b103      	cbz	r3, 8006916 <_isatty_r+0x1a>
 8006914:	6023      	str	r3, [r4, #0]
 8006916:	bd38      	pop	{r3, r4, r5, pc}
 8006918:	20004534 	.word	0x20004534

0800691c <memcpy>:
 800691c:	440a      	add	r2, r1
 800691e:	4291      	cmp	r1, r2
 8006920:	f100 33ff 	add.w	r3, r0, #4294967295
 8006924:	d100      	bne.n	8006928 <memcpy+0xc>
 8006926:	4770      	bx	lr
 8006928:	b510      	push	{r4, lr}
 800692a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800692e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006932:	4291      	cmp	r1, r2
 8006934:	d1f9      	bne.n	800692a <memcpy+0xe>
 8006936:	bd10      	pop	{r4, pc}

08006938 <memmove>:
 8006938:	4288      	cmp	r0, r1
 800693a:	b510      	push	{r4, lr}
 800693c:	eb01 0402 	add.w	r4, r1, r2
 8006940:	d902      	bls.n	8006948 <memmove+0x10>
 8006942:	4284      	cmp	r4, r0
 8006944:	4623      	mov	r3, r4
 8006946:	d807      	bhi.n	8006958 <memmove+0x20>
 8006948:	1e43      	subs	r3, r0, #1
 800694a:	42a1      	cmp	r1, r4
 800694c:	d008      	beq.n	8006960 <memmove+0x28>
 800694e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006952:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006956:	e7f8      	b.n	800694a <memmove+0x12>
 8006958:	4402      	add	r2, r0
 800695a:	4601      	mov	r1, r0
 800695c:	428a      	cmp	r2, r1
 800695e:	d100      	bne.n	8006962 <memmove+0x2a>
 8006960:	bd10      	pop	{r4, pc}
 8006962:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006966:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800696a:	e7f7      	b.n	800695c <memmove+0x24>

0800696c <_realloc_r>:
 800696c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800696e:	4607      	mov	r7, r0
 8006970:	4614      	mov	r4, r2
 8006972:	460e      	mov	r6, r1
 8006974:	b921      	cbnz	r1, 8006980 <_realloc_r+0x14>
 8006976:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800697a:	4611      	mov	r1, r2
 800697c:	f7ff b86a 	b.w	8005a54 <_malloc_r>
 8006980:	b922      	cbnz	r2, 800698c <_realloc_r+0x20>
 8006982:	f7ff f819 	bl	80059b8 <_free_r>
 8006986:	4625      	mov	r5, r4
 8006988:	4628      	mov	r0, r5
 800698a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800698c:	f000 f814 	bl	80069b8 <_malloc_usable_size_r>
 8006990:	42a0      	cmp	r0, r4
 8006992:	d20f      	bcs.n	80069b4 <_realloc_r+0x48>
 8006994:	4621      	mov	r1, r4
 8006996:	4638      	mov	r0, r7
 8006998:	f7ff f85c 	bl	8005a54 <_malloc_r>
 800699c:	4605      	mov	r5, r0
 800699e:	2800      	cmp	r0, #0
 80069a0:	d0f2      	beq.n	8006988 <_realloc_r+0x1c>
 80069a2:	4631      	mov	r1, r6
 80069a4:	4622      	mov	r2, r4
 80069a6:	f7ff ffb9 	bl	800691c <memcpy>
 80069aa:	4631      	mov	r1, r6
 80069ac:	4638      	mov	r0, r7
 80069ae:	f7ff f803 	bl	80059b8 <_free_r>
 80069b2:	e7e9      	b.n	8006988 <_realloc_r+0x1c>
 80069b4:	4635      	mov	r5, r6
 80069b6:	e7e7      	b.n	8006988 <_realloc_r+0x1c>

080069b8 <_malloc_usable_size_r>:
 80069b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069bc:	1f18      	subs	r0, r3, #4
 80069be:	2b00      	cmp	r3, #0
 80069c0:	bfbc      	itt	lt
 80069c2:	580b      	ldrlt	r3, [r1, r0]
 80069c4:	18c0      	addlt	r0, r0, r3
 80069c6:	4770      	bx	lr

080069c8 <_init>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	bf00      	nop
 80069cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069ce:	bc08      	pop	{r3}
 80069d0:	469e      	mov	lr, r3
 80069d2:	4770      	bx	lr

080069d4 <_fini>:
 80069d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069d6:	bf00      	nop
 80069d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80069da:	bc08      	pop	{r3}
 80069dc:	469e      	mov	lr, r3
 80069de:	4770      	bx	lr
